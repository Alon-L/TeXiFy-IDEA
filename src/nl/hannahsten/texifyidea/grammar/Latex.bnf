{
    parserClass="nl.hannahsten.texifyidea.parser.LatexParser"
    parserUtilClass="nl.hannahsten.texifyidea.parser.LatexParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Latex"
    psiImplClassSuffix="Impl"
    psiPackage="nl.hannahsten.texifyidea.psi"
    psiImplPackage="nl.hannahsten.texifyidea.psi.impl"
    psiImplUtilClass="nl.hannahsten.texifyidea.psi.LatexPsiImplUtil"

    elementTypeHolderClass="nl.hannahsten.texifyidea.psi.LatexTypes"
    elementTypeClass="nl.hannahsten.texifyidea.psi.LatexElementType"
    tokenTypeClass="nl.hannahsten.texifyidea.psi.LatexTokenType"

    extends("commands")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexCommandsStub>"
    implements("commands")="com.intellij.psi.PsiNameIdentifierOwner"

    extends("environment")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub>"
    implements("environment")="com.intellij.psi.PsiLanguageInjectionHost"

    // Make text have an identifier, to be able to Ctrl+B for \label parameters
    implements("normal_text")="com.intellij.psi.PsiNameIdentifierOwner"

    // See the lexer
    tokens=[
        WHITE_SPACE='regexp:\s+'
        DISPLAY_MATH_START='\['
        DISPLAY_MATH_END='\]'
        INLINE_MATH_START='regexp:($|\\\()'
        INLINE_MATH_END='regexp:($|\\\))'
        BEGIN_TOKEN='\begin'
        END_TOKEN='\end'
        BACKSLASH='\\'
        COMMAND_TOKEN='regexp:([a-zA-Z@]+|.|\r)'
        COMMENT_TOKEN='regexp:%[^\r\n]*'
        STAR='*'
        AMPERSAND='&'
        NORMAL_TEXT_WORD='regexp:[^\s\\{}%\[\]$()|!"=&]+'
        NORMAL_TEXT_CHAR='regexp:[|!"=&]'
        // Because any character can follow an \@ifnextchar, which can break the parsing in many ways, together with the first argument it is one token
        COMMAND_IFNEXTCHAR='regexp:\\@ifnextchar.'
        RAW_TEXT_TOKEN='RAW_TEXT'
    ]
}



latexFile ::= content*

content ::= no_math_content

no_math_content ::= raw_text | comment | environment | math_environment | COMMAND_IFNEXTCHAR | commands | group | OPEN_PAREN | CLOSE_PAREN | M_OPEN_BRACKET | M_CLOSE_BRACKET | OPEN_BRACKET | CLOSE_BRACKET | normal_text

normal_text ::= (NORMAL_TEXT_WORD | STAR | AMPERSAND | NORMAL_TEXT_CHAR)+ {
    methods=[getReferences getReference getNameIdentifier getName setName]
}

environment ::= begin_command environment_content? end_command {
    pin=1
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub"
    methods=[getEnvironmentName getLabel isValidHost updateText createLiteralTextEscaper]
 }

environment_content ::= <<injection_env_content raw_text>> | content+

commands ::= BACKSLASH COMMAND_TOKEN STAR? parameter* {
    pin=2
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStub"
    mixin="nl.hannahsten.texifyidea.psi.LatexCommandsImplMixin"
    methods=[getReferences getReference getOptionalParameters getRequiredParameters hasLabel getTextOffset getName]
}

begin_command ::= BEGIN_TOKEN STAR? parameter* {
    pin=1
    methods=[getOptionalParameters getRequiredParameters]
}

end_command ::= END_TOKEN STAR? parameter* { pin=1 }

parameter ::= optional_param | required_param

// pin=3 makes sure that an optional parameter is only matched successfully when
// it also encounters a close bracket. So '[' at the beginning of a (math) environment
// will be seen as simply an open bracket, but '[x]' at the same location will
// be parsed as optional parameter.
// https://stackoverflow.com/a/48709143/6629569
optional_param ::= OPEN_BRACKET optional_param_content* CLOSE_BRACKET { pin=3 }

// content, but no brackets
optional_param_content ::= comment | environment | math_environment | commands | group | OPEN_PAREN | CLOSE_PAREN | normal_text

required_param ::= group

group ::= OPEN_BRACE content* CLOSE_BRACE { pin=1 }

comment ::= COMMENT_TOKEN

math_environment ::= inline_math | display_math

inline_math ::= INLINE_MATH_START math_content? INLINE_MATH_END { pin=1 }

display_math ::= DISPLAY_MATH_START math_content? DISPLAY_MATH_END { pin=1 }

math_content ::= no_math_content+

raw_text ::= RAW_TEXT_TOKEN+
