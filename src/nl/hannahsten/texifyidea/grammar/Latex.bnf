{
    parserClass="nl.hannahsten.texifyidea.parser.LatexParser"
    parserUtilClass="nl.hannahsten.texifyidea.parser.LatexParserUtil"
    parserImports=["static com.intellij.lang.WhitespacesBinders.*"]
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Latex"
    psiImplClassSuffix="Impl"
    psiPackage="nl.hannahsten.texifyidea.psi"
    psiImplPackage="nl.hannahsten.texifyidea.psi.impl"
    psiImplUtilClass="nl.hannahsten.texifyidea.psi.LatexPsiImplUtil"

    elementTypeHolderClass="nl.hannahsten.texifyidea.psi.LatexTypes"
    elementTypeClass="nl.hannahsten.texifyidea.psi.LatexElementType"
    tokenTypeClass="nl.hannahsten.texifyidea.psi.LatexTokenType"

    extends("commands")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexCommandsStub>"
    implements("commands")= ["com.intellij.psi.PsiNameIdentifierOwner" "nl.hannahsten.texifyidea.psi.LatexCommandWithParams"]

    extends("environment")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub>"
    implements("environment")="com.intellij.psi.PsiLanguageInjectionHost"

    implements("begin_command") = "nl.hannahsten.texifyidea.psi.LatexCommandWithParams"

    extends("magic_comment")="com.intellij.extapi.psi.StubBasedPsiElementBase<nl.hannahsten.texifyidea.index.stub.LatexMagicCommentStub>"
    // Make text have an identifier, to be able to Ctrl+B for \label parameters
    implements("parameter_text")="com.intellij.psi.PsiNameIdentifierOwner"

    // Make text in parameter group have an identifier, to be able to Ctrl+B for \label parameters
    implements("parameter_group_text")="com.intellij.psi.PsiNameIdentifierOwner"


    // See the lexer
    tokens=[
        WHITE_SPACE='regexp:\s+'
        DISPLAY_MATH_START='\['
        DISPLAY_MATH_END='\]'
        INLINE_MATH_START='regexp:($|\\\()'
        INLINE_MATH_END='regexp:($|\\\))'
        BEGIN_TOKEN='\begin'
        END_TOKEN='\end'
        COMMAND_TOKEN='regexp:\\([a-zA-Z@]+|.|\r)'
        MAGIC_COMMENT_TOKEN='regexp:%(!|( ![tT][eE][xX]))[^\r\n]*'
        COMMENT_TOKEN='regexp:%[^\r\n]*'
        STAR='*'
        AMPERSAND='&'
        NORMAL_TEXT_WORD='regexp:[^\s\\{}%\[\]$()|!"=&]+'
        NORMAL_TEXT_CHAR='regexp:[|!"=&]'
        // Because any character can follow an \@ifnextchar, which can break the parsing in many ways, together with the first argument it is one token
        COMMAND_IFNEXTCHAR='regexp:\\@ifnextchar.'
        RAW_TEXT_TOKEN='RAW_TEXT'
        BEGIN_PSEUDOCODE_BLOCK='BEGIN_PSEUDOCODE_BLOCK'
        MIDDLE_PSEUDOCODE_BLOCK='MIDDLE_PSEUDOCODE_BLOCK'
        END_PSEUDOCODE_BLOCK='END_PSEUDOCODE_BLOCK'
    ]
}


latexFile ::= content*

content ::= no_math_content

no_math_content ::= raw_text | magic_comment | comment | environment | pseudocode_block | math_environment | COMMAND_IFNEXTCHAR | commands | group |
    OPEN_PAREN | CLOSE_PAREN | OPEN_BRACKET | CLOSE_BRACKET | normal_text

normal_text ::= (NORMAL_TEXT_WORD | STAR | AMPERSAND | NORMAL_TEXT_CHAR)+

environment ::= begin_command environment_content? end_command {
    pin=1
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexEnvironmentStub"
    methods=[getEnvironmentName getLabel isValidHost updateText createLiteralTextEscaper]
 }

environment_content ::= <<injection_env_content raw_text>> | content+

pseudocode_block ::= BEGIN_PSEUDOCODE_BLOCK parameter* pseudocode_block_content? (MIDDLE_PSEUDOCODE_BLOCK pseudocode_block_content?)* (END_PSEUDOCODE_BLOCK parameter*) { pin=5 }

pseudocode_block_content ::= no_math_content*

commands ::= COMMAND_TOKEN STAR? parameter* {
    pin=1
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexCommandsStub"
    mixin="nl.hannahsten.texifyidea.psi.LatexCommandsImplMixin"
    methods=[getReferences getReference getOptionalParameterMap getRequiredParameters hasLabel getTextOffset getName setName]
}


begin_command ::= BEGIN_TOKEN STAR? parameter* {
    pin=1
    methods=[getOptionalParameterMap getRequiredParameters]
}

end_command ::= END_TOKEN STAR? parameter* { pin=1 }

parameter ::= optional_param | required_param

// pin=3 makes sure that an optional parameter is only matched successfully when
// it also encounters a close bracket. So '[' at the beginning of a (math) environment
// will be seen as simply an open bracket, but '[x]' at the same location will
// be parsed as optional parameter.
// https://stackoverflow.com/a/48709143/6629569
optional_param ::= OPEN_BRACKET ( (keyval_pair  ("," keyval_pair)*) | optional_param_content*) CLOSE_BRACKET { pin=3 }

required_param ::= OPEN_BRACE required_param_content* CLOSE_BRACE { pin=1 }

// These are like content, but no brackets and with parameter_text instead of normal_text
// We have to separate optional and required parameter content, because required parameter content
// can contain mismatched brackets, but optional parameters not (then we wouldn't know what to match)
optional_param_content ::= raw_text | magic_comment | comment | environment | pseudocode_block | math_environment | COMMAND_IFNEXTCHAR | commands | group | OPEN_PAREN | CLOSE_PAREN | parameter_text | NORMAL_TEXT_CHAR
required_param_content ::= raw_text | magic_comment | comment | environment | pseudocode_block | math_environment | COMMAND_IFNEXTCHAR | group | OPEN_PAREN | CLOSE_PAREN | parameter_text | OPEN_BRACKET | CLOSE_BRACKET | NORMAL_TEXT_CHAR

// These non-terminals are used to match the key value pairs of optional parameters. We cannot (currently) define
// "=" and "," as tokens because the lexer would create them as tokens everywhere, including in normal text.
keyval_pair ::= keyval_key ("=" keyval_value)?
keyval_key ::= keyval_content+ {
    methods=[toString]
}
keyval_value ::= keyval_content+ {
    methods=[toString]
}
keyval_content ::= parameter_text | parameter_group

// The lowest level of a parameter must have the getReferences etc. implemented
// We don't do this on normal_text because then every normal_text in the document would be a reference
// So, the following is like normal_text
// This assumes that parameter text which is a reference, appears directly under param_content
// Commands is here instead of in required_param_content because it can be part of reference text for example to a file
parameter_text ::= (commands | NORMAL_TEXT_WORD | STAR | AMPERSAND)+ {
   methods=[getReferences getReference getNameIdentifier getName setName]
}

group ::= OPEN_BRACE content* CLOSE_BRACE { pin=1 }

parameter_group ::= OPEN_BRACE parameter_group_text CLOSE_BRACE { pin=1 }

// Be sure to capture the whitespace before and after the actual content as groups are meant to capture
// *everything* inside them.
parameter_group_text ::= content* { hooks = [wsBinders="GREEDY_LEFT_BINDER, GREEDY_RIGHT_BINDER"] methods=[getNameIdentifier getName setName] }

comment ::= COMMENT_TOKEN

magic_comment ::= MAGIC_COMMENT_TOKEN {
    elementTypeClass="nl.hannahsten.texifyidea.index.stub.LatexMagicCommentStubElementType"
    stubClass="nl.hannahsten.texifyidea.index.stub.LatexMagicCommentStub"
}

math_environment ::= inline_math | display_math

inline_math ::= INLINE_MATH_START math_content? INLINE_MATH_END { pin=1 }

display_math ::= DISPLAY_MATH_START math_content? DISPLAY_MATH_END { pin=1 }

math_content ::= no_math_content+

raw_text ::= RAW_TEXT_TOKEN+
