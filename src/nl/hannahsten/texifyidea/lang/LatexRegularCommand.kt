package nl.hannahsten.texifyidea.lang

import nl.hannahsten.texifyidea.lang.Argument.Type
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.ALGPSEUDOCODE
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSMATH
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSSYMB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.BIBLATEX
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.CLEVEREF
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.CSQUOTES
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.DEFAULT
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.EUROSYM
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.FONTENC
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.GLOSSARIES
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.GRAPHICX
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.LISTINGS
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.MARVOSYM
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.MATHTOOLS
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.NATBIB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.SIUNITX
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.SUBFILES
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.TEXTCOMP
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.ULEM
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.WASYSYM
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.XCOLOR

/**
 * @author Sten Wessel
 */
enum class LatexRegularCommand(
        override val command: String,
        override vararg val arguments: Argument = emptyArray(),
        override val dependency: LatexPackage = DEFAULT,
        override val display: String? = null
) : LatexCommand {

    ADDTOCOUNTER("addtocounter", "countername".asRequired(), "value".asRequired()),
    A_RING("aa", display = "å"),
    CAPITAL_A_RING("AA", display = "Å"),
    ADDBIBRESOURCE("addbibresource", RequiredFileArgument("bibliographyfile", true, false, "bib"), dependency = BIBLATEX),
    AE("ae", display = "æ"),
    CAPITAL_AE("AE", display = "Æ"),
    APPENDIX("appendix"),
    AUTHOR("author", "name".asRequired(Type.TEXT)),
    AUTOREF("autoref", "label".asRequired(Type.TEXT), dependency = LatexPackage.HYPERREF),
    BEGIN("begin", "environment".asRequired()),
    END("end", "environment".asRequired()),
    ENSUREMATH("ensuremath", "text".asRequired()),
    BASELINESKIP("baselineskip"),
    BASELINESTRETCH("baselinestretch "),
    BFSERIES("bfseries"),
    BIBITEM("bibitem", "label".asOptional(), "citekey".asRequired()),
    BIBLIOGRAPHYSTYLE("bibliographystyle", "style".asRequired()),
    BIBLIOGRAPHY("bibliography", RequiredFileArgument("bibliographyfile", true, true, "bib")),
    BIGSKIP("bigskip"),
    BLENDCOLORS("blendcolors", "mix expr".asRequired(), dependency = XCOLOR),
    BLENDCOLORS_STAR("blendcolors*", "mix expr".asRequired(), dependency = XCOLOR),
    BOLDMATH("boldmath"),
    BOXFRAME("boxframe", "width".asRequired(), "height".asRequired(), "depth".asRequired(), dependency = XCOLOR),
    CAPTION("caption", "shorttext".asOptional(), "text".asRequired(Type.TEXT)),
    CHAPTER("chapter", "shorttitle".asOptional(), "title".asRequired(Type.TEXT)),
    CHAPTER_STAR("chapter*", "title".asRequired(Type.TEXT)),
    CITE("cite", "extratext".asOptional(), "keys".asRequired()),
    CLEARDOUBLEPAGE("cleardoublepage"),
    CLEARPAGE("clearpage"),
    COLOR("color", "color".asRequired(), dependency = LatexPackage.COLOR),
    COLOR2("color", "model-list".asOptional(), "spec-list".asRequired(), dependency = XCOLOR),
    COLORBOX("colorbox", "color".asRequired(), "text".asRequired(), dependency = XCOLOR),
    COLORBOX2("colorbox", "model-list".asOptional(), "spec-list".asRequired(), "text".asRequired(), dependency = XCOLOR),
    COLORMASK("colormask", dependency = XCOLOR),
    COLORSERIESCYCLE("colorseriescycle", dependency = XCOLOR),
    COLUMNSEP("columnsep "),
    COLUMNWIDTH("columnwidth"),
    CONTENTSLINE("contentsline", "type".asRequired(), "text".asRequired(Type.TEXT), "page".asRequired()),
    CONTENTSNAME("contentsname", "name".asRequired()),
    CONVERTCOLORSPEC("convertcolorspec", "model".asRequired(), "spec".asRequired(), "target model".asRequired(), "cmd".asRequired(), dependency = XCOLOR),
    CREF("cref", "label".asRequired(), dependency = CLEVEREF),
    CREF_CAPITAL("Cref", "label".asRequired(), dependency = CLEVEREF),
    TEXT_DAGGER("dag", display = "†"),
    TEXT_DOUBLE_DAGGER("ddag", display = "‡"),
    DATE("date", "text".asRequired(Type.TEXT)),
    DECLARE_MATH_OPERATOR("DeclareMathOperator", "command".asRequired(), "operator".asRequired(Type.TEXT), dependency = AMSMATH),
    DEF("def"),
    DIRECTLUA("directlua", "luacode".asRequired()),
    DOCUMENTCLASS("documentclass", "options".asOptional(), RequiredFileArgument("class", true, false, "cls")),
    DOLLAR_SIGN("$", display = "$"),
    DOTFILL("dotfill"),
    EM("em"),
    EMPH("emph", "text".asRequired(Type.TEXT)),
    ENLARGETHISPAGE("enlargethispage", "size".asRequired()),
    ENLARGETHISPAGE_STAR("enlargethispage*", "size".asRequired()),
    ENQUOTE("enquote", dependency = CSQUOTES),
    ENQUOTE_STAR("enquote*", dependency = CSQUOTES),
    EQREF("eqref", "eqLabel".asRequired(Type.TEXT), dependency = AMSMATH),
    EVENSIDEMARGIN("evensidemargin"),
    EXTERNALDOCUMENT("externaldocument", "prefix".asOptional(), "file".asRequired()),
    EXTRACTCOLORSPEC("extractcolorspec", "color".asRequired(), "cmd".asRequired(), dependency = XCOLOR),
    EXTRACTCOLORSPECS("extractcolorspecs", "color".asRequired(), "model-cmd".asRequired(), "color-cmd".asRequired(), dependency = XCOLOR),
    FAMILY("family"),
    FBOX("fbox", "text".asRequired(Type.TEXT)),
    FCOLORBOX("fcolorbox", "frame color".asRequired(), "background color".asRequired(), "text".asRequired(), dependency = XCOLOR),
    FCOLORBOX2("fcolorbox", "model-list".asOptional(), "frame spec-list".asRequired(), "background spec-list".asRequired(), "text".asRequired(), dependency = XCOLOR),
    FCOLORBOX3("fcolorbox", "frame model-list".asOptional(), "frame spec-list".asRequired(), "background model-list".asOptional(), "background spec-list".asRequired(), "text".asRequired(), dependency = XCOLOR),
    FCOLORBOX4("fcolorbox", "frame color".asRequired(), "background model-list".asOptional(), "background spec-list".asRequired(), "text".asRequired(), dependency = XCOLOR),
    FIGURENAME("figurename", "name".asRequired(Type.TEXT)),
    FLQ("flq", display = "‹"),
    FLQQ("flqq", display = "«"),
    FLUSHBOTTOM("flushbottom"),
    FLUSHLEFT("flushleft"),
    FLUSHRIGHT("flushright"),
    FONTENCODING("fontencoding", "enc".asRequired()),
    FONTFAMILY("fontfamily", "family".asRequired()),
    FONTSERIES("fontseries", "series".asRequired()),
    FONTSHAPE("fontshape", "shape".asRequired()),
    FONTSIZE("fontsize", "size".asRequired(), "skip".asRequired()),
    FOOTNOTESIZE("footnotesize"),
    FOOTNOTETEXT("footnotetext", "number".asOptional(), "text".asRequired(Type.TEXT)),
    FOOTNOTE("footnote", "number".asOptional(), "text".asRequired(Type.TEXT)),
    FOOTNOTEMARK("footnotemark"),
    FRAMEBOX("framebox", "width".asOptional(), "pos".asOptional(), "text".asOptional(Type.TEXT)),
    FRAME("frame", "text".asRequired(Type.TEXT)),
    FRQ("frq", display = "›"),
    FRQQ("frqq", display = "»"),
    FULLREF("fullref", "label".asRequired(Type.TEXT), dependency = LatexPackage.HYPERREF),
    GLOSSARYENTRY("glossaryentry", "text".asRequired(Type.TEXT), "pagenum".asRequired()),
    GLOSSARY("glossary", "text".asRequired(Type.TEXT)),
    GLQ("glq", display = ","),
    GLQQ("glqq", display = "„"),
    GRAPHICSPATH("graphicspath", RequiredFolderArgument("foldername"), dependency = GRAPHICX),
    GRQ("grq", display = "‘"),
    GRQQ("grqq", display = "“"),
    GUILLEMOTLEFT("guillemotleft", dependency = FONTENC.with("T1"), display = "«"),
    GUILLEMOTRIGHT("guillemotright", dependency = FONTENC.with("T1"), display = "»"),
    HFILL("hfill"),
    HIDEROWCOLORS("hiderowcolors", dependency = XCOLOR),
    HREF("href", "url".asRequired(), "text".asRequired(), dependency = LatexPackage.HYPERREF),
    HRULE("hrule"),
    HRULEFILL("hrulefill"),
    HSPACE("hspace", "length".asRequired()),
    HSPACE_STAR("hspace*", "length".asRequired()),
    HSS("hss"),
    HUGE("huge"),
    CAPITAL_HUGE("Huge"),
    HYPERREF("hyperref", "options".asOptional(), "label".asRequired(Type.TEXT), dependency = LatexPackage.HYPERREF),
    HYPHENATION("hyphenation", "words".asRequired(Type.TEXT)),
    I("i", display = "i (dotless)"),
    IMPORT("import", RequiredFolderArgument("absolute path"), RequiredFileArgument("filename", false, false, "tex"), dependency = LatexPackage.IMPORT),
    INCLUDE("include", RequiredFileArgument("sourcefile", false, false, "tex")),
    INCLUDEFROM("includefrom", RequiredFolderArgument("absolute path"), RequiredFileArgument("filename", false, false, "tex"), dependency = LatexPackage.IMPORT),
    INPUT("input", RequiredFileArgument("sourcefile", true, false, "tex")),
    INPUTFROM("inputfrom", RequiredFolderArgument("absolute path"), RequiredFileArgument("filename", false, false, "tex"), dependency = LatexPackage.IMPORT),
    INCLUDEGRAPHICS("includegraphics", "key-val-list".asOptional(), RequiredPicturePathArgument("imagefile", true, false, "pdf", "png", "jpg", "eps", "tikz"), dependency = GRAPHICX),
    INCLUDEONLY("includeonly", RequiredFileArgument("sourcefile", false, false, "tex")),
    INDEXNAME("indexname", "name".asRequired()),
    INDEXSPACE("indexspace"),
    INDEX("intex", "entry".asRequired()),
    ITEM("item", "label".asOptional()),
    ITSHAPE("itshape"),
    LABEL("label", "key".asRequired()),
    LARGE("large"),
    CAPITAL_LARGE("Large"),
    SCREAMING_LARGE("LARGE"),
    LATEX("LaTeX", display = "LaTeX"),
    LATEXE("LaTeXe", display = "LaTeX2ε"),
    LBRACK("lbrack", display = "["),
    LPAREN("lparen", display = "(", dependency = MATHTOOLS),
    ELLIPSIS("ldots", display = "…"),
    LEFTEQN("lefteqn"),
    LET("let"),
    LFSERIES("lfseries"),
    LINEBREAK("linebreak", "number".asOptional()),
    LINETHICKNESS("linethickness", "dimension".asRequired()),
    LINEWIDTH("linewidth"),
    LISTFIGURENAME("listfigurename", "name".asRequired(Type.TEXT)),
    LISTFILES("listfiles"),
    LISTOFFIGURES("listoffigures"),
    LISTOFTABLES("listoftables"),
    LISTTABLENAME("listtablename", "name".asRequired(Type.TEXT)),
    LOADCLASS("LoadClass", "options".asOptional(), RequiredFileArgument("class", true, false, "cls")),
    LOADCLASSWITHOPTIONS("LoadClassWithOptions", RequiredFileArgument("class", true, false, "cls")),
    LOWERCASE("lowercase", "text".asRequired(Type.TEXT)),
    LQ("lq", display = "‘"),
    MAKEGLOSSARY("makeglossary"),
    MAKEINDEX("makeindex"),
    MAKELABEL("makelabel"),
    MAKELABELS("makelabels", "number".asRequired()),
    MAKENOIDXGLOSSARIES("makenoidxglossaries", dependency = GLOSSARIES),
    MAKETITLE("maketitle"),
    MASKCOLORS("maskcolors", "num model".asOptional(), "color".asRequired(), dependency = XCOLOR),
    MBOX("mbox", "text".asRequired()),
    MDSERIES("mdseries"),
    MEDSKIP("medskip"),
    MULTICOLUMN("multicolumn", "cols".asRequired(), "pos".asRequired(), "text".asRequired(Type.TEXT)),
    NAMEREF("nameref", "label".asRequired(Type.TEXT), dependency = LatexPackage.HYPERREF),
    NEWLABEL("newlabel"),
    NEWLENGTH("newlength", "length".asRequired()),
    NEWLINE("newline"),
    NEWPAGE("newpage"),
    NEWTHEOREM("newtheorem", "envname".asRequired(), "numberedlike".asOptional(), "caption".asRequired(Type.TEXT), "within".asOptional()),
    NEWTHEOREM_STAR("newtheorem*", "envname".asRequired(), "caption".asRequired(Type.TEXT)),
    NOCITE("nocite", "keys".asRequired()),
    NOFILES("nofiles"),
    NOLINEBREAK("nolinebreak", "number".asOptional()),
    NONUMBER("nonumber"),
    NOPAGEBREAK("nopagebreak", "number".asOptional()),
    NOPAGECOLOR("nopagecolor", dependency = XCOLOR),
    NORMALCOLOR("normalcolor"),
    NORMALFONT("normalfont"),
    NORMALSIZE("normalsize"),
    OE("oe", display = "œ"),
    OLDSTYLEENUMS("oldstylenums", "number".asRequired()),
    ONLYIFSTANDALONE("onlyifstandalone", "code".asRequired()), // dependency = standalone, but either class or package
    CAPITAL_OE("OE", display = "Œ"),
    ODDSIDEMARGIN("oddsidemargin"),
    ONECOLUMN("onecolumn"),
    PAGEBREAK("pagebreak", "number".asOptional()),
    PAGECOLOR("pagecolor", "color".asRequired(), dependency = XCOLOR),
    PAGECOLOR2("pagecolor", "model-list".asOptional(), "spec-list".asRequired(), dependency = XCOLOR),
    PAGENAME("pagename"),
    PAGENUMBERING("pagenumbering", "numstyle".asRequired()),
    PAGEREF("pageref", "label".asRequired()),
    PAGESTYLE("pagestyle", "style".asRequired()),
    PAGETOTAL("pagetotal"),
    PAPERWIDTH("paperwidth"),
    PAPERHEIGHT("paperheight"),
    PARAGRAPH("paragraph", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    PARAGRAPH_STAR("paragraph*", "title".asRequired(Type.TEXT)),
    PARAGRAPHMARK("paragraphmark"),
    PARBOX("parbox", "pos".asOptional(), "width".asRequired(), "text".asRequired(Type.TEXT)),
    PARINDENT("parindent"),
    PARSKIP("parskip"),
    PART("part", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    PART_STAR("part*", "title".asRequired(Type.TEXT)),
    PARTNAME("partname", "name".asRequired(Type.TEXT)),
    PDFINFO("pdfinfo", "info".asRequired(Type.TEXT)),
    POUNDS("pounds", display = "£"),
    PRINTBIBLIOGRAPHY("printbibliography", dependency = BIBLATEX),
    PRINTINDEX("printindex"),
    PRINTNOIDXGLOSSARIES("printnoidxglossaries", dependency = GLOSSARIES),
    PROVIDESCLASS("ProvidesClass"),
    PROVIDESPACKAGE("ProvidesPackage"),
    R("r", display = "˚ (accent)"),
    RBRACK("rbrack", display = "]"),
    RPAREN("rparen", display = ")", dependency = MATHTOOLS),
    REF("ref", "label".asRequired()),
    REFNAME("refname", "name".asRequired(Type.TEXT)),
    REQUIREPACKAGE("RequirePackage", "options".asOptional(), RequiredFileArgument("package", true, true, "sty")),
    RESETCOLORSERIES("resetcolorseries", "div".asOptional(), "name".asRequired(), dependency = XCOLOR),
    RIGHTHYPHENMIN("righthyphenmin"),
    RIGHTMARGIN("rightmargin"),
    RIGHTMARK("rightmark"),
    RMFAMILY("rmfamily"),
    ROMAN("roman", "counter".asRequired()),
    ROTATEBOX("rotatebox", "key-val-list".asOptional(), "degrees".asRequired(), "text".asRequired(Type.TEXT), dependency = GRAPHICX),
    ROWCOLORS("rowcolors", "commands".asOptional(), "row".asRequired(), "odd-row color".asRequired(), "even-row color".asRequired(), dependency = XCOLOR),
    ROWCOLORS_STAR("rowcolors*", "commands".asOptional(), "row".asRequired(), "odd-row color".asRequired(), "even-row color".asRequired(), dependency = XCOLOR),
    ROWNUM("rownum", dependency = XCOLOR),
    CAPITAL_ROMAN("Roman", "counter".asRequired()),
    RULE("rule", "line".asOptional(), "width".asRequired(), "thickness".asRequired()),
    RQ("rq", display = "’"),
    SAMEPAGE("samepage"),
    SBOX("sbox", "cmd".asRequired(), "length".asRequired()),
    SCRIPTSIZE("scriptsize"),
    SCSHAPE("scshape"),
    SECTION("section", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    SECTION_STAR("section*", "title".asRequired(Type.TEXT)),
    SECTION_SIGN("S", display = "§"),
    SELECTFONT("selectfont"),
    SETCOUNTER("setcounter", "countername".asRequired(), "value".asRequired()),
    SETLENGTH("setlength", "cmd".asRequired(), "length".asRequired()),
    SFFAMILY("sffamily"),
    SHORTSTACK("shortstack", "pos".asOptional(), "text".asRequired(Type.TEXT)),
    SHOWROWCOLORS("showrowcolors", dependency = XCOLOR),
    SLSHAPE("slshape"),
    SMALL("small"),
    SMALLSKIP("smallskip"),
    SMASH("smash"),
    SOUT("sout", "strikethroughtext".asRequired(Type.TEXT), dependency = ULEM),
    SPACE("space"),
    STEPCOUNTER("stepcounter", "counter".asRequired()),
    STOP("stop"),
    STRETCH("stretch", "factor".asRequired()),
    SUBFILE("subfile", RequiredFileArgument("sourcefile", true, false, "tex"), dependency = SUBFILES),
    SUBFILEINCLUDE("subfileinclude", RequiredFileArgument("sourcefile", true, false, "tex"), dependency = SUBFILES),
    SUBIMPORT("subimport", RequiredFolderArgument("relative path"), RequiredFileArgument("filename", false, false, "tex"), dependency = LatexPackage.IMPORT),
    SUBINCLUDEFROM("subincludefrom", RequiredFolderArgument("relative path"), RequiredFileArgument("filename", false, false, "tex"), dependency = LatexPackage.IMPORT),
    SUBITEM("subitem"),
    SUBPARAGRAPH("subparagraph", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    SUBPARAGRAPH_STAR("subparagraph*", "title".asRequired(Type.TEXT)),
    SUBPARAGRAPHMARK("subparagraphmark", "code".asRequired()),
    SUBSECTION("subsection", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    SUBSECTION_STAR("subsection*", "title".asRequired(Type.TEXT)),
    SUBSECTIONMARK("subsectionmark", "code".asRequired()),
    SUBSUBITEM("subsubitem"),
    SUBSUBSECTION("subsubsection", "shorttitle".asOptional(Type.TEXT), "title".asRequired(Type.TEXT)),
    SUBSUBSECTION_STAR("subsubsection*", "title".asRequired(Type.TEXT)),
    SUBSUBSECTIONMARK("subsubsectionmark", "code".asRequired()),
    SUPPRESSFLOATS("suppressfloats", "placement".asOptional()),
    SYMBOL("symbol", "n".asRequired()),
    TABCOLSEP("tabcolsep"),
    TABLENAME("tablename", "name".asRequired(Type.TEXT)),
    TABLEOFCONTENTS("tableofcontents"),
    TESTCOLOR("testcolor", "color".asRequired(), dependency = XCOLOR),
    TESTCOLOR2("testcolor", "model-list".asOptional(), "spec-list".asRequired(), dependency = XCOLOR),
    TEXT_ASCII_CIRCUMFLEX("textasciicircum", display = "^"),
    TEXT_ASCII_TILDE("textasciitilde", display = "~"),
    TEXT_CENTERED_ASTERISK("textasteriskcentered", display = "⁎"),
    TEXT_BACKSLASH("textbackslash", display = "\\"),
    TEXT_BAR("textbar", display = "|"),
    TEXTBF("textbf", "text".asRequired(Type.TEXT)),
    TEXTBRACELEFT("textbraceleft", display = "{"),
    TEXTBRACERIGHT("textbraceright", display = "}"),
    TEXT_BULLET("textbullet", display = "•"),
    CIRCLED_TEXT("textcircled", "a".asRequired()),
    TEXTCOLOR("textcolor", "color".asRequired(), "text".asRequired(), dependency = XCOLOR),
    TEXTCOLOR2("textcolor", "model-list".asOptional(), "spec-list".asRequired(), "text".asRequired(), dependency = XCOLOR),
    TEXT_COPYRIGHT("textcopyright", display = "©"),
    TEXTDAGGER("textdagger", display = "†"),
    TEXTDAGGERDBL("textdaggerdbl", display = "‡"),
    TEXT_DOLLAR("textdollar", display = "$"),
    TEXT_DOWN_ARROW("textdownarrow", dependency = TEXTCOMP, display = "↓"),
    TEXTELLIPSIS("textellipsis", display = "…"),
    TEXT_EM_DASH("textemdash", display = "—"),
    TEXT_EN_DASH("textendash", display = "–"),
    TEXT_UPSIDE_DOWN_EXCLAMATION("textexclamdown", display = "¡"),
    TEXT_GREATER_THAN("textgreater", display = ">"),
    TEXTHEIGHT("textheight"),
    TEXTIT("textit", "text".asRequired(Type.TEXT)),
    TEXT_LEFT_ARROW("textleftarrow", dependency = TEXTCOMP, display = "←"),
    TEXT_LESS_THAN("textless", display = "<"),
    TEXTLF("textlf", "text".asRequired(Type.TEXT)),
    TEXTMD("textmd", "text".asRequired(Type.TEXT)),
    TEXTNORMAL("textnormal"),
    TEXTPARAGRAPH("textparagraph"),
    TEXT_CENTERED_PERIOD("textperiodcentered", display = "·"),
    TEXT_UPSIDE_DOWN_QUESTION_MARK("textquestiondown", display = "¿"),
    TEXT_LEFT_DOUBLE_QUOTE("textquotedblleft", display = "“"),
    TEXT_RIGHT_DOUBLE_QUOTE("textquotedblright", display = "”"),
    TEXT_LEFT_QUOTE("textquoteleft", display = "‘"),
    TEXT_RIGHT_QUOTE("textquoteright", display = "’"),
    TEXT_REGISTERED("textregistered", display = "®"),
    TEXT_RIGHT_ARROW("textrightarrow", dependency = TEXTCOMP, display = "→"),
    TEXTRM("textrm", "text".asRequired(Type.TEXT)),
    TEXTSC("textsc", "textsc".asRequired(Type.TEXT)),
    TEXTSECTION("textsection", display = "§"),
    TEXTSF("textsf", "text".asRequired(Type.TEXT)),
    TEXTSL("textsl", "text".asRequired(Type.TEXT)),
    TEXTSTERLING("textsterling", display = "£"),
    TEXTSUBSCRIPT("textsubscript", "text".asRequired(Type.TEXT)),
    TEXTSUPERSCRIPT("textsuperscript", "text".asRequired(Type.TEXT)),
    TEXT_TRADEMARK("texttrademark", display = "™"),
    TEXTTT("texttt", "text".asRequired(Type.TEXT)),
    TEXTUNDERSCORE("textunderscore", display = "_"),
    TEXTUP("textup", "text".asRequired(Type.TEXT)),
    TEXT_UP_ARROW("textdownarrow", dependency = TEXTCOMP, display = "↑"),
    TEXT_VISIBLE_SPACE("textvisiblespace", display = "␣"),
    TEXTWIDTH("textwidth"),
    THANKS("thanks", "to".asRequired(Type.TEXT)),
    THICKLINES("thicklines"),
    THINLINES("thinlines"),
    THISPAGESTYLE("thispagestyle", "style".asRequired()),
    TIME("time"),
    TINY("tiny"),
    TITLE("title", "text".asRequired(Type.TEXT)),
    TODAY("today"),
    TOPMARGIN("topmargin"),
    TTFAMILY("ttfamily"),
    TWOCOLUMN("twocolumn", "text".asOptional(Type.TEXT)),
    UNBOLDMATH("unboldmath"),
    UNDERLINE("underline", "text".asRequired(Type.TEXT)),
    UNITLENGTH("unitlength"),
    UPPERCASE("uppercase", "text".asRequired(Type.TEXT)),
    UPSHAPE("upshape"),
    URL("url", "url".asRequired(), dependency = LatexPackage.HYPERREF),
    USEPACKAGE("usepackage", "options".asOptional(), RequiredFileArgument("package", true, true, "sty")),
    VDOTS("vdots", display = "⋮"),
    VLINE("vline"),
    VSPACE("vspace", "length".asRequired()),
    VSPACE_STAR("vspace*", "length".asRequired()),
    WIDTH("width"),
    XGLOBAL("xglobal", dependency = XCOLOR),

    /*
     * textcomp definitions
     */
    TEXT_TILDE_LOW("texttildelow", dependency = TEXTCOMP, display = "˷"),
    TEXTASCIIMACRON("textasciimacron", dependency = TEXTCOMP, display = "¯"),
    TEXT_ASCII_ACUTE("textasciiacute", dependency = TEXTCOMP, display = "´"),
    TEXT_ASCII_DIERESIS("textasciidieresis", dependency = TEXTCOMP, display = "¨"),
    TEXT_ASCII_GRAVE("textasciigrave", dependency = TEXTCOMP, display = "`"),
    TEXT_ASCII_BREVE("textasciibreve", dependency = TEXTCOMP, display = "˘"),
    TEXT_ASCII_CARON("textasciicaron", dependency = TEXTCOMP, display = "˘"),
    TEXT_DOUBLE_ACUTE("textacutedbl", dependency = TEXTCOMP, display = "̋"),
    TEXT_DOUBLE_GRAVE("textgravedbl", dependency = TEXTCOMP, display = "̏"),
    TEXT_QUOTE_STRAIGHT_BASE("textquotestraightbase", dependency = TEXTCOMP, display = "‚"),
    TEXT_DOUBLE_QUOTE_STRAIGHT_BASE("textquotestraightdblbase", dependency = TEXTCOMP, display = "„"),
    TEXT_QUOTE_SINGLE("textquotesingle", dependency = TEXTCOMP, display = "‛"),
    TEXT_DOUBLE_HYPHEN("textdblhyphen", dependency = TEXTCOMP),
    TEXT_DOUBLE_HYPHEN_CHARACTER("textdblhyphenchar", dependency = TEXTCOMP),
    TEXTASTERISKCENTERED_TEXTCOMP("textasteriskcentered", dependency = TEXTCOMP, display = "∗"),
    TEXT_INTERROBANG("textinterrobang", dependency = TEXTCOMP, display = "‽"),
    TEXT_UPSIDE_DOWN_INTERROBANG("textinterrobangdown", dependency = TEXTCOMP),
    TEXTTWELVEUDASH("texttwelveudash", dependency = TEXTCOMP, display = "—"),
    TEXT_THREE_QUARTERS_EM_DASH("textthreequartersemdash", dependency = TEXTCOMP, display = "—"),
    TEXT_CURRENCY("textcurrency", dependency = TEXTCOMP, display = "¤"),
    TEXT_BAHT("textbaht", dependency = TEXTCOMP, display = "฿"),
    TEXT_GUARANI("textguarani", dependency = TEXTCOMP, display = "₲"),
    TEXT_WON("textwon", dependency = TEXTCOMP, display = "₩"),
    TEXT_CENT("textcent", dependency = TEXTCOMP, display = "¢"),
    TEXT_CENT_OLD_STYLE("textcentoldstyle", dependency = TEXTCOMP),
    TEXT_DOLLAR_OLD_STYLE("textdollaroldstyle", dependency = TEXTCOMP),
    TEXT_LIRA("textlira", dependency = TEXTCOMP, display = "₤"),
    TEXT_YEN("textyen", dependency = TEXTCOMP, display = "¥"),
    TEXT_DONG("textdong", dependency = TEXTCOMP, display = "₫"),
    TEXT_NAIRA("textnaira", dependency = TEXTCOMP, display = "₦"),
    TEXT_COLON_MONETARY("textcolonmonetary", dependency = TEXTCOMP, display = "₡"),
    TEXT_PESO("textpeso", dependency = TEXTCOMP, display = "₱"),
    TEXT_FLORIN("textflorin", dependency = TEXTCOMP, display = "ƒ"),
    TEXT_EURO("texteuro", dependency = TEXTCOMP, display = "€"),
    TEXT_COPYLEFT("textcopyleft", dependency = TEXTCOMP, display = "\uD83C\uDD2F"),
    TEXT_SERVICE_MARK("textservicemark", dependency = TEXTCOMP, display = "℠"),
    TEXT_ONE_HALF("textonehalf", dependency = TEXTCOMP, display = "½"),
    TEXT_ONE_QUARTER("textonequarter", dependency = TEXTCOMP, display = "¼"),
    TEXT_THREE_QUARTERS("textthreequarters", dependency = TEXTCOMP, display = "¾"),
    TEXT_ONE_SUPERIOR("textonesuperior", dependency = TEXTCOMP, display = "¹"),
    TEXT_TWO_SUPERIOR("texttwosuperior", dependency = TEXTCOMP, display = "²"),
    TEXT_THREE_SUPERIOR("textthreesuperior", dependency = TEXTCOMP, display = "³"),
    TEXT_NUMERO("textnumero", dependency = TEXTCOMP, display = "№"),
    TEXT_PER_TEN_THOUSAND("textpertenthousand", dependency = TEXTCOMP, display = "‱"),
    TEXT_PER_MILLE("textperthousand", dependency = TEXTCOMP, display = "‰"),
    TEXT_DISCOUNT("textdiscount", dependency = TEXTCOMP, display = "⁒"),
    TEXT_BLANK("textblank", dependency = TEXTCOMP, display = "␢"),
    TEXT_RECIPE("textrecipe", dependency = TEXTCOMP, display = "℞"),
    TEXT_ESTIMATED("textestimated", dependency = TEXTCOMP, display = "℮"),
    TEXT_REFERENCE_MARK("textreferencemark", dependency = TEXTCOMP, display = "※"),
    TEXT_MUSICAL_QUARTER_NOTE("textmusicalnote", dependency = TEXTCOMP, display = "♪"),
    TEXT_PILCROW("textpilcrow", dependency = TEXTCOMP, display = "¶"),
    TEXT_BIG_CIRCLE("textbigcircle", dependency = TEXTCOMP, display = "○"),
    TEXT_OPEN_BULLET("textopenbullet", dependency = TEXTCOMP, display = "◦"),
    TEXT_ORDINAL_INDICATOR_MASCULINE("textordmasculine", dependency = TEXTCOMP, display = "º"),
    TEXT_ORDINAL_INDICATOR_FEMININE("textordfeminine", dependency = TEXTCOMP, display = "ª"),
    TEXT_BORN("textborn", dependency = TEXTCOMP, display = "★"),
    TEXT_DIVORCED("textdivorced", dependency = TEXTCOMP, display = "⚮"),
    TEXT_DIED("textdied", dependency = TEXTCOMP, display = "✝"),
    TEXT_MARRIED("textmarried", dependency = TEXTCOMP, display = "⚭"),
    TEXT_LEAF("textleaf", dependency = TEXTCOMP),
    TEXT_CELCIUS("textcelsius", dependency = TEXTCOMP, display = "℃"),
    TEXT_DEGREE("textdegree", dependency = TEXTCOMP, display = "°"),
    TEXT_UPSIDE_DOWN_OHM("textmho", dependency = TEXTCOMP, display = "℧"),
    TEXT_OHM("textohm", dependency = TEXTCOMP, display = "Ω"),
    TEXT_BROKEN_BAR("textbrokenbar", dependency = TEXTCOMP, display = "¦"),
    TEXT_DOUBLE_BAR("textbardbl", dependency = TEXTCOMP, display = "‖"),
    TEXT_FRACTION_SOLIDUS("textfractionsolidus", dependency = TEXTCOMP, display = "⁄"),
    TEXT_LEFT_ANGLE_BRACKET("textlangle", dependency = TEXTCOMP, display = "〈"),
    TEXT_RIGHT_ANGLE_BRACKET("textrangle", dependency = TEXTCOMP, display = "〉"),
    TEXT_LEFT_NOT("textlnot", dependency = TEXTCOMP, display = "¬"),
    TEXT_MINUS("textminus", dependency = TEXTCOMP, display = "−"),
    TEXT_LEFT_DOUBLE_BRACKET("textlbrackdbl", dependency = TEXTCOMP, display = "〚"),
    TEXT_RIGHT_DOUBLE_BRACKET("textrbrackdbl", dependency = TEXTCOMP, display = "〛"),
    TEXT_MU("textmu", dependency = TEXTCOMP, display = "μ"),
    TEXT_PLUS_MINUS("textpm", dependency = TEXTCOMP, display = "±"),
    TEXT_LEFT_QUILL("textlquill", dependency = TEXTCOMP, display = "⁅"),
    TEXT_RIGHT_QUILL("textrquill", dependency = TEXTCOMP, display = "⁆"),
    TEXT_SURD("textsurd", dependency = TEXTCOMP, display = "√"),
    TEXT_TIMES("texttimes", dependency = TEXTCOMP, display = "×"),
    TEXT_DIVIDE("textdiv", dependency = TEXTCOMP, display = "÷"),

    /*
     * euro symbols
     */
    EURO("geneuro", dependency = EUROSYM, display = "€"),
    EURO_NARROW("geneuronarrow", dependency = EUROSYM, display = "€"),
    EURO_WIDE("geneurowide", dependency = EUROSYM, display = "€"),
    OFFICIAL_EURO("officialeuro", dependency = EUROSYM, display = "€"),

    /*
     * Other symbols
     */
    CUT_LEFT_ON_LINE("Cutleft", dependency = MARVOSYM),
    CUT_RIGHT_ON_LINE("Cutright", dependency = MARVOSYM, display = "✁"),
    LEFT_SCISSORS("Leftscissors", dependency = MARVOSYM),
    RIGHT_SCISSORS("Rightscissors", dependency = MARVOSYM, display = "✂"),
    CUT_LINE("Cutline", dependency = MARVOSYM),
    CUT_LINE_MIDDLE("Kutline", dependency = MARVOSYM),
    CHECKMARK("checkmark", dependency = AMSSYMB, display = "✓"),
    MALTESE("maltese", dependency = AMSSYMB, display = "✠"),

    AC("AC", dependency = WASYSYM, display = "∼"),
    TEXT_UPSIDE_DOWN_OMEGA("agemO", dependency = WASYSYM, display = "℧"),
    APL_BOX("APLbox", dependency = WASYSYM, display = "⎕"),
    APL_CIRCLE("APLcirc", dependency = WASYSYM,),
    APL_COMMENT("APLcomment", dependency = WASYSYM),
    APL_DOWN("APLdown", dependency = WASYSYM, display = "⍗"),
    APL_DOWN_ARROW_BOX("APLdownarrowbox", dependency = WASYSYM),
    APL_INV("APLinv", dependency = WASYSYM, display = "⌹"),
    APL_INPUT("APLinput", dependency = WASYSYM, display = "⍞"),
    APL_LEFT_ARROW_BOX("APLleftarrowbox", dependency = WASYSYM, display = "⍇"),
    APL_LOG("APLlog", dependency = WASYSYM, display = "⍟"),
    APL_MINUS("APLminus", dependency = WASYSYM, display = "—"),
    APL_NOT("APLnot", dependency = WASYSYM, display = "∼"),
    APL_RIGHT_ARROW_BOX("APLrightarrowbox", dependency = WASYSYM, display = "⍈"),
    APL_STAR("APLstar", dependency = WASYSYM, display = "\uD83D\uDFAF"),
    APL_UP("APLup", dependency = WASYSYM),
    APL_UP_ARROW_BOX("APLuparrowbox", dependency = WASYSYM, display = "⍐"),
    APL_VERTICAL_LINE("APLvert", dependency = WASYSYM, display = "|"),
    APPLECOMMAND("applecmd", dependency = WASYSYM, display = "⌘"),
    AQUARIUS("aquarius", dependency = WASYSYM, display = "♒"),
    ARIES("aries", dependency = WASYSYM, display = "♈"),
    ASCENDING_NODE("ascnode", dependency = WASYSYM, display = "☊"),
    ASTROSUN("astrosun", dependency = WASYSYM, display = "☉"),
    ATARIBOX("ataribox", dependency = WASYSYM),
    BELL("bell", dependency = WASYSYM, display = "\uD83D\uDD14"),
    BLACK_CIRCLE("CIRCLE", dependency = WASYSYM, display = "⏺"),
    BLACK_LEFT_CIRCLE("LEFTCIRCLE", dependency = WASYSYM, display = "◖"),
    BLACK_LEFT_CIRCLE_2("LEFTcircle", dependency = WASYSYM, display = "◖"),
    BLACK_RIGHT_CIRCLE("RIGHTCIRCLE", dependency = WASYSYM, display = "◗"),
    BLACK_RIGHT_CIRCLE_2("RIGHTcircle", dependency = WASYSYM, display = "◗"),
    BLACK_SMILEY("blacksmiley", dependency = WASYSYM, display = "☻"),
    TEXT_BOWTIE("Bowtie", dependency = WASYSYM, display = "⋈"),
    BROKENVERT("brokenvert", dependency = WASYSYM, display = "¦"),
    CANCER("cancer", dependency = WASYSYM, display = "♋"),
    WHITE_CIRCLE("Circle", dependency = WASYSYM, display = "○"),
    EMPTY_BOX("Square", dependency = WASYSYM, display = "□"),
    CAPITAL_THORN("Thorn", dependency = WASYSYM, display = "þ"),
    CAPRICORNUS("capricornus", dependency = WASYSYM, display = "♑"),
    CENT("cent", dependency = WASYSYM, display = "¢"),
    CHECKED("checked", dependency = WASYSYM, display = "✓"),
    CHECKED_BOX("CheckedBox", dependency = WASYSYM, display = "☑"),
    CLOCK("clock", dependency = WASYSYM, display = "⏲"),
    CONJUNCTION("conjunction", dependency = WASYSYM, display = "☌"),
    CROSSED_BOX("XBox", dependency = WASYSYM, display = "☒"),
    CURRENCY("currency", dependency = WASYSYM, display = "¤"),
    STAR_OF_DAVID("davidsstar", dependency = WASYSYM, display = "✡"),
    DESCENDING_NODE("descnode", dependency = WASYSYM, display = "☋"),
    DIAMETER("diameter", dependency = WASYSYM, display = "⌀"),
    DOWN_TRIANGLE("DOWNarrow", dependency = WASYSYM, display = "▼"),
    EARTH("earth", dependency = WASYSYM, display = "♁"),
    TEXT_EIGTH_NOTE("eighthnote", dependency = WASYSYM, display = "♪"),
    FEMALE("female", dependency = WASYSYM, display = "♀"),
    FROWNIE("frownie", dependency = WASYSYM, display = "☹"),
    FULL_MOON("fullmoon", dependency = WASYSYM, display = "○"),
    FULLNOTE("fullnote", dependency = WASYSYM, display = "\uD834\uDD5D"),
    GEMINI("gemini", dependency = WASYSYM, display = "♊"),
    GLUON("gluon", dependency = WASYSYM),
    TEXT_HALF_NOTE("halfnote", dependency = WASYSYM, display = "\uD834\uDD5E"),
    HEXAGON_LYING("hexagon", dependency = WASYSYM),
    SIX_LEGGED_STAR_LYING("hexstar", dependency = WASYSYM),
    HF("HF", dependency = WASYSYM, display = "∼"),
    DIAMETER_MIRRORED("invdiameter", dependency = WASYSYM),
    INVE("inve", dependency = WASYSYM, display = "Ə"),
    JUPITER("jupiter", dependency = WASYSYM, display = "♃"),
    MALTESE_CROSS("kreuz", dependency = WASYSYM, display = "✠"),
    LEFT_MOON("leftmoon", dependency = WASYSYM, display = "☾"),
    TEXT_ANTI_CLOCKWISE_ROUND_ARROW("leftturn", dependency = WASYSYM, display = "↺"),
    WHITE_LEFT_CIRCLE("Leftcircle", dependency = WASYSYM),
    LEFT_TRIANGLE("LEFTarrow", dependency = WASYSYM, display = "⯇"),
    LEO("leo", dependency = WASYSYM, display = "♌"),
    LIBRA("libra", dependency = WASYSYM, display = "♎"),
    LIGHTNING_WASYSYM("lightning", dependency = WASYSYM, display = "☇"),
    MALE("male", dependency = WASYSYM, display = "♂"),
    MARS("mars", dependency = WASYSYM, display = "♂"),
    MERCURY("mercury", dependency = WASYSYM, display = "☿"),
    NEPTUNE("neptune", dependency = WASYSYM, display = "♆"),
    NEW_MOON("newmoon", dependency = WASYSYM, display = "◯"),
    NOT_BACKSLASH("notbackslash", dependency = WASYSYM),
    NOT_SLASH("notslash", dependency = WASYSYM),
    OCTAGON("octagon", dependency = WASYSYM),
    OPENO("openo", dependency = WASYSYM, display = "ᵓ"),
    OPPOSITION("opposition", dependency = WASYSYM, display = "☍"),
    PENTAGON("pentagon", dependency = WASYSYM, display = "⬠"),
    PERMIL("permil", dependency = WASYSYM, display = "‰"),
    PHONE("phone", dependency = WASYSYM, display = "☏"),
    PHOTON("photon", dependency = WASYSYM, display = "〜〜〜"),
    PISCES("pisces", dependency = WASYSYM, display = "♓"),
    PLUTO("pluto", dependency = WASYSYM, display = "♇"),
    POINTER("pointer", dependency = WASYSYM, display = "⇨"),
    TEXT_QUARTER_NOTE("quarternote", dependency = WASYSYM, display = ""),
    RECORDER("recorder", dependency = WASYSYM, display = "♩"),
    RIGHT_MOON("rightmoon", dependency = WASYSYM, display = "☽"),
    TEXT_CLOCKWISE_ROUND_ARROW("rightturn", dependency = WASYSYM, display = "↻"),
    WHITE_RIGHT_CIRCLE("Rightcircle", dependency = WASYSYM),
    RIGHT_TRIANGLE("RIGHTarrow", dependency = WASYSYM, display = "⯈"),
    SAGITTARIUS("sagittarius", dependency = WASYSYM, display = "♐"),
    SATURN("saturn", dependency = WASYSYM, display = "♄"),
    SCORPIO("scorpio", dependency = WASYSYM, display = "♏"),
    SMILEY("smiley", dependency = WASYSYM, display = "☺"),
    SUN("sun", dependency = WASYSYM, display = "☼"),
    TAURUS("taurus", dependency = WASYSYM, display = "♉"),
    THORN("thorn", dependency = WASYSYM, display = "þ"),
    TWONOTES("twonotes", dependency = WASYSYM, display = "♫"),
    UP_TRIANGLE("UParrow", dependency = WASYSYM, display = "▲"),
    URANUS("uranus", dependency = WASYSYM, display = "⛢"),
    MEASURED_ANGLE_WASYSYM("varangle", dependency = WASYSYM, display = "∡"),
    HEXAGON_STANDING("varhexagon", dependency = WASYSYM, display = "⬡"),
    SIX_LEGGED_STAR_STANDING("varhexstar", dependency = WASYSYM, display = "\uD83D\uDFB5"),
    VENUS("venus", dependency = WASYSYM, display = "♀"),
    VERNAL("vernal", dependency = WASYSYM, display = "♈"),
    VHF("VHF", dependency = WASYSYM, display = "≋"),
    VIRGO("virgo", dependency = WASYSYM, display = "♍"),
    WASYCOMMAND("wasycmd", dependency = WASYSYM, display = "⌘"),
    LOZENGE_WASYSYM("wasylozenge", dependency = WASYSYM, display = "⯏"),
    WASYTHEREFORE("wasytherefore", dependency = WASYSYM, display = "∴"),

    /*
     * New definitions
     */
    NEWCOMMAND("newcommand", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    NEWCOMMAND_STAR("newcommand*", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    NEWIF("newif", "cmd".asRequired()),
    PROVIDECOMMAND("providecommand", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    PROVIDECOMMAND_STAR("providecommand*", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    RENEWCOMMAND("renewcommand", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    RENEWCOMMAND_STAR("renewcommand*", "cmd".asRequired(), "args".asOptional(), "default".asOptional(), "def".asRequired(Type.TEXT)),
    NEWENVIRONMENT("newenvironment", "name".asRequired(), "args".asOptional(), "default".asOptional(), "begdef".asRequired(Type.TEXT), "enddef".asRequired(Type.TEXT)),
    RENEWENVIRONMENT("renewenvironment", "name".asRequired(), "args".asOptional(), "default".asOptional(), "begdef".asRequired(Type.TEXT), "enddef".asRequired(Type.TEXT)),

    /*
     * mathtools definitions
     */
    DECLARE_PAIRED_DELIMITER("DeclarePairedDelimiter", "cmd".asRequired(), "left delimiter".asRequired(), "right delimiter".asRequired(), dependency = MATHTOOLS),
    DECLARE_PAIRED_DELIMITER_X("DeclarePairedDelimiterX", "cmd".asRequired(), "num args".asOptional(), "left delimiter".asRequired(), "right delimiter".asRequired(), "body".asRequired(Type.TEXT), dependency = MATHTOOLS),
    DECLARE_PAIRED_DELIMITER_XPP("DeclarePairedDelimiterXPP", "cmd".asRequired(), "num args".asOptional(), "pre code".asRequired(), "left delimiter".asRequired(), "right delimiter".asRequired(), "post code".asRequired(), "body".asRequired(Type.TEXT), dependency = MATHTOOLS),

    /*
     * xcolor definitions
     */
    DEFINECOLOR("definecolor", "type".asOptional(), "name".asRequired(), "model-list".asRequired(), "spec-list".asRequired(), dependency = XCOLOR),
    PROVIDECOLOR("providecolor", "type".asOptional(), "name".asRequired(), "model-list".asRequired(), "spec-list".asRequired(), dependency = XCOLOR),
    COLORLET("colorlet", "type".asOptional(), "name".asRequired(), "num model".asOptional(), "color".asRequired(), dependency = XCOLOR),
    DEFINECOLORSET("definecolorset", "type".asOptional(), "model-list".asRequired(), "head".asRequired(), "tail".asRequired(), "set spec".asRequired(), dependency = XCOLOR),
    PROVIDECOLORSET("providecolorset", "type".asOptional(), "model-list".asRequired(), "head".asRequired(), "tail".asRequired(), "set spec".asRequired(), dependency = XCOLOR),
    PREPARECOLOR("preparecolor", "type".asOptional(), "name".asRequired(), "model-list".asRequired(), "spec-list".asRequired(), dependency = XCOLOR),
    PREPARECOLORSET("preparecolorset", "type".asOptional(), "model-list".asRequired(), "head".asRequired(), "tail".asRequired(), "set spec".asRequired(), dependency = XCOLOR),
    DEFINE_NAMED_COLOR("DefineNamedColor", "type".asRequired(), "name".asRequired(), "model-list".asRequired(), "spec-list".asRequired(), dependency = XCOLOR),
    DEFINECOLORS("definecolors", "id-list".asRequired(), dependency = XCOLOR),
    PROVIDECOLORS("providecolors", "id-list".asRequired(), dependency = XCOLOR),
    DEFINECOLORSERIES("definecolorseries", "name".asRequired(), "core model".asRequired(), "method".asRequired(), "b-model".asOptional(), "b-spec".asRequired(), "s-model".asRequired(), "s-spec".asRequired(), dependency = XCOLOR),

    /*
     * Xparse definitions
     */
    NEWDOCUMENTCOMMAND("NewDocumentCommand", "name".asRequired(), "args spec".asRequired(), "code".asRequired(), dependency = LatexPackage.XPARSE),
    RENEWDOCUMENTCOMMAND("RenewDocumentCommand", "name".asRequired(), "args spec".asRequired(), "code".asRequired(), dependency = LatexPackage.XPARSE),
    PROVIDEDOCUMENTCOMMAND("ProvideDocumentCommand", "name".asRequired(), "args spec".asRequired(), "code".asRequired(), dependency = LatexPackage.XPARSE),
    DECLAREDOCUMENTCOMMAND("DeclareDocumentCommand", "name".asRequired(), "args spec".asRequired(), "code".asRequired(), dependency = LatexPackage.XPARSE),
    NEWDOCUMENTENVIRONMENT("NewDocumentEnvironment", "name".asRequired(), "args spec".asRequired(), "start code".asRequired(), "end code".asRequired(), dependency = LatexPackage.XPARSE),
    RENEWDOCUMENTENVIRONMENT("RenewDocumentEnvironment", "name".asRequired(), "args spec".asRequired(), "start code".asRequired(), "end code".asRequired(), dependency = LatexPackage.XPARSE),
    PROVIDEDOCUMENTENVIRONMENT("ProvideDocumentEnvironment", "name".asRequired(), "args spec".asRequired(), "start code".asRequired(), "end code".asRequired(), dependency = LatexPackage.XPARSE),
    DECLAREDOCUMENTENVIRONMENT("DeclareDocumentEnvironment", "name".asRequired(), "args spec".asRequired(), "start code".asRequired(), "end code".asRequired(), dependency = LatexPackage.XPARSE),

    /*
     * Natbib citations
     */
    CITEP("citep", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEP_STAR("citep*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITET("citet", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITET_STAR("citet*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEP_CAPITALIZED("Citep", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEP_STAR_CAPITALIZED("Citep*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITET_CAPITALIZED("Citet", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITET_STAR_CAPITALIZED("Citet*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALP("citealp", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALP_STAR("citealp*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALT("citealt", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALT_STAR("citealt*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALP_CAPITALIZED("Citealp", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALP_STAR_CAPITALIZED("Citealp*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALT_CAPITALIZED("Citealt", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEALT_STAR_CAPITALIZED("Citealt*", "before".asOptional(), "after".asOptional(), "keys".asRequired(), dependency = NATBIB),
    CITEAUTHOR("citeauthor", "keys".asRequired(), dependency = NATBIB),
    CITEAUTHOR_STAR("citeauthor*", "keys".asRequired(), dependency = NATBIB),
    CITEAUTHOR_CAPITALIZED("Citeauthor", "keys".asRequired(), dependency = NATBIB),
    CITEAUTHOR_STAR_CAPITALIZED("Citeauthor*", "keys".asRequired(), dependency = NATBIB),
    CITEYEAR("citeyear", "keys".asRequired(), dependency = NATBIB),
    CITEYEARPAR("citeyearpar", "keys".asRequired(), dependency = NATBIB),
    CITENUM("citenum", "key".asRequired(), dependency = NATBIB),
    CITETEXT("citetext", "text".asRequired(), dependency = NATBIB),

    /*
     * Biblatex commands
     */
    CITE_CAPITALIZED("Cite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PARENCITE("parencite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PARENCITE_CAPITALIZED("Parencite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FOOTCITE("footcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FOOTCITETEXT("footcitetext", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    TEXTCITE("textcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    TEXTCITE_CAPITALIZED("Textcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    SMARTCITE("smartcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    SMARTCITE_CAPITALIZED("Smartcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    CITE_STAR("cite*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PARENCITE_STAR("parencite*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    SUPERCITE("supercite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AUTOCITE("autocite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AUTOCITE_CAPITALIZED("Autocite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AUTOCITE_STAR("autocite*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AUTOCITE_STAR_CAPITALIZED("Autocite*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEAUTHOR("citeauthor", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEAUTHOR_STAR("citeauthor*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEAUTHOR_CAPITALIZED("Citeauthor", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEAUTHOR_STAR_CAPITALIZED("Citeauthor*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITETITLE("citetitle", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITETITLE_STAR("citetitle*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEYEAR("citeyear", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_CITEYEAR_STAR("citeyear*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    CITEDATE("citedate", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    CITEDATE_STAR("citedate*", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    CITEURL("citeurl", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    VOLCITE("volcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    VOLCITE_CAPITALIZED("Volcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PVOLCITE("pvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PVOLCITE_CAPITALIZED("Pvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FVOLCITE("fvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FVOLCITE_CAPITALIZED("Fvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FTVOLCITE("ftvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    SVOLCITE("svolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    SVOLCITE_CAPITALIZED("Svolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    TVOLCITE("tvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    TVOLCITE_CAPITALIZED("Tvolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AVOLCITE("avolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    AVOLCITE_CAPITALIZED("Avolcite", "prenote".asOptional(), "volume".asRequired(), "page".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FULLCITE("fullcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FOOTFULLCITE("footcullcite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    BIBLATEX_NOCITE("nocite", "key".asRequired(), dependency = BIBLATEX),
    NOTECITE("notecite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    NOTECITE_CAPITALIZED("Notecite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PNOTECITE("pnotecite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PNOTECITE_CAPITALIZED("Pnotecite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    FNOTECITE("fnotecite", "prenote".asOptional(), "postnote".asOptional(), "key".asRequired(), dependency = BIBLATEX),
    PARENTTEXT("parenttext", "text".asRequired(Type.TEXT), dependency = BIBLATEX),
    BRACKETTEXT("brackettext", "text".asRequired(Type.TEXT), dependency = BIBLATEX),

    /*
     * SIunitx commands
     */
    ANG("ang", "options".asOptional(), "angle".asRequired(), dependency = SIUNITX),
    NUM("num", "options".asOptional(), "number".asRequired(), dependency = SIUNITX),
    SI("si", "options".asOptional(), "unit".asRequired(), dependency = SIUNITX),
    SI_NUM("SI", "options".asOptional(), "number".asRequired(), "pre-unit".asOptional(), "unit".asRequired(), dependency = SIUNITX),
    NUMLIST("numlist", "options".asOptional(), "numbers".asRequired(), dependency = SIUNITX),
    NUMRANGE("numrange", "options".asOptional(), "number1".asRequired(), "number2".asRequired(), dependency = SIUNITX),
    SILIST("SIlist", "options".asOptional(), "numbers".asRequired(), "unit".asRequired(), dependency = SIUNITX),
    SIRANGE("numrange", "options".asOptional(), "number1".asRequired(), "number2".asRequired(), "unit".asRequired(), dependency = SIUNITX),
    SISETUP("sisetup", "options".asRequired(), dependency = SIUNITX),
    TABLENUM("tablenum", "options".asOptional(), "number".asRequired(), dependency = SIUNITX),

    /*
     * Algorithmicx
     */
    FOR("For", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    FORALL("ForAll", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    ENDFOR("EndFor", dependency = ALGPSEUDOCODE),
    IF_ALGPSEUDOCODE("If", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    ELSIF("ElsIf", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    ENDIF("EndIf", dependency = ALGPSEUDOCODE),
    WHILE("While", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    ENDWHILE("EndWhile", dependency = ALGPSEUDOCODE),
    REPEAT("Repeat", dependency = ALGPSEUDOCODE),
    UNTIL("Until", "condition".asRequired(), dependency = ALGPSEUDOCODE),
    LOOP("Loop", dependency = ALGPSEUDOCODE),
    ENDLOOP("EndLoop", dependency = ALGPSEUDOCODE),
    FUNCTION("Function", "name".asRequired(), "params".asRequired(), dependency = ALGPSEUDOCODE),
    ENDFUNCTION("EndFunction", dependency = ALGPSEUDOCODE),
    PROCEDURE("Procedure", "name".asRequired(), "params".asRequired(), dependency = ALGPSEUDOCODE),
    ENDPROCEDURE("EndProcedure", dependency = ALGPSEUDOCODE),

    /*
     * If- commands
     * Source: http://mirrors.ctan.org/info/texbytopic/TeXbyTopic.pdf chapter Conditionals
     */
    IF("if"),
    IFCAT("ifcat"),
    IFX("ifx"),
    IFCASE("ifcase"),
    IFNUM("ifnum"),
    IFODD("ifodd"),
    IFHMODE("ifhmode"),
    IFVMODE("ifvmode"),
    IFMMODE("ifmmode"),
    IFINNER("ifinner"),
    IFDIM("ifdim"),
    IFVOID("ifvoid"),
    IFHBOX("ifhbox"),
    IFVBOX("ifvbox"),
    IFEOF("ifeof"),
    IFTRUE("iftrue"),
    IFFALSE("iffalse"),
    FI("fi"),
    ELSE("else"),
    OR("or"),

    /**
     * Listings
     */
    LSTINPUTLISTING("lstinputlisting", "options".asOptional(), RequiredFileArgument("filename", false, false), dependency = LISTINGS);

    companion object {

        private val lookup = HashMap<String, MutableSet<LatexRegularCommand>>()
        private val lookupDisplay = HashMap<String, MutableSet<LatexRegularCommand>>()

        init {
            @Suppress("RemoveRedundantQualifierName")
            for (command in LatexRegularCommand.values()) {
                lookup.getOrPut(command.command) { mutableSetOf() }.add(command)
                if (command.display != null) {
                    lookupDisplay.putIfAbsent(command.display!!, mutableSetOf(command))?.add(command)
                }
            }
        }

        @JvmStatic
        operator fun get(command: String) = lookup[command]?.toSet()

        @JvmStatic
        fun findByDisplay(display: String) = lookupDisplay[display]?.toSet()
    }
}
