package nl.hannahsten.texifyidea.lang

import nl.hannahsten.texifyidea.lang.Argument.Type
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSFONTS
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSMATH
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.AMSSYMB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.DEFAULT
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.LATEXSYMB
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.MATHTOOLS
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.STMARYRD
import nl.hannahsten.texifyidea.lang.LatexPackage.Companion.WASYSYM

/**
 * @author Sten Wessel
 */
@Suppress("unused")
enum class LatexMathCommand(
    override val command: String,
    override vararg val arguments: Argument = emptyArray(),
    override val dependency: LatexPackage = DEFAULT,
    override val display: String? = null,
    val collapse: Boolean = false
) : LatexCommand {

    /*
     *  Greek alphabet
     */
    ALPHA("alpha", display = "α", collapse = true),
    BETA("beta", display = "β", collapse = true),
    GAMMA("gamma", display = "γ", collapse = true),
    CAPITAL_GAMMA("Gamma", display = "Γ", collapse = true),
    CAPITAL_GAMMA_VARIANT("varGamma", dependency = AMSMATH, collapse = true),
    DELTA("delta", display = "δ", collapse = true),
    CAPITAL_DELTA("Delta", display = "Δ", collapse = true),
    CAPITAL_DELTA_VARIANT("varDelta", dependency = AMSMATH, collapse = true),
    EPSILON("epsilon", display = "ϵ", collapse = true),
    BETTER_LOOKING_EPSILON("varepsilon", display = "ε", collapse = true),
    ZETA("zeta", display = "ζ", collapse = true),
    ETA("eta", display = "η", collapse = true),
    THETA("theta", display = "θ", collapse = true),
    THETA_VARIANT("vartheta", display = "ϑ", collapse = true),
    CAPITAL_THETA("Theta", display = "Θ", collapse = true),
    CAPITAL_THETA_VARIANT("varTheta", dependency = AMSMATH, collapse = true),
    IOTA("iota", display = "ι", collapse = true),
    KAPPA("kappa", display = "κ", collapse = true),
    LAMBDA("lambda", display = "λ", collapse = true),
    CAPITAL_LAMBDA("Lambda", display = "Λ", collapse = true),
    CAPITAL_LAMBDA_VARIANT("varLambda", dependency = AMSMATH, collapse = true),
    MU("mu", display = "μ", collapse = true),
    NU("nu", display = "ν", collapse = true),
    XI("xi", display = "ξ", collapse = true),
    CAPITAL_XI("Xi", display = "Ξ", collapse = true),
    CAPITAL_XI_VARIANT("varXi", dependency = AMSMATH, collapse = true),
    PI("pi", display = "π", collapse = true),
    PI_VARIANT("varpi", display = "ϖ", collapse = true),
    CAPITAL_PI("Pi", display = "Π", collapse = true),
    CAPITAL_PI_VARIANT("varPi", dependency = AMSMATH, collapse = true),
    RHO("rho", display = "ρ", collapse = true),
    RHO_VARIANT("varrho", display = "ϱ", collapse = true),
    SIGMA("sigma", display = "σ", collapse = true),
    FINAL_SIGMA("varsigma", display = "ς", collapse = true),
    CAPITAL_SIGMA("Sigma", display = "Σ", collapse = true),
    CAPITAL_SIGMA_VARIANT("varSigma", dependency = AMSMATH, collapse = true),
    TAU("tau", display = "τ", collapse = true),
    UPSILON("upsilon", display = "υ", collapse = true),
    CAPITAL_UPSILON("Upsilon", display = "ϒ", collapse = true),
    CAPITAL_UPSILON_VARIANT("Upsilon", dependency = AMSMATH, collapse = true),
    PHI_STRAIGHT("phi", display = "φ", collapse = true),
    PHI_CURLY("varphi", display = "ϕ", collapse = true),
    CAPITAL_PHI("Phi", display = "Φ", collapse = true),
    CAPITAL_PHI_VARIANT("varPhi", dependency = AMSMATH, collapse = true),
    CHI("chi", display = "χ", collapse = true),
    PSI("psi", display = "ψ", collapse = true),
    CAPITAL_PSI("Psi", display = "Ψ", collapse = true),
    CAPITAL_PSI_VARIANT("varPsi", dependency = AMSMATH, collapse = true),
    OMEGA("omega", display = "ω", collapse = true),
    CAPITAL_OMEGA("Omega", display = "Ω", collapse = true),
    CAPITAL_OMEGA_VARIANT("varOmega", dependency = AMSMATH, collapse = true),

    /*
     *  Operators
     */
    FOR_ALL("forall", display = "∀", collapse = true),
    PARTIAL("partial", display = "∂", collapse = true),
    EXISTS("exists", display = "∃", collapse = true),
    NOT_EXISTS("nexists", dependency = AMSSYMB, display = "∄", collapse = true),
    EMPTY_SET("emptyset", display = "∅", collapse = true),
    NOTHING("varnothing", dependency = AMSSYMB, display = "∅", collapse = true),
    NABLA("nabla", display = "∇", collapse = true),
    ELEMENT_OF("in", display = "∈", collapse = true),
    NOT_ELEMENT_OF("notin", display = "∉", collapse = true),
    CONTAIN_AS_MEMBER("ni", display = "∋", collapse = true),
    COMPLEMENT("complement", dependency = AMSSYMB, display = "∁"),
    N_ARY_PRODUCT("prod", display = "∏", collapse = true),
    N_ARY_COPRODUCT("coprod", display = "∐", collapse = true),
    SUM("sum", display = "∑", collapse = true),
    MINUS_PLUS("mp", display = "∓", collapse = true),
    PLUS_MINUS("pm", display = "±", collapse = true),
    SET_MINUS("setminus", display = "∖", collapse = true),
    SMALL_SET_MINUS("smallsetminus", dependency = AMSSYMB, display = "∖", collapse = true),
    ASTERISK("ast", display = "∗"),
    STAR("star", display = "⋆", collapse = true),
    DOT_PLUS("dotplus", dependency = AMSSYMB, display = "∔"),
    CIRCLE("circ", display = "∘"),
    BULLET("bullet", display = "∙"),
    PROPORTIONAL_TO("propto", display = "∝", collapse = true),
    PROPORTIONAL_TO_SYMBOL("varpropto", dependency = AMSSYMB, display = "∝", collapse = true),
    INFINITY("infty", display = "∞", collapse = true),
    ANGLE("angle", display = "∠", collapse = true),
    MEASURED_ANGLE("measuredangle", dependency = AMSSYMB, display = "∡", collapse = true),
    SPHERICAL_ANGLE("sphericalangle", dependency = AMSSYMB, display = "∢", collapse = true),
    MID("mid", display = "∣", collapse = true),
    MID_SHORT("shortmid", dependency = AMSSYMB, display = "∣", collapse = true),
    NOT_MID_SHORT("nshortmid", dependency = AMSSYMB),
    PARALLEL("parallel", display = "∥", collapse = true),
    NOT_PARALLEL("nparallel", dependency = AMSSYMB, display = "∦", collapse = true),
    PARALLEL_SHORT("shortparallel", display = "∥", collapse = true),
    NOT_PARALLEL_SHORT("nshortparallel", dependency = AMSSYMB, display = "∦", collapse = true),
    LOGICAL_AND("land", display = "∧", collapse = true),
    LOGICAL_OR("lor", display = "∨", collapse = true),
    INTERSECTION("cap", display = "∩", collapse = true),
    UNION("cup", display = "∪", collapse = true),
    DOUBLE_UNION("Cup", dependency = AMSSYMB, display = "⋓", collapse = true),
    DOUBLE_INTERSECTION("Cap", dependency = AMSSYMB, display = "⋒", collapse = true),
    INTEGRAL("int", display = "∫", collapse = true),
    DOUBLE_INTEGRAL("iint", dependency = AMSMATH, display = "∬", collapse = true),
    TRIPLE_INTEGRAL("iiint", dependency = AMSMATH, display = "∭", collapse = true),
    QUADRUPLE_INTEGRAL("iiiint", dependency = AMSMATH, display = "⨌", collapse = true),
    DOTS_INTEGRAL("idotsint", display = "∫⋯∫", collapse = true),
    CONTOUR_INTEGRAL("oint", display = "∮", collapse = true),
    THEREFORE("therefore", dependency = AMSSYMB, display = "∴", collapse = true),
    BECAUSE("because", dependency = AMSSYMB, display = "∵", collapse = true),
    TILDE_OPERATOR("sim", display = "∼", collapse = true),
    WREATH_PRODUCT("wr", display = "≀", collapse = true),
    APPROX("approx", display = "≈", collapse = true),
    NOT_EQUAL("neq", display = "≠", collapse = true),
    EQUIVALENT("equiv", display = "≡", collapse = true),
    LESS_THAN_EQUAL("leq", display = "≤", collapse = true),
    LESS_THAN_NOT_EQUAL("lneq", dependency = AMSSYMB, display = "⪇", collapse = true),
    LESS_THAN_EQUALL("leqq", dependency = AMSSYMB, display = "≦", collapse = true),
    GREATER_THAN_EQUAL("geq", display = "≥", collapse = true),
    GREATER_THAN_NOT_EQUAL("gneq", dependency = AMSSYMB, display = "⪈", collapse = true),
    GREATER_THAN_EQUALL("geqq", dependency = AMSSYMB, display = "≧", collapse = true),
    NOT_LESS_THAN("nless", dependency = AMSSYMB, display = "≮", collapse = true),
    NOT_GREATER_THAN("ngtr", dependency = AMSSYMB, display = "≯", collapse = true),
    NOT_LESS_THAN_EQUAL("nleq", dependency = AMSSYMB, display = "≰", collapse = true),
    NOT_LESS_THAN_EQUALL("nleqq", dependency = AMSSYMB, display = "≦\u200D\u0338"),
    NOT_GREATER_THAN_EQUAL("ngeq", dependency = AMSSYMB, display = "≱", collapse = true),
    NOT_GREATER_THAN_EQUALL("ngeqq", dependency = AMSSYMB, display = "≧\u200D\u0338"),
    DOUBLE_LESS_THAN("ll", dependency = AMSSYMB, display = "≪", collapse = true),
    LESS_LESS_LESS("lll", dependency = AMSSYMB, display = "⋘", collapse = true),
    LESS_NOT_EQUAL("lneqq", dependency = AMSSYMB, display = "≨", collapse = true),
    GREATER_NOT_EQUAL("gneqq", dependency = AMSSYMB, display = "≩", collapse = true),
    DOUBLE_GREATER_THAN("gg", dependency = AMSSYMB, display = "≫", collapse = true),
    GREATER_GREATER_GREATER("ggg", dependency = AMSSYMB, display = "⋙", collapse = true),
    SUBSET("subset", display = "⊂", collapse = true),
    SUPERSET("supset", display = "⊃", collapse = true),
    SUBSET_EQUALS("subseteq", display = "⊆", collapse = true),
    SUBSET_EQUALSS("subseteqq", dependency = AMSSYMB, display = "⊆", collapse = true),
    SUPERSET_EQUALS("supseteq", display = "⊇", collapse = true),
    SUPERSET_EQUALSS("supseteqq", dependency = AMSSYMB, display = "⊇", collapse = true),
    NOT_SUBSET_EQUALS("nsubseteq", dependency = AMSSYMB, display = "⊈", collapse = true),
    NOT_SUBSET_EQUALSS("nsubseteqq", dependency = AMSSYMB, display = "⊈", collapse = true),
    NOT_SUPERSET_EQUALS("nsupseteq", dependency = AMSSYMB, display = "⊉", collapse = true),
    NOT_SUPERSET_EQUALSS("nsupseteqq", dependency = AMSSYMB, display = "⊉", collapse = true),
    SQUARE_SUBSET("sqsubset", dependency = AMSSYMB, display = "⊏", collapse = true),
    SQUARE_SUPERSET("sqsupset", dependency = AMSSYMB, display = "⊐", collapse = true),
    SQUARE_SUBSET_EQUALS("sqsubseteq", dependency = AMSSYMB, display = "⊑", collapse = true),
    SQUARE_SUPERSET_EQUALS("sqsupseteq", dependency = AMSSYMB, display = "⊒", collapse = true),
    SQUARE_CAP("sqcap", display = "⊓", collapse = true),
    SQUARE_CUP("sqcup", display = "⊔", collapse = true),
    CIRCLED_PLUS("oplus", display = "⊕", collapse = true),
    CIRCLED_MINUS("ominus", display = "⊖", collapse = true),
    CIRCLED_TIMES("otimes", display = "⊗", collapse = true),
    CIRCLED_SLASH("oslash", display = "⊘", collapse = true),
    CIRCLED_DOT("odot", display = "⊙", collapse = true),
    BOXED_PLUS("boxplus", dependency = AMSSYMB, display = "⊞", collapse = true),
    BOXED_MINUS("boxminus", dependency = AMSSYMB, display = "⊟", collapse = true),
    BOXED_TIMES("boxtimes", dependency = AMSSYMB, display = "⊠", collapse = true),
    BOXED_DOT("boxdot", dependency = AMSSYMB, display = "⊡", collapse = true),
    BOWTIE("bowtie", display = "⋈", collapse = true),
    JOIN("Join", dependency = AMSSYMB, display = "⨝", collapse = true),
    TRIANGLE_RIGHT("triangleright", dependency = AMSSYMB, display = "▷", collapse = true),
    TRIANGLE_LEFT("triangleleft", dependency = AMSSYMB, display = "◁", collapse = true),
    LHD("lhd", dependency = AMSSYMB, display = "◁", collapse = true),
    RHD("rhd", dependency = AMSSYMB, display = "▷", collapse = true),
    UN_LHD("unlhd", dependency = AMSSYMB, display = "⊴", collapse = true),
    UN_RHD("unrhd", dependency = AMSSYMB, display = "⊵", collapse = true),
    TRIANGLELEFTEQ("tranglelefteq", dependency = AMSSYMB, display = "⊴", collapse = true),
    TRIANGLERIGHTEQ("trianglerighteq", dependency = AMSSYMB, display = "⊵", collapse = true),
    LTIMES("ltimes", dependency = AMSSYMB, display = "⋉", collapse = true),
    RTIMES("rtimes", dependency = AMSSYMB, display = "⋊", collapse = true),
    TIMES("times", display = "×", collapse = true),
    LEFT_THREE_TIMES("leftthreetimes", dependency = AMSSYMB, display = "⋋", collapse = true),
    RIGHT_THREE_TIMES("rightthreetimes", dependency = AMSSYMB, display = "⋌", collapse = true),
    CIRCLED_CIRCLE("circledcirc", dependency = AMSSYMB, display = "⊚", collapse = true),
    CIRCLED_DASH("circleddash", dependency = AMSSYMB, display = "⊝", collapse = true),
    CIRCLED_ASTERISK("circledast", dependency = AMSSYMB, display = "⊛", collapse = true),
    MULTISET_UNION("uplus", display = "⊎", collapse = true),
    WEDGE_BAR("barwedge", dependency = AMSSYMB, display = "⊼", collapse = true),
    VEE_BAR("veebar", dependency = AMSSYMB, display = "⊻", collapse = true),
    DOUBLE_BAR_WEDGE("doublebarwedge", dependency = AMSSYMB, display = "⌆", collapse = true),
    CURLY_WEDGE("curlywedge", dependency = AMSSYMB, display = "⋏", collapse = true),
    CURLY_VEE("curlyvee", dependency = AMSSYMB, display = "⋎", collapse = true),
    INTERCALATE("intercal", dependency = AMSSYMB, display = "⊺", collapse = true),
    PITCHFORK("pitchfork", dependency = AMSSYMB, display = "⋔", collapse = true),
    NOT_SIM("nsim", dependency = AMSSYMB),
    SIM_EQUALS("simeq", display = "≃", collapse = true),
    BACKWARDS_SIM_EQUALS("backsimeq", dependency = AMSSYMB, display = "⋍", collapse = true),
    APPROX_EQUALS("approxeq", dependency = AMSSYMB, display = "≊", collapse = true),
    CONG_SYMBOL("cong", dependency = AMSSYMB, display = "≅", collapse = true),
    NOT_CONG("ncong", dependency = AMSSYMB, display = "≇", collapse = true),
    SMILE("smile", dependency = AMSSYMB, display = "\u2323", collapse = true),
    FROWN("frown", dependency = AMSSYMB, display = "\u2322", collapse = true),
    SMALL_SMILE("smallsmile", dependency = AMSSYMB, display = "\u2323", collapse = true),
    SMALL_FROWN("smallfrown", dependency = AMSSYMB, display = "\u2322", collapse = true),
    BETWEEN("between", dependency = AMSSYMB, display = "≬", collapse = true),
    PRECEDES("prec", display = "≺", collapse = true),
    SUCCEEDS("succ", display = "≻", collapse = true),
    NOT_PRECEEDS("nprec", dependency = AMSSYMB, display = "⊀", collapse = true),
    NOT_SUCCEEDS("nsucc", dependency = AMSSYMB, display = "⊁", collapse = true),
    PRECEDES_OR_EQUAL("preceq", dependency = AMSSYMB, display = "⪯", collapse = true),
    SUCCEEDS_OR_EQUALS("succeq", dependency = AMSSYMB, display = "⪰", collapse = true),
    NOT_PRECEDES_OR_EQUALS("npreceq", dependency = AMSSYMB, display = "⋠", collapse = true),
    NOT_SUCCEEDS_OR_EQUALS("nsucceq", dependency = AMSSYMB, display = "⋡", collapse = true),
    CURLY_PRECEDES_OR_EQUALS("preccurlyeq", dependency = AMSSYMB, display = "≼", collapse = true),
    CURLY_SUCCEEDS_OR_EQUALS("succcurlyeq", dependency = AMSSYMB, display = "≽", collapse = true),
    CURLY_EQUALS_PRECEDES("curlyeqprec", dependency = AMSSYMB, display = "⋞", collapse = true),
    CURLY_EQUALS_SUCCEEDS("curlyeqsucc", dependency = AMSSYMB, display = "⋟", collapse = true),
    PRECEDES_SIM("precsim", dependency = AMSSYMB, display = "≾", collapse = true),
    SUCCEEDS_SIM("succsim", dependency = AMSSYMB, display = "≿", collapse = true),
    PRECEDES_NOT_SIM("precnsim", dependency = AMSSYMB, display = "⋨", collapse = true),
    SUCCEEDS_NOT_SIM("succnsim", dependency = AMSSYMB, display = "⋩", collapse = true),
    PRECEDES_APPROX("precapprox", dependency = AMSSYMB, display = "⪷", collapse = true),
    SUCCEEDS_APPROX("succapprox", dependency = AMSSYMB, display = "⪸", collapse = true),
    PRECEDES_NOT_APPROX("precnapprox", dependency = AMSSYMB, display = "⪹", collapse = true),
    SUCCEEDS_NOT_APPROX("succnapprox", dependency = AMSSYMB, display = "⪺", collapse = true),
    PERPENDICULAR("perp", display = "⟂", collapse = true),
    RIGHT_TACK("vdash", display = "⊢", collapse = true),
    NOT_RIGHT_TACK("nvdash", dependency = AMSSYMB, display = "⊬", collapse = true),
    FORCES("Vdash", dependency = AMSSYMB, display = "⊩", collapse = true),
    TRIPLE_RIGHT_TACK("Vvdash", dependency = AMSSYMB, display = "⊪", collapse = true),
    MODELS("models", display = "⊧", collapse = true),
    VERTICAL_DOUBLE_DASH_RIGHT("vDash", dependency = AMSSYMB, display = "⊨", collapse = true),
    NOT_VERTICAL_DOUBLE_DASH_RIGHT("nvDash", dependency = AMSSYMB, display = "⊭", collapse = true),
    NOT_DOUBLE_VERTICAL_DOUBLE_DASH_RIGHT("nVDash", dependency = AMSSYMB, display = "⊯", collapse = true),
    NOT_MID("nmid", dependency = AMSSYMB, display = "∤", collapse = true),
    LESS_THAN_DOT("lessdot", dependency = AMSSYMB, display = "⋖", collapse = true),
    GREATER_THAN_DOT("gtrdot", dependency = AMSSYMB, display = "⋗", collapse = true),
    LESS_THAN_VERTICAL_NOT_EQUALS("lvertneqq", dependency = AMSSYMB),
    GREATER_THAN_VERTICAL_NOT_EQUALS("gvertneqq", dependency = AMSSYMB),
    LESS_THAN_EQUALS_SLANT("leqslant", dependency = AMSSYMB, display = "⩽", collapse = true),
    GREATER_THAN_EQUALS_SLANT("geqslant", dependency = AMSSYMB, display = "⩾", collapse = true),
    NOT_LESS_THAN_EQUALS_SLANT("nleqslant", dependency = AMSSYMB),
    NOT_GREATER_THAN_EQUALS_SLANT("ngeqslant", dependency = AMSSYMB),
    EQUALS_SLANT_LESS_THAN("eqslantless", dependency = AMSSYMB, display = "⪕", collapse = true),
    EQUALS_SLANT_GREATER_THAN("eqslantgtr", dependency = AMSSYMB, display = "⪖", collapse = true),
    LESS_GREATER("lessgtr", dependency = AMSSYMB, display = "≶", collapse = true),
    GREATER_LESS("gtrless", dependency = AMSSYMB, display = "≷", collapse = true),
    LESS_EQUALS_GREATER("lesseqgtr", dependency = AMSSYMB, display = "⋚", collapse = true),
    GREATER_EQUALS_LESSER("gtreqless", dependency = AMSSYMB, display = "⋛", collapse = true),
    LESS_EQUALSS_GREATER("lesseqqgtr", dependency = AMSSYMB, display = "⪋", collapse = true),
    GREATER_EQUALSS_LESSER("gtreqqless", dependency = AMSSYMB, display = "⪌", collapse = true),
    LESS_SIM("lesssim", dependency = AMSSYMB, display = "≲", collapse = true),
    GREATER_SIM("gtrsim", dependency = AMSSYMB, display = "≳", collapse = true),
    LESS_NOT_SIM("lnsim", dependency = AMSSYMB, display = "⋦", collapse = true),
    GREATER_NOT_SIM("gnsim", dependency = AMSSYMB, display = "⋧", collapse = true),
    LESS_APPROX("lessapprox", dependency = AMSSYMB, display = "⪅", collapse = true),
    GREATER_APPROX("gtrapprox", dependency = AMSSYMB, display = "⪆", collapse = true),
    LESS_NOT_APPROX("lnapprox", dependency = AMSSYMB, display = "⪉", collapse = true),
    GREATER_NOT_APPROX("gnapprox", dependency = AMSSYMB, display = "⪊", collapse = true),
    TRIANGLE_RIGHT_VARIATION("vartriangleright", dependency = AMSSYMB, display = "⊳", collapse = true),
    TRIANGLE_LEFT_VARIATION("vartriangleleft", dependency = AMSSYMB, display = "⊲", collapse = true),
    NOT_TRIANGLE_LEFT("ntriangleleft", dependency = AMSSYMB, display = "⋪", collapse = true),
    NOT_TRIANGLE_RIGHT("ntriangleright", dependency = AMSSYMB, display = "⋫", collapse = true),
    TRIANGLE_LEFT_EQUALS("trianglelefteq", dependency = AMSSYMB, display = "⊴", collapse = true),
    TRIANGLE_RIGHT_EQUALS("trianglerighteq", dependency = AMSSYMB, display = "⊵", collapse = true),
    TRIANGLE_LEFT_EQUALS_SLANT("trianglelefteqslant", dependency = STMARYRD),
    TRIANGLE_RIGHT_EQUALS_SLANT("trianglerighteqslant", dependency = STMARYRD),
    NOT_TRIANGLE_LEFT_EQUALS("ntrianglelefteq", dependency = AMSSYMB, display = "⋬", collapse = true),
    NOT_TRIANGLE_RIGHT_EQUALS("ntrianglerighteq", dependency = AMSSYMB, display = "⋭", collapse = true),
    NOT_TRIANGLE_LEFT_EQUALS_SLANT("ntrianglelefteqslant", dependency = STMARYRD),
    NOT_TRIANGLE_RIGHT_SLANT("ntrianglerighteqslant", dependency = STMARYRD),
    BLACK_TRIANGLE_LEFT("blacktriangleleft", dependency = AMSSYMB, display = "◂", collapse = true),
    BLACK_TRIANGLE_RIGHT("blacktriangleright", dependency = AMSSYMB, display = "▸", collapse = true),
    SUBSET_NOT_EQUALS("subsetneq", dependency = AMSSYMB, display = "⊊", collapse = true),
    SUPERSET_NOT_EQUALS("supsetneq", dependency = AMSSYMB, display = "⊋", collapse = true),
    SUBSET_NOT_EQUALS_VARIATION("varsubsetneq", dependency = AMSSYMB),
    SUPERSET_NOT_EQUALS_VARIATION("varsupsetneq", dependency = AMSSYMB),
    SUBSET_NOT_EQUALSS("subsetneqq", dependency = AMSSYMB, display = "⫋", collapse = true),
    SUPERSET_NOT_EQUALSS("supsetneqq", dependency = AMSSYMB, display = "⫌", collapse = true),
    REVERSED_EPSILON("backepsilon", dependency = AMSSYMB, display = "϶", collapse = true),
    DOUBLE_SUBSET("Subset", dependency = AMSSYMB, display = "⋐", collapse = true),
    DOUBLE_SUPERSET("Supset", dependency = AMSSYMB, display = "⋑", collapse = true),
    CIRCLE_EQUALS("circeq", dependency = AMSSYMB, display = "≗", collapse = true),
    TRIANGLE_EQUALS("triangleq", dependency = AMSSYMB, display = "≜", collapse = true),
    EQUALS_CIRCLE("eqcirc", dependency = AMSSYMB),
    BUMP_EQUALS("bumpeq", dependency = AMSSYMB),
    DOUBLE_BUMP_EQUALS("Bumpeq", dependency = AMSSYMB, display = "", collapse = true),
    DOT_EQUALS_DOT("doteqdot", dependency = AMSSYMB, display = "≑", collapse = true),
    RISING_DOTS_EQUALS("risingdotseq", dependency = AMSSYMB, display = "≓", collapse = true),
    FALLING_DOTS_EQUALS("fallingdotseq", dependency = AMSSYMB, display = "≒", collapse = true),
    DOT_EQUALS("doteq", dependency = AMSSYMB),
    SUBSET_PLUS("subsetplus", dependency = STMARYRD),
    SUBSET_PLUS_EQUALS("subsetpluseq", dependency = STMARYRD),
    SUPERSET_PLUS("supsetplus", dependency = STMARYRD),
    SUPERSET_PLUS_EQUALS("supsetpluseq", dependency = STMARYRD),
    IN_PLUS("inplus", dependency = STMARYRD),
    REVERSED_IN_PLUS("niplus", dependency = STMARYRD),

    /*
     * Mathtools Coloneq
     */
    COLON_EQUALSS("coloneqq", dependency = MATHTOOLS, display = ":=", collapse = true),
    EQUALSS_COLON("eqqcolon", dependency = MATHTOOLS, display = "=:", collapse = true),
    COLON_EQUALS("coloneq", dependency = MATHTOOLS, display = ":–", collapse = true),
    EQUALS_COLON("eqcolon", dependency = MATHTOOLS, display = "–:", collapse = true),
    COLON_APPROX("colonapprox", dependency = MATHTOOLS, display = ":≈", collapse = true),
    COLON_SIM("colonsim", dependency = MATHTOOLS, display = ":∼", collapse = true),
    DOUBLE_COLON("dblcolon", dependency = MATHTOOLS, display = "::", collapse = true),
    DOUBLE_COLON_EQUALSS("Coloneqq", dependency = MATHTOOLS, display = "::=", collapse = true),
    EQUALSS_DOUBLE_COLON("Eqqcolon", dependency = MATHTOOLS, display = "=::", collapse = true),
    DOUBLE_COLON_EQUALS("Coloneq", dependency = MATHTOOLS, display = "::–", collapse = true),
    EQUALS_DOUBLE_COLON("Eqcolon", dependency = MATHTOOLS, display = "–::", collapse = true),
    DOUBLE_COLON_APPROX("Colonapprox", dependency = MATHTOOLS, display = "::≈", collapse = true),
    DOUBLE_COLON_SIM("Colonsim", dependency = MATHTOOLS, display = "::∼", collapse = true),

    /*
     *  Left/Right
     */
    LEFT_PARENTH("left(", display = "("),
    RIGHT_PARENTH("right)", display = ")"),
    LEFT_BRACKET("left[", display = "["),
    RIGHT_BRACKET("right]", display = "]"),
    LEFT_BRACE("left\\{", display = "{"),
    RIGHT_BRACE("right\\}", display = "}"),
    LEFT_ANGULAR("left<", display = "<"),
    RIGHT_ANGULAR("right>", display = ">"),
    LEFT_PIPE("left|", display = "|"),
    RIGHT_PIPE("right|", display = "|"),
    LEFT_DOUBLE_PIPE("left\\|", display = "||"),
    RIGHT_DOUBLE_PIPE("right\\|", display = "||"),
    LEFT_ANGLE_BRACKET("langle", display = "<"),
    RIGHT_ANGLE_BRACKET("rangle", display = ">"),
    LEFT_CEIL("lceil", display = "⌈"),
    RIGHT_CEIL("rceil", display = "⌉"),
    LEFT_FLOOR("lfloor", display = "⌊"),
    RIGHT_FLOOR("rfloor", display = "⌋"),
    LEFT_MOUSTACHE("lmoustache", display = "⎰"),
    RIGHT_MOUSTACHE("rmoustache", display = "⎱"),
    LEFT_GROUP("lgroup"),
    RIGHT_GROUP("rgroup"),
    LEFT_VERTICAL_LINE("lvert", dependency = AMSMATH),
    RIGHT_VERTICAL_LINE("rvert", dependency = AMSMATH),
    LEFT_DOUBLE_VERTICAL_LINES("lVert", dependency = AMSMATH),
    RIGHT_DOUBLE_VERTICAL_LINES("rVert", dependency = AMSMATH),
    LEFT_BAG("lbag", display = "⟅", dependency = STMARYRD),
    RIGHT_BAG("rbag", display = "⟆", dependency = STMARYRD),
    LEFT_BAG_BOLD("Lbag", display = "⟅", dependency = STMARYRD),
    RIGHT_BAG_BOLD("Rbag", display = "⟆", dependency = STMARYRD),
    LEFT_BRACKET_BOLD("llbracket", display = "⟦", dependency = STMARYRD),
    RIGHT_BRACKET_BOLD("rrbracket", display = "⟧", dependency = STMARYRD),
    LEFT_CEIL_BOLD("llceil", dependency = STMARYRD),
    RIGHT_CEIL_BOLD("rrceil", dependency = STMARYRD),
    LEFT_FLOOR_BOLD("llfloor", dependency = STMARYRD),
    RIGHT_FLOOR_BOLD("rrfloor", dependency = STMARYRD),
    LEFT_PARENTHESIS_BOLD("llparenthesis", display = "⦅", dependency = STMARYRD),
    RIGHT_PARENTHESIS_BOLD("rrparenthesis", display = "⦆", dependency = STMARYRD),

    /*
     *  Arrows
     */
    NOT_RIGHT_ARROW("nrightarrow", dependency = AMSSYMB, display = "↛", collapse = true),
    LEFT_ARROW("leftarrow", display = "←", collapse = true),
    LEFT_DOUBLE_ARROW("Leftarrow", display = "⇐", collapse = true),
    RIGHT_ARROW("rightarrow", display = "→", collapse = true),
    RIGHT_DOUBLE_ARROW("Rightarrow", display = "⇒", collapse = true),
    LEFT_AND_RIGHT_ARROW("leftrightarrow", display = "↔", collapse = true),
    LEFT_AND_RIGHT_DOUBLE_ARROW("Leftrightarrow", display = "⇔", collapse = true),
    LONG_LEFT_ARROW("longleftarrow", display = "⟵", collapse = true),
    LONG_LEFT_DOUBLE_ARROW("Longleftarrow", display = "⟸", collapse = true),
    LONG_RIGHT_ARROW("longrightarrow", display = "⟶", collapse = true),
    L_ONGRIGHTARROW("Longrightarrow", display = "⟹", collapse = true),
    LONG_LEFT_AND_RIGHT_ARROW("longleftrightarrow", display = "⟷", collapse = true),
    LONG_LEFT_AND_RIGHT_DOUBLE_ARROW("Longleftrightarrow", display = "⟺", collapse = true),
    UP_ARROW("uparrow", display = "↑", collapse = true),
    UP_DOUBLE_ARROW("Uparrow", display = "⇑", collapse = true),
    DOWN_ARROW("downarrow", display = "↓", collapse = true),
    DOWN_DOUBLE_ARROW("Downarrow", display = "⇓", collapse = true),
    UP_AND_DOWN_ARROW("updownarrow", display = "↕", collapse = true),
    UP_AND_DOWN_DOUBLE_ARROW("Updownarrow", display = "⇕", collapse = true),
    MAPS_TO("mapsto", display = "↦", collapse = true),
    LEFT_ARROW_WITH_HOOK("hookleftarrow", display = "↩", collapse = true),
    LEFT_HARPOON_UP("leftharpoonup", display = "↼", collapse = true),
    LEFT_HARPOON_DOWN("leftharpoondown", display = "↽", collapse = true),
    RIGHT_AND_LEFT_HARPOONS("rightleftharpoons", display = "⇌", collapse = true),
    LONG_MAPS_TO("longmapsto", display = "⟼", collapse = true),
    RIGHT_ARROW_WITH_HOOK("hookrightarrow", display = "↪", collapse = true),
    RIGHT_HARPOON_UP("rightharpoonup", display = "⇀", collapse = true),
    RIGHT_HARPOON_DOWN("rightharpoondown", display = "⇁", collapse = true),
    LEADSTO("leadsto", dependency = LATEXSYMB, display = "⤳", collapse = true),
    NORTH_EAST_ARROW("nearrow", display = "↗", collapse = true),
    SOUTH_EAST_ARROW("searrow", display = "↘", collapse = true),
    SOUTH_WEST_ARROW("swarrow", display = "↙", collapse = true),
    NORTH_WEST_ARROW("nwarrow", display = "↖", collapse = true),
    DASHED_RIGHT_ARROW("dashrightarrow", dependency = AMSSYMB, display = "⤍", collapse = true),
    LEFT_AND_RIGHT_ARROW_PAIR("leftrightarrows", dependency = AMSSYMB, display = "⇆", collapse = true),
    LEFT_ARROW_WITH_TAIL("leftarrowtail", dependency = AMSSYMB, display = "↢", collapse = true),
    ANTI_CLOCKWISE_SEMICIRCLE_ARROW_TOP("curvearrowleft", dependency = AMSSYMB, display = "↶", collapse = true),
    UP_ARROW_PAIR("upuparrows", dependency = AMSSYMB, display = "⇈", collapse = true),
    MULTIMAP("multimap", dependency = AMSSYMB, display = "⊸", collapse = true),
    RIGHT_AND_LEFT_ARROW_PAIR("rightleftarrows", dependency = AMSSYMB, display = "⇄", collapse = true),
    TWO_HEADED_RIGHT_ARROW("twoheadrightarrow", dependency = AMSSYMB, display = "↠", collapse = true),
    UP_ARROW_WITH_RIGHT_TIP("Rsh", dependency = AMSSYMB, display = "↱", collapse = true),
    DOWN_HARPOON_RIGHT("downharpoonright", dependency = AMSSYMB, display = "⇂", collapse = true),
    DASHED_LEFT_ARROW("dashleftarrow", dependency = AMSSYMB, display = "⇠", collapse = true),
    LEFT_TRIPLE_ARROW("Lleftarrow", dependency = AMSSYMB, display = "⇚", collapse = true),
    LEFT_ARROW_WITH_LOOP("looparrowleft", dependency = AMSSYMB, display = "↫", collapse = true),
    ANTI_CLOCKWISE_CIRCLE_ARROW("circlearrowleft", dependency = AMSSYMB, display = "↺", collapse = true),
    UP_HARPOON_LEFT("upharpoonleft", dependency = AMSSYMB, display = "↿", collapse = true),
    LEFT_AND_RIGHT_WAVE_ARROW("leftrightsquigarrow", dependency = AMSSYMB, display = "↭", collapse = true),
    RIGHT_ARROW_PAIR("rightrightarrows", dependency = AMSSYMB, display = "⇉", collapse = true),
    RIGHT_ARROW_WITH_TAIL("rightarrowtail", dependency = AMSSYMB, display = "↣", collapse = true),
    CLOCKWISE_SEMICIRCLE_ARROW_TOP("curvearrowright", dependency = AMSSYMB, display = "↷", collapse = true),
    DOWN_ARROW_PAIR("downdownarrows", dependency = AMSSYMB, display = "⇊", collapse = true),
    RIGHT_WAVE_ARROW("rightsquigarrow", dependency = AMSSYMB, display = "⇝", collapse = true),
    LEFT_ARROW_PAIR("leftleftarrows", dependency = AMSSYMB, display = "⇇", collapse = true),
    TWO_HEADED_LEFT_ARROW("twoheadleftarrow", dependency = AMSSYMB, display = "↞", collapse = true),
    LEFT_AND_RIGHT_HARPOONS("leftrightharpoons", dependency = AMSSYMB, display = "↰", collapse = true),
    UP_ARROW_WITH_LEFT_TIP("Lsh", dependency = AMSSYMB, display = "↰", collapse = true),
    DOWN_HARPOON_LEFT("downharpoonleft", dependency = AMSSYMB, display = "⇃", collapse = true),
    RIGHT_ARROW_WITH_LOOP("looparrowright", dependency = AMSSYMB, display = "↬", collapse = true),
    CLOCKWISE_CIRCLE_ARROW("circlearrowright", dependency = AMSSYMB, display = "↻", collapse = true),
    UP_HARPOON_RIGHT("upharpoonright", dependency = AMSSYMB, display = "↾", collapse = true),
    NOT_LEFT_ARROW("nleftarrow", dependency = AMSSYMB, display = "↚", collapse = true),
    NOT_LEFT_DOUBLE_ARROW("nLeftarrow", dependency = AMSSYMB, display = "⇍", collapse = true),
    NOT_RIGHT_DOUBLE_ARROW("nRightarrow", dependency = AMSSYMB, display = "⇏", collapse = true),
    NOT_LEFT_AND_RIGHT_ARROW("nleftrightarrow", dependency = AMSSYMB, display = "↮", collapse = true),
    NOT_LEFT_AND_RIGHT_DOUBLE_ARROW("nLeftrightarrow", dependency = AMSSYMB, display = "⇎", collapse = true),
    LONG_MAPS_FROM_DOUBLE_ARROW("Longmapsfrom", dependency = STMARYRD, display = "⟽", collapse = true),
    LONG_MAPS_TO_DOUBLE_ARROW("Longmapsto", dependency = STMARYRD, display = "⟾", collapse = true),
    MAPS_FROM_DOUBLE_ARROW("Mapsfrom", dependency = STMARYRD, display = "⤆", collapse = true),
    MAPS_TO_DOUBLE_ARROW("Mapsto", dependency = STMARYRD, display = "⤇", collapse = true),
    LEFT_OPEN_HEADED_ARROW("leftarrowtriangle", dependency = STMARYRD, display = "⇽", collapse = true),
    RIGHT_OPEN_HEADED_ARROW("rightarrowtriangle", dependency = STMARYRD, display = "⇾", collapse = true),
    LEFT_AND_RIGHT_ARROW_EQUALS("leftrightarroweq", dependency = STMARYRD),
    LEFT_AND_RIGHT_OPEN_HEADED_ARROW("leftrightarrowtriangle", dependency = STMARYRD, display = "⇿", collapse = true),
    LIGHTNING("lightning", dependency = STMARYRD, display = "☇", collapse = true),
    LONG_MAPS_FROM("longmapsfrom", dependency = STMARYRD, display = "⟻", collapse = true),
    MAPS_FROM("mapsfrom", dependency = STMARYRD, display = "↤", collapse = true),
    NORTH_NORTH_EAST_ARROW("nnearrow", dependency = STMARYRD, display = "↗", collapse = true),
    NORTH_NORTH_WEST_ARROW("nnwarrow", dependency = STMARYRD, display = "↖", collapse = true),
    SOUNT_SOUTH_EAST_ARROW("ssearrow", dependency = STMARYRD, display = "↘", collapse = true),
    SOUTH_SOUTH_WEST_ARROW("sswarrow", dependency = STMARYRD, display = "↙", collapse = true),
    SHORT_LEFT_ARROW("shortleftarrow", dependency = STMARYRD, display = "←", collapse = true),
    SHORT_UP_ARROW("shortuparrow", dependency = STMARYRD, display = "↑", collapse = true),
    SHORT_RIGHT_ARROW("shortrightarrow", dependency = STMARYRD, display = "→", collapse = true),
    SHORT_DOWN_ARROW("shortdownarrow", dependency = STMARYRD, display = "↓", collapse = true),

    /*
     *  Generic commands
     */
    ACUTE("acute", "a".asRequired()),
    ALEPH("aleph"),
    AMALGAMATION("amalg", display = "⨿", collapse = true),
    INVERSE_COSINE("arccos"),
    INVERSE_SINE("arcsin"),
    INVERSE_TANGENT("arctan"),
    ARGUMENT("arg"),
    ARROWVERT("arrowvert", display = "|", collapse = true),
    ASYMP("asymp", display = "≍", collapse = true),
    REVERSED_PRIME("backprime", dependency = AMSMATH, display = "‵", collapse = true),
    BACKSLASH("backslash", display = "\\", collapse = true),
    BAR("bar", "a".asRequired()),
    N_ARY_INTERSECTION("bigcap", display = "⋂", collapse = true),
    BIG_CIRCLE("bigcirc", display = "○", collapse = true),
    N_ARY_UNION("bigcup", display = "⋃", collapse = true),
    BIG_CIRCLED_DOT("bigodot", display = "⨀", collapse = true),
    BIG_CIRCLED_PLUS("bigoplus", display = "⨁", collapse = true),
    BIG_CIRCLED_TIMES("bigotimes", display = "⨂", collapse = true),
    N_ARY_SQUARE_UNION("bigsqcup", display = "⨆", collapse = true),
    BIGTRIANGLEDOWN("bigtriangledown", display = "▽", collapse = true),
    BIG_TRIANGLE_UP("bigtriangleup", display = "∆", collapse = true),
    BIG_TRIANGLE_DOWN("bigtrangledown", display = "▽", collapse = true),
    N_ARY_UNION_WITH_PLUS("biguplus", display = "⨄", collapse = true),
    BIG_VEE("bigvee", display = "⋁", collapse = true),
    BIG_WEDGE("bigwedge", display = "⋀", collapse = true),
    BIG_STAR("bigstar", dependency = AMSSYMB, display = "★", collapse = true),
    BINOM("binom", "total".asRequired(), "sample".asRequired(), dependency = AMSMATH),
    BLACKBOARD_BOLD_K("Bbbk", dependency = AMSSYMB, display = "\uD835\uDD5C", collapse = true),
    BLACK_SQUARE("blacksquare", dependency = AMSSYMB, display = "⬛", collapse = true),
    BLACK_LOZENGE("blacklozenge", dependency = AMSSYMB, display = "⧫", collapse = true),
    BLACK_TRIANGLE("blacktriangle", dependency = AMSSYMB, display = "▴", collapse = true),
    BLACK_TRIANGLE_DOWN("blacktriangledown", dependency = AMSSYMB, display = "▾", collapse = true),
    BM("bm", "text".asRequired(Type.TEXT), dependency = LatexPackage.BM),
    BMOD("bmod"),
    BOT("bot", display = "⟂", collapse = true),
    BRACEVERT("bracevert"),
    BREVE("breve", "a".asRequired()),
    CAPITAL_ARROWVERT("Arrowvert"),
    BOX("Box", dependency = AMSSYMB, display = "☐", collapse = true),
    AMSSYMB_DIAMOND("Diamond", dependency = AMSSYMB, display = "◇", collapse = true),
    MIRRORED_G("Game", dependency = AMSSYMB),
    PROBABILITY("Pr"),
    CDOT("cdot", display = "·", collapse = true),
    MIDDLE_DOT("cdotp", display = "·", collapse = true),
    CENTER_DOTS("cdots", display = "⋯", collapse = true),
    CHECK("check", "a".asRequired()),
    CIRCLED_R("circledR", dependency = AMSSYMB, display = "®", collapse = true),
    CIRCLED_S("circledS", dependency = AMSSYMB, display = "Ⓢ", collapse = true),
    CLOSING_BRACE("}", display = "}"),
    CLUB_SUIT("clubsuit", display = "♣", collapse = true),
    COLON("colon", display = ":", collapse = true),
    CONG("cong"),
    COSINE("cos"),
    HYPERBOLIC_COSINE("cosh"),
    COTANGENT("cot"),
    HYPERBOLIC_COTANGENT("coth"),
    COSECANT("csc"),
    DAGGER("dagger", display = "†", collapse = true),
    LEFT_TACK("dashv", display = "⊣", collapse = true),
    DOUBLE_DAGGER("ddagger", display = "‡", collapse = true),
    QUADRUPLE_DOTS("ddddot", "a".asRequired(), dependency = AMSMATH),
    TRIPLE_DOTS("dddot", "a".asRequired(), dependency = AMSMATH),
    DOUBLE_DOTS("ddot", "a".asRequired()),
    DOWN_RIGHT_DIAGONAL_DOTS("ddots", display = "⋱", collapse = true),
    DEGREES("deg"),
    DERMINANT("det"),
    DFRAC("dfrac", "num".asRequired(), "den".asRequired(), dependency = AMSMATH),
    DIAGONAL_DOWN("diagdown", dependency = AMSSYMB, display = "∖", collapse = true),
    DIAGONAL_UP("diagup", dependency = AMSSYMB, display = "∕", collapse = true),
    DIAMOND("diamond", display = "◇", collapse = true),
    DIAMOND_SUIT("diamondsuit", display = "♢", collapse = true),
    DIMENSION("dim"),
    DIV("div", display = "÷", collapse = true),
    DIVIDEONTIMES("divideontimes", dependency = AMSSYMB, display = "⋇", collapse = true),
    DOT("dot", "a".asRequired()),
    DOTEQ("doteq"),
    DOTS("dots", display = "⋯", collapse = true),
    DOUBLE_VERTICAL_ARROW("Arrowvert"),
    DOUBLE_VERTICAL_LINE("|", display = "‖", collapse = true),
    SCRIPT_SMALL_L("ell", display = "ℓ", collapse = true),
    ETH("eth", dependency = AMSSYMB, display = "ð", collapse = true),
    EXPONENTIAL("exp"),
    FLAT("flat", display = "♭", collapse = true),
    FRAC("frac", "num".asRequired(), "den".asRequired()),
    GREATEST_COMMON_DIVISOR("gcd"),
    GRAVE("grave", "a".asRequired()),
    HAT("hat", "a".asRequired()),
    H_BAR("hbar", display = "ℏ", collapse = true),
    HEART_SUIT("heartsuit", display = "♡", collapse = true),
    HOMOMORPHISM("hom"),
    H_SLASH("hslash", dependency = AMSSYMB, display = "ħ", collapse = true),
    IMAGINARY("Im", display = "ℑ", collapse = true),
    DOTLESS_I("imath", display = "ı", collapse = true),
    INFINUM("inf"),
    INVERSE_F("Finv", dependency = AMSSYMB, display = "Ⅎ", collapse = true),
    INVERSED_NOT_SIGN("invneg", dependency = WASYSYM),
    DOTLESS_J("jmath", display = "ȷ", collapse = true),
    KERNEL("ker"),
    LDOTP("ldotp"),
    LOWER_DOTS("ldots", display = "…", collapse = true),
    BASE_2_LOGARITHM("lg"),
    LIMIT("lim"),
    LIMIT_INFERIOR("liminf"),
    LIMIT_SUPERIOR("limsup"),
    NATURAL_LOGARITHM("ln"),
    LOGARITHM("log"),
    LOG_OF("logof", dependency = WASYSYM, display = "⍟", collapse = true),
    LOWER_LEFT_CORNER("llcorner", dependency = AMSSYMB, display = "⌞", collapse = true),
    LOWER_RIGHT_CORNER("lrcorner", dependency = AMSSYMB, display = "⌟", collapse = true),
    LOZENGE("lozenge", dependency = AMSSYMB, display = "⬨", collapse = true),
    MATHBB("mathbb", "text".asRequired(Type.TEXT), dependency = AMSFONTS),
    MATHBF("mathbf", "text".asRequired()),
    MATHCAL("mathcal", "text".asRequired()),
    MATHDS("mathds", "mathds".asRequired()),
    MATHELLIPSIS("mathellipsis"),
    MATHFRAK("mathfrak", "text".asRequired(Type.TEXT), dependency = AMSFONTS),
    MATHGROUP("mathgroup"),
    MATHIT("mathit", "text".asRequired()),
    MATHNORMAL("mathnormal", "text".asRequired()),
    MATHRING("mathring", "a".asRequired()),
    MATHRM("mathrm", "text".asRequired()),
    MATHSCR("mathscr"),
    MATHSF("mathsf", "text".asRequired()),
    MATHSTERLING("mathsterling"),
    MATHTT("mathtt", "text".asRequired()),
    MATHUNDERSCORE("mathunderscore"),
    MAXIMUM("max"),
    MINIMUM("min"),
    NATURAL("natural", display = "♮", collapse = true),
    NOT_SIGN("neg", display = "¬", collapse = true),
    O_CIRCLE("ocircle", dependency = WASYSYM, display = "◯", collapse = true),
    OPEN_BRACE("{", display = "{"),
    OVERBRACE("overbrace", "text".asRequired()),
    OVER_LEFT_ARROW("overleftarrow", "text".asRequired()),
    OVER_LEFT_RIGHT_ARROW("overleftrightarrow", "text".asRequired(), dependency = AMSMATH),
    OVERLINE("overline", "text".asRequired()),
    OVER_RIGHT_ARROW("overrightarrow", "text".asRequired()),
    PMOD("pmod"),
    PRIME("prime", display = "′", collapse = true),
    INVERSE_LIMIT("projlim", dependency = AMSMATH),
    REAL("Re", display = "ℜ", collapse = true),
    REVERSED_OHM("mho", dependency = AMSSYMB, display = "℧", collapse = true),
    SECANT("sec"),
    SHARP("sharp", display = "♯", collapse = true),
    SINE("sin"),
    HYPERBOLIC_SINE("sinh"),
    SPADE_SUIT("spadesuit", display = "♠", collapse = true),
    SQUARE_ROOT("sqrt", "root".asOptional(), "arg".asRequired()),
    SQUARE("square", dependency = AMSSYMB, display = "◻", collapse = true),
    STACKED_RELATION("stackrel", "top".asRequired(), "relation".asRequired()),
    SUPREMUM("sup"),
    SQUARE_ROOT_SURD("surd", display = "√", collapse = true),
    TANGENT("tan"),
    HBOLICTANGENT("tanh"),
    TEXT("text", "text".asRequired(), dependency = AMSMATH),
    TILDE("tilde", "a".asRequired()),
    TOP("top", display = "⊤", collapse = true),
    TRIANGLE_UP("triangle", display = "△", collapse = true),
    TRIANGLE_DOWN("triangledown", dependency = AMSSYMB, display = "▽", collapse = true),
    UNDERBRACE("underbrace", "text".asRequired()),
    UNDER_LEFT_ARROW("underleftarrow", "text".asRequired(), dependency = AMSMATH),
    UNDER_LEFT_RIGHT_ARROW("underleftrightarrow", "text".asRequired(), dependency = AMSMATH),
    UNDERLINE("underline", "text".asRequired()),
    UNDER_RIGHT_ARROW("underrightarrow", "text".asRequired(), dependency = AMSMATH),
    UNDERSCORE("_", display = "_"),
    UPPER_LEFT_CORNER("ulcorner", dependency = AMSSYMB, display = "⌜", collapse = true),
    UPPER_RIGHT_CORNER("urcorner", dependency = AMSSYMB, display = "⌝", collapse = true),
    DIRECT_LIMIT_VARIANT("varinjlim", dependency = AMSMATH),
    LIMIT_INFERIOR_VARIANT("varliminf", dependency = AMSMATH),
    LIMIT_SUPERIOR_VARIANT("varlimsup", dependency = AMSMATH),
    INVERSE_LIMIT_VARIANT("varprojlim", dependency = AMSMATH),
    TRIANGLE_VARIANT("vartriangle", dependency = AMSSYMB, display = "△", collapse = true),
    VERTICAL_DOTS("vdots", display = "⋮", collapse = true),
    VECTOR("vec", "a".asRequired()),
    VEE("vee", display = "⋁", collapse = true),
    VERTICAL_ARROW("arrowvert"),
    WASYSYM_PROPTO("wasypropto", dependency = WASYSYM, display = "∝", collapse = true),
    WEDGE("wedge", display = "⋀", collapse = true),
    WIDE_HAT("widehat", "text".asRequired()),
    WIDE_TILDE("widetilde", "text".asRequired()),
    SCRIPT_CAPITAL_P("wp", display = "℘", collapse = true),
    ABOVE_LEFT_ARROW("xleftarrow", "text".asRequired(), dependency = AMSMATH),
    ABOVE_RIGHT_ARROW("xrightarrow", "text".asRequired(), dependency = AMSMATH),

    /*
     * Uncategorized stmaryrd symbols.
     */
    Y_LEFT("Yleft", dependency = STMARYRD),
    Y_UP("Yup", dependency = STMARYRD),
    Y_RIGHT("Yright", dependency = STMARYRD),
    Y_DOWN("Ydown", dependency = STMARYRD),
    BIN_AMPERSAND("binampersand", dependency = STMARYRD, display = "&", collapse = true),
    BIN_REVERSED_AMPERSAND("bindnasrepma", dependency = STMARYRD),
    O_BAR("baro", dependency = STMARYRD, display = "⏀", collapse = true),
    BOX_BAR("boxbar", dependency = STMARYRD),
    BOX_CIRCLE("boxcircle", dependency = STMARYRD),
    BOX_BOX("boxbox", dependency = STMARYRD),
    BOXED_DOT_STMARYRD("boxdot", dependency = STMARYRD),
    BOX_ASTERISK("boxast", dependency = STMARYRD),
    BOX_BSLASH("boxbslash", dependency = STMARYRD),
    BOX_EMPTY("boxempty", dependency = STMARYRD, display = "◻", collapse = true),
    BOX_SLASH("boxslash", dependency = STMARYRD),
    BIG_BOX("bigbox", dependency = STMARYRD),
    CURLY_VEE_VARIANT("varcurlyvee", dependency = STMARYRD),
    BIG_CURLY_VEE("bigcurlyvee", dependency = STMARYRD),
    CURLY_WEDGE_VARIANT("varcurlywedge", dependency = STMARYRD),
    BIG_CURLY_WEDGE_VARIANT("bigcurlywedge", dependency = STMARYRD),
    CURLY_VEE_DOWN_ARROW("curlyveedownarrow", dependency = STMARYRD),
    CURLY_VEE_UP_ARROW("curlyveeuparrow", dependency = STMARYRD),
    CURLY_WEDGE_DOWN_ARROW("curlywedgedownarrow", dependency = STMARYRD),
    CURLY_WEDGE_UP_ARROW("curlywedgeuparrow", dependency = STMARYRD),
    BLACKBOARD_BACKSLASH("bbslash", dependency = STMARYRD, display = "⑊", collapse = true),
    BLACKBOARD_SLASH("sslash", dependency = STMARYRD, display = "⃫", collapse = true),
    FAT_BACKSLASH("fatbslash", dependency = STMARYRD),
    FAT_SLASH("fatslash", dependency = STMARYRD),
    FAT_SEMICOLON("fatsemi", dependency = STMARYRD),
    BIG_PARALLEL("bigparallel", dependency = STMARYRD, display = "∥", collapse = true),
    INTERLEAVE("interleave", dependency = STMARYRD, display = "⫴", collapse = true),
    BIG_INTERLEAVE("biginterleave", dependency = STMARYRD, display = "⫴", collapse = true),
    TALL_OBLONG("talloblong", dependency = STMARYRD, display = "▯", collapse = true),
    LEFT_SLICE("leftslice", dependency = STMARYRD),
    RIGHT_SLICE("rightslice", dependency = STMARYRD),
    MERGE("merge", dependency = STMARYRD),
    MOO("moo", dependency = STMARYRD),
    CAP_PLUS("nplus", dependency = STMARYRD),
    BIG_CAP_PLUS("bignplus", dependency = STMARYRD),
    O_HORIZONTAL_DASH("minuso", dependency = STMARYRD, display = "⦵", collapse = true),
    O_WITH_VERTICAL_LINE("obar", dependency = STMARYRD, display = "⊖", collapse = true),
    OBLONG("oblong", dependency = STMARYRD, display = "▯", collapse = true),
    O_WITH_BACKSLASH("obslash", dependency = STMARYRD, display = "⃠", collapse = true),
    O_WITH_GREATER_THAN("ogreaterthan", dependency = STMARYRD, display = "⧁", collapse = true),
    O_WITH_LESS_THAN("olessthan", dependency = STMARYRD, display = "⧀", collapse = true),
    O_WITH_VEE("ovee", dependency = STMARYRD),
    O_WITH_WEDGE("owedge", dependency = STMARYRD),
    BIG_CIRCLE_VARIANT("varbigcirc", dependency = STMARYRD, display = "◯", collapse = true),
    O_WITH_STAR_VARIANT("varoast", dependency = STMARYRD, display = "⊛", collapse = true),
    O_WITH_VERTICAL_BAR_VARIANT("varobar", dependency = STMARYRD, display = "⦶", collapse = true),
    O_WITH_BACKSLASH_VARIANT("varobslash", dependency = STMARYRD, display = "⦸", collapse = true),
    O_WITH_CIRCLE_VARIANT("varocircle", dependency = STMARYRD, display = "⦾", collapse = true),
    O_WITH_DOT_VARIANT("varodot", dependency = STMARYRD, display = "⨀", collapse = true),
    O_WITH_GREATER_THAN_VARIANT("varogreaterthan", dependency = STMARYRD, display = "⧁", collapse = true),
    O_WITH_LESS_THAN_VARIANT("varolessthan", dependency = STMARYRD, display = "⧀", collapse = true),
    O_WITH_MINUS_VARIANT("varominus", dependency = STMARYRD, display = "⊖", collapse = true),
    O_WITH_PLUS_VARIANT("varoplus", dependency = STMARYRD, display = "⊕", collapse = true),
    O_WITH_SLASH_VARIANT("varoslash", dependency = STMARYRD, display = "⊘", collapse = true),
    O_WITH_TIMES_VARIANT("varotimes", dependency = STMARYRD, display = "⊗", collapse = true),
    O_WITH_VEE_VARIANT("varovee", dependency = STMARYRD),
    O_WITH_WEDGE_VARIANT("varowedge", dependency = STMARYRD),
    TIMES_VARIANT("vartimes", dependency = STMARYRD, display = "⨉", collapse = true),
    BIG_SQUARE_CAP("bigsqcap", dependency = STMARYRD, display = "⊓", collapse = true),
    ;

    companion object {

        private val lookup = HashMap<String, MutableSet<LatexMathCommand>>()
        private val lookupDisplay = HashMap<String, MutableSet<LatexMathCommand>>()

        init {
            for (command in values()) {
                lookup.getOrPut(command.command) { mutableSetOf() }.add(command)
                if (command.display != null) {
                    lookupDisplay.putIfAbsent(command.display!!, mutableSetOf(command))?.add(command)
                }
            }
        }

        @JvmStatic
        operator fun get(command: String) = lookup[command]?.toSet()

        @JvmStatic
        fun findByDisplay(display: String) = lookupDisplay[display]?.toSet()
    }
}