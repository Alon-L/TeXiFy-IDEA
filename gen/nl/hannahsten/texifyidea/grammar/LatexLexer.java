/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int INLINE_VERBATIM_START = 22;
  public static final int INLINE_VERBATIM_PIPE = 24;
  public static final int INLINE_VERBATIM_EXCL_MARK = 26;
  public static final int INLINE_VERBATIM_QUOTES = 28;
  public static final int INLINE_VERBATIM_EQUALS = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int VERBATIM = 40;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 42;
  public static final int POSSIBLE_VERBATIM_END = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\11\0\1\10\1\20\2\22\1\21\22\0\1\10\1\44\1\45\1\0\1\51\1\34\2\0\1\2\1\3\1"+
    "\40\21\0\1\52\1\36\1\52\1\0\1\24\32\17\1\4\1\1\1\5\3\0\1\32\1\11\1\30\1\16"+
    "\1\12\1\25\1\13\1\31\1\14\2\17\1\41\1\50\1\15\1\47\2\17\1\33\1\42\1\27\1\17"+
    "\1\37\1\46\1\26\2\17\1\6\1\43\1\7\7\0\1\23\32\0\1\35\337\0\1\35\177\0\13\35"+
    "\35\0\2\23\5\0\1\35\57\0\1\35\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\2\1\12\1\2\1\13\1\14\1\15"+
    "\1\2\1\16\1\17\1\20\3\2\1\21\1\22\1\1"+
    "\1\23\1\2\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\21\1\35\1\36\1\37\1\40"+
    "\1\34\1\41\1\42\1\43\1\44\1\45\1\7\2\1"+
    "\1\46\1\47\1\50\4\46\1\11\5\46\1\0\2\12"+
    "\1\46\1\20\1\51\1\52\1\53\2\35\1\0\1\54"+
    "\7\46\1\54\1\46\1\0\1\46\1\55\5\46\1\56"+
    "\3\46\1\57\1\46\1\60\1\61\2\46\1\57\14\46"+
    "\1\57\5\46\1\62\1\46\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u0433\0\u0433\0\u0433\0\u0433\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u0433\0\u0433\0\u03dd\0\u0433\0\u050a"+
    "\0\u0433\0\u0433\0\u0433\0\u0535\0\u0560\0\u058b\0\u0433\0\u0433"+
    "\0\u0433\0\u0433\0\u05b6\0\u0433\0\u0433\0\u0433\0\u0433\0\u0433"+
    "\0\u0433\0\u0433\0\u0433\0\u04b4\0\u04b4\0\u05e1\0\u0433\0\u0433"+
    "\0\u0433\0\u060c\0\u04b4\0\u04b4\0\u0637\0\u0662\0\u04b4\0\u04b4"+
    "\0\u068d\0\u06b8\0\u04b4\0\u04b4\0\u04b4\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u04b4\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u04b4\0\u04b4\0\u04b4\0\u04b4\0\u08e7"+
    "\0\u0912\0\u093d\0\u04b4\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0a3f\0\u0a6a\0\u0866\0\u0a95\0\u0ac0\0\u0aeb\0\u0739\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u04b4\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0739\0\u0739\0\u0cc4\0\u0cef\0\u04b4\0\u0d1a"+
    "\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\u0739\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u04b4\0\u0ff5\0\u0739";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\7\30\3\41\1\42\10\30\1\43\1\44\1\45"+
    "\1\30\1\46\2\30\3\45\3\30\1\47\2\30\1\50"+
    "\1\32\1\33\1\51\1\52\1\36\1\37\1\40\7\30"+
    "\3\41\1\42\10\30\1\43\1\44\1\45\1\30\1\46"+
    "\2\30\3\45\3\30\1\53\2\30\1\54\1\32\1\33"+
    "\1\51\1\52\1\36\1\37\1\40\7\30\3\41\1\42"+
    "\10\30\1\43\1\44\1\45\1\30\1\46\2\30\3\45"+
    "\3\30\1\44\2\30\1\55\1\32\1\33\1\51\1\52"+
    "\1\36\1\37\1\40\7\30\3\41\1\42\10\30\1\43"+
    "\1\44\1\45\1\30\1\46\2\30\3\45\3\30\1\47"+
    "\2\30\1\56\1\32\1\33\1\34\1\35\1\36\1\57"+
    "\1\40\7\30\3\41\1\42\10\30\1\43\1\44\1\45"+
    "\1\30\1\46\2\30\3\45\3\30\1\60\2\30\1\56"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\7\30"+
    "\3\41\1\42\10\30\1\43\1\44\1\45\1\30\1\46"+
    "\2\30\3\45\3\30\1\53\2\30\1\56\1\32\1\33"+
    "\1\34\1\35\1\36\1\57\1\40\7\30\3\41\1\42"+
    "\10\30\1\43\1\44\1\45\1\30\1\46\2\30\3\45"+
    "\3\30\1\61\2\30\1\56\1\32\1\33\1\34\1\35"+
    "\1\36\1\62\1\40\7\30\3\41\1\42\10\30\1\43"+
    "\1\44\1\45\1\30\1\46\2\30\3\45\3\30\1\44"+
    "\2\30\1\63\1\32\1\33\1\34\1\35\1\64\1\65"+
    "\1\40\7\30\3\41\1\42\10\30\1\43\1\44\1\45"+
    "\1\30\1\46\2\30\3\45\3\30\1\61\2\30\1\56"+
    "\1\32\1\33\1\34\1\35\1\66\1\37\1\40\7\30"+
    "\3\41\1\42\10\30\1\43\1\44\1\45\1\30\1\46"+
    "\2\30\3\45\3\30\1\44\2\30\1\63\1\32\1\33"+
    "\1\34\1\35\1\64\1\67\1\40\7\30\3\41\1\42"+
    "\10\30\1\43\1\44\1\45\1\30\1\46\2\30\3\45"+
    "\3\30\1\61\2\30\1\56\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\7\30\3\41\1\42\10\30\1\43"+
    "\1\44\1\70\1\30\1\46\2\30\1\71\1\72\1\73"+
    "\3\30\1\44\1\30\43\74\1\75\53\74\1\75\53\74"+
    "\1\75\43\74\1\75\14\74\1\76\1\56\1\32\1\33"+
    "\1\34\1\35\1\36\1\57\1\40\7\76\3\41\1\42"+
    "\10\76\1\43\1\44\1\45\4\76\3\45\3\76\1\44"+
    "\1\76\1\30\1\56\1\32\1\33\1\77\1\100\1\36"+
    "\1\37\1\40\7\30\3\41\1\42\10\30\1\43\1\44"+
    "\1\45\1\30\1\46\2\30\3\45\3\30\1\44\2\30"+
    "\1\56\1\32\1\33\1\34\1\35\1\36\1\101\1\40"+
    "\7\30\3\41\1\42\10\30\1\43\1\44\1\45\1\30"+
    "\1\46\2\30\3\45\3\30\1\44\2\30\1\56\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\7\30\3\41"+
    "\1\42\10\30\1\43\1\44\1\45\1\30\1\46\2\30"+
    "\3\45\3\30\1\44\1\30\1\74\1\102\6\74\1\41"+
    "\7\74\3\41\30\74\4\103\1\104\3\103\1\105\7\103"+
    "\3\105\30\103\1\106\5\107\1\110\2\107\7\106\4\107"+
    "\10\106\3\107\4\106\3\107\3\106\1\107\1\106\1\111"+
    "\10\0\7\111\4\0\10\111\3\0\4\111\3\0\3\111"+
    "\1\0\1\112\2\113\1\114\1\113\1\115\4\113\1\116"+
    "\1\117\2\120\1\121\2\120\1\122\1\113\2\0\1\123"+
    "\6\120\1\124\3\113\1\125\1\113\1\126\1\120\3\113"+
    "\3\120\1\113\1\127\52\0\1\130\10\0\1\41\7\0"+
    "\3\41\27\0\1\130\10\0\1\41\7\0\3\41\103\0"+
    "\20\131\2\0\30\131\1\132\4\113\1\115\4\113\1\116"+
    "\1\117\2\120\1\121\2\120\1\122\1\113\2\0\1\123"+
    "\2\120\1\133\3\120\1\124\3\113\1\125\1\113\1\126"+
    "\1\120\3\113\3\120\1\113\1\127\3\113\1\134\1\115"+
    "\4\113\1\116\1\117\2\120\1\121\2\120\1\122\1\113"+
    "\2\0\1\123\6\120\1\124\3\113\1\125\1\113\1\126"+
    "\1\120\3\113\3\120\1\113\1\127\2\113\1\114\1\113"+
    "\1\115\1\135\3\113\1\116\1\117\2\120\1\121\2\120"+
    "\1\122\1\113\2\0\1\123\6\120\1\124\3\113\1\125"+
    "\1\113\1\126\1\120\3\113\3\120\1\113\1\127\4\113"+
    "\1\115\4\113\1\116\1\117\2\120\1\121\2\120\1\122"+
    "\1\113\2\0\1\123\6\120\1\124\3\113\1\125\1\113"+
    "\1\126\1\120\3\113\3\120\1\113\1\127\4\113\1\136"+
    "\1\137\3\113\1\116\1\117\2\120\1\121\2\120\1\122"+
    "\1\113\2\0\1\123\6\120\1\124\3\113\1\125\1\113"+
    "\1\126\1\120\3\113\3\120\1\113\1\127\1\140\10\0"+
    "\7\140\4\0\10\140\3\0\4\140\3\0\3\140\1\0"+
    "\1\141\12\0\1\142\50\0\1\105\7\0\3\105\30\0"+
    "\1\106\10\0\7\106\4\0\10\106\3\0\4\106\3\0"+
    "\3\106\1\0\1\106\1\111\10\0\7\111\4\0\10\111"+
    "\3\0\4\111\3\0\3\111\1\0\2\111\5\0\1\143"+
    "\2\0\7\111\4\0\10\111\3\0\4\111\3\0\3\111"+
    "\1\0\1\111\11\0\1\120\1\144\5\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\4\120"+
    "\1\145\2\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\7\120\4\0\10\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\1\120\1\146\5\120"+
    "\4\0\10\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\3\120\1\147\3\120\4\0\10\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\1\120\1\150\5\120"+
    "\4\0\10\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\1\120\1\151\5\120\4\0\10\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\7\120\4\0\10\120"+
    "\3\0\1\120\1\0\1\120\1\152\3\0\3\120\10\0"+
    "\1\143\44\0\20\131\2\0\37\131\1\153\11\131\2\0"+
    "\31\131\11\0\1\120\1\154\5\120\4\0\10\120\3\0"+
    "\1\120\1\0\2\120\3\0\3\120\2\0\1\140\10\0"+
    "\7\140\4\0\10\140\3\0\4\140\3\0\3\140\1\0"+
    "\2\140\5\0\1\143\2\0\7\140\4\0\10\140\3\0"+
    "\4\140\3\0\3\140\1\0\1\140\15\0\1\155\46\0"+
    "\2\120\1\156\4\120\4\0\10\120\3\0\1\120\1\0"+
    "\2\120\3\0\3\120\13\0\5\120\1\157\1\120\4\0"+
    "\10\120\3\0\1\120\1\0\2\120\3\0\3\120\13\0"+
    "\7\120\4\0\10\120\3\0\1\120\1\0\2\120\3\0"+
    "\1\160\2\120\13\0\7\120\4\0\1\120\1\161\6\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\4\120"+
    "\1\121\2\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\7\120\4\0\7\120\1\162\3\0"+
    "\1\120\1\0\2\120\3\0\3\120\13\0\7\120\4\0"+
    "\3\120\1\163\4\120\3\0\1\120\1\0\2\120\3\0"+
    "\3\120\13\0\7\120\4\0\2\120\1\164\5\120\3\0"+
    "\1\120\1\0\2\120\3\0\3\120\20\0\1\165\45\0"+
    "\3\120\1\166\3\120\4\0\10\120\3\0\1\120\1\0"+
    "\2\120\3\0\3\120\13\0\1\120\1\167\5\120\4\0"+
    "\10\120\3\0\1\120\1\0\2\120\3\0\3\120\13\0"+
    "\4\120\1\170\2\120\4\0\10\120\3\0\1\120\1\0"+
    "\2\120\3\0\3\120\13\0\1\171\6\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\3\120"+
    "\1\172\3\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\7\120\4\0\3\120\1\173\4\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\4\120"+
    "\1\174\2\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\4\120\1\175\2\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\1\120"+
    "\1\176\5\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\7\120\4\0\10\120\3\0\1\120"+
    "\1\177\2\120\3\0\3\120\13\0\4\120\1\200\2\120"+
    "\4\0\10\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\7\120\4\0\10\120\3\0\1\201\1\0\2\120"+
    "\3\0\3\120\13\0\7\120\4\0\2\120\1\202\5\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\7\120"+
    "\4\0\10\120\3\0\1\120\1\0\1\203\1\120\3\0"+
    "\3\120\13\0\3\120\1\204\3\120\4\0\10\120\3\0"+
    "\1\120\1\0\2\120\3\0\3\120\13\0\7\120\4\0"+
    "\3\120\1\205\4\120\3\0\1\120\1\0\2\120\3\0"+
    "\3\120\13\0\3\120\1\206\3\120\4\0\10\120\3\0"+
    "\1\120\1\0\2\120\3\0\3\120\13\0\7\120\4\0"+
    "\7\120\1\207\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\7\120\4\0\4\120\1\210\3\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\4\120\1\211\2\120"+
    "\4\0\10\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\7\120\4\0\10\120\3\0\1\120\1\0\2\120"+
    "\3\0\1\120\1\212\1\120\13\0\7\120\4\0\5\120"+
    "\1\213\2\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\1\120\1\214\5\120\4\0\10\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\4\120\1\215\2\120"+
    "\4\0\10\120\3\0\1\120\1\0\2\120\3\0\3\120"+
    "\13\0\7\120\4\0\6\120\1\216\1\120\3\0\1\120"+
    "\1\0\2\120\3\0\3\120\13\0\7\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\2\120\1\217\13\0"+
    "\7\120\4\0\7\120\1\220\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\13\0\1\120\1\221\5\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\2\0\11\222"+
    "\7\120\4\0\10\120\3\222\1\120\1\222\2\120\3\222"+
    "\3\120\2\222\11\0\4\120\1\223\2\120\4\0\10\120"+
    "\3\0\1\120\1\0\2\120\3\0\3\120\13\0\7\120"+
    "\4\0\3\120\1\224\4\120\3\0\1\120\1\0\2\120"+
    "\3\0\3\120\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\12\1\1\11\31\1\2\11\5\1\2\11\2\1"+
    "\2\11\2\1\3\11\4\1\1\11\5\1\1\0\3\1"+
    "\4\11\2\1\1\0\1\11\11\1\1\0\7\1\1\11"+
    "\11\1\1\11\22\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this(null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 52: break;
          case 2: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 53: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 54: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 55: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 56: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 57: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 58: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 59: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 10: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 61: break;
          case 11: 
            { return NORMAL_TEXT_CHAR;
            } 
            // fall through
          case 62: break;
          case 12: 
            { return STAR;
            } 
            // fall through
          case 63: break;
          case 13: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 64: break;
          case 14: 
            { return M_OPEN_BRACKET;
            } 
            // fall through
          case 65: break;
          case 15: 
            { return M_CLOSE_BRACKET;
            } 
            // fall through
          case 66: break;
          case 16: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 67: break;
          case 17: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 68: break;
          case 18: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 69: break;
          case 19: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 70: break;
          case 20: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 71: break;
          case 21: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 72: break;
          case 22: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 73: break;
          case 23: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 74: break;
          case 24: 
            { yypopState(); yypushState(INLINE_VERBATIM_EQUALS); return OPEN_BRACE;
            } 
            // fall through
          case 75: break;
          case 25: 
            { yypopState(); yypushState(INLINE_VERBATIM_PIPE); return OPEN_BRACE;
            } 
            // fall through
          case 76: break;
          case 26: 
            { yypopState(); yypushState(INLINE_VERBATIM_EXCL_MARK); return OPEN_BRACE;
            } 
            // fall through
          case 77: break;
          case 27: 
            { yypopState(); yypushState(INLINE_VERBATIM_QUOTES); return OPEN_BRACE;
            } 
            // fall through
          case 78: break;
          case 28: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 79: break;
          case 29: 
            { yypopState();
        // toString to fix comparisons of charsequence subsequences with string
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            yypushState(VERBATIM_START);
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 80: break;
          case 30: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 81: break;
          case 31: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) yypopState(); yypushState(VERBATIM);
        return CLOSE_BRACKET;
            } 
            // fall through
          case 82: break;
          case 32: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 83: break;
          case 33: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 84: break;
          case 34: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 85: break;
          case 35: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 36: 
            { // Pop current state
        yypopState();
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 87: break;
          case 37: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 88: break;
          case 38: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 89: break;
          case 39: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 90: break;
          case 40: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 91: break;
          case 41: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 92: break;
          case 42: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 93: break;
          case 43: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 94: break;
          case 44: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 95: break;
          case 45: 
            { return END_TOKEN;
            } 
            // fall through
          case 96: break;
          case 46: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 98: break;
          case 48: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 100: break;
          case 50: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 101: break;
          case 51: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
