/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int INLINE_VERBATIM_START = 26;
  public static final int INLINE_VERBATIM = 28;
  public static final int POSSIBLE_VERBATIM_BEGIN = 30;
  public static final int VERBATIM_OPTIONAL_ARG = 32;
  public static final int VERBATIM_START = 34;
  public static final int VERBATIM_END = 36;
  public static final int VERBATIM = 38;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 40;
  public static final int POSSIBLE_VERBATIM_END = 42;
  public static final int PSEUDOCODE = 44;
  public static final int POSSIBLE_PSEUDOCODE_END = 46;
  public static final int OFF = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\20\2\22\1\21\22\0\1\50\1\47\1\74\1\0\1\67\1\53\1\72\1\0\1\2\1"+
    "\3\1\66\1\0\1\73\15\0\1\17\1\0\1\70\1\56\1\71\1\0\1\24\1\61\2\17\1\43\1\46"+
    "\1\60\2\17\1\62\2\17\1\64\1\17\1\40\1\17\1\42\1\17\1\41\1\17\1\51\1\65\1\17"+
    "\1\63\1\52\2\17\1\4\1\1\1\5\1\0\1\17\1\0\1\32\1\11\1\30\1\16\1\12\1\25\1\13"+
    "\1\31\1\14\2\17\1\44\1\37\1\15\1\36\1\54\1\17\1\33\1\55\1\27\1\45\1\35\1\34"+
    "\1\26\2\17\1\6\1\75\1\7\7\0\1\23\32\0\1\57\337\0\1\57\177\0\13\57\35\0\2\23"+
    "\5\0\1\57\57\0\1\57\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\1\1\31\1\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\2\1\55\1\47\1\56\1\57\1\60\15\56"+
    "\1\14\1\61\1\14\1\62\1\56\1\63\1\64\1\65"+
    "\2\0\11\56\2\0\15\56\1\61\1\0\1\61\1\14"+
    "\1\56\2\0\7\56\1\66\3\56\2\0\1\56\1\67"+
    "\11\56\1\0\1\61\1\14\1\56\1\0\1\70\1\71"+
    "\4\56\1\66\4\56\2\0\4\56\1\72\5\56\1\0"+
    "\1\61\1\14\1\73\1\0\7\56\1\74\5\56\2\0"+
    "\1\75\3\56\1\72\5\56\1\0\1\61\1\76\5\56"+
    "\1\77\4\56\1\0\7\56\1\0\1\61\6\56\1\0"+
    "\4\56\1\72\1\56\1\0\1\61\5\56\1\0\5\56"+
    "\1\0\1\61\2\56\1\0\3\56\1\0\1\61\2\56"+
    "\1\0\3\56\1\0\1\61\2\56\1\100\3\56\1\0"+
    "\1\101\1\56\1\102\3\56\1\103\10\56\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u068a\0\u068a\0\u068a\0\u068a"+
    "\0\u068a\0\u06c8\0\u068a\0\u068a\0\u0706\0\u068a\0\u060e\0\u068a"+
    "\0\u0744\0\u0744\0\u068a\0\u068a\0\u068a\0\u068a\0\u0782\0\u068a"+
    "\0\u07c0\0\u07fe\0\u083c\0\u068a\0\u068a\0\u068a\0\u068a\0\u087a"+
    "\0\u068a\0\u068a\0\u068a\0\u068a\0\u068a\0\u068a\0\u068a\0\u068a"+
    "\0\u068a\0\u08b8\0\u068a\0\u068a\0\u068a\0\u068a\0\u08f6\0\u068a"+
    "\0\u068a\0\u0934\0\u0972\0\u068a\0\u09b0\0\u09ee\0\u0a2c\0\u068a"+
    "\0\u068a\0\u068a\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u068a\0\u0e4a\0\u068a\0\u068a\0\u068a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u0ae6"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u0ae6\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u068a\0\u0ae6\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u0ae6"+
    "\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u0ae6\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u0ae6\0\u2682\0\u26c0\0\u26fe\0\u068a\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u068a\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u0ae6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u0ae6\0\u3032\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e"+
    "\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e"+
    "\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u068a\0\u3a20"+
    "\0\u3a5e\0\u3a9c\0\u0ae6\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2"+
    "\0\u3c10\0\u3c4e\0\u3c8c\0\u0ae6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\7\32\3\42\1\43\23\32\1\44\1\42\2\32"+
    "\1\45\2\32\1\46\1\43\6\32\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\32\1\57\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\7\32\3\42"+
    "\1\43\23\32\1\44\1\42\2\32\1\45\2\32\1\46"+
    "\1\43\6\32\1\47\1\60\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\32\1\61\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\7\32\3\42\1\43\23\32\1\44"+
    "\1\42\2\32\1\45\2\32\1\46\1\43\6\32\1\47"+
    "\1\43\1\51\1\52\1\53\1\54\1\55\1\56\1\32"+
    "\1\62\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\7\32\3\42\1\43\23\32\1\44\1\42\2\32\1\45"+
    "\2\32\1\46\1\43\6\32\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\32\1\63\1\34\1\35"+
    "\1\36\1\37\1\40\1\64\1\42\7\32\3\42\1\43"+
    "\23\32\1\44\1\42\2\32\1\45\2\32\1\46\1\43"+
    "\6\32\1\47\1\65\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\32\1\63\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\7\32\3\42\1\43\23\32\1\44\1\42"+
    "\2\32\1\45\2\32\1\46\1\43\6\32\1\47\1\60"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\32\1\63"+
    "\1\34\1\35\1\36\1\37\1\40\1\64\1\42\7\32"+
    "\3\42\1\43\23\32\1\44\1\42\2\32\1\45\2\32"+
    "\1\46\1\43\6\32\1\47\1\66\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\32\1\63\1\34\1\35\1\36"+
    "\1\37\1\40\1\67\1\42\7\32\3\42\1\43\23\32"+
    "\1\44\1\42\2\32\1\45\2\32\1\46\1\43\6\32"+
    "\1\47\1\43\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\32\1\70\1\34\1\35\1\36\1\37\1\71\1\72"+
    "\1\42\7\32\3\42\1\43\23\32\1\44\1\42\2\32"+
    "\1\45\2\32\1\46\1\43\6\32\1\47\1\66\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\32\1\63\1\34"+
    "\1\35\1\36\1\37\1\73\1\41\1\42\7\32\3\42"+
    "\1\43\23\32\1\44\1\42\2\32\1\45\2\32\1\46"+
    "\1\43\6\32\1\47\1\43\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\32\1\70\1\34\1\35\1\36\1\37"+
    "\1\71\1\74\1\42\7\32\3\42\1\43\23\32\1\44"+
    "\1\42\2\32\1\45\2\32\1\46\1\43\6\32\1\47"+
    "\1\66\1\51\1\52\1\53\1\54\1\55\1\56\1\32"+
    "\1\63\1\34\1\35\1\36\1\37\1\40\1\75\1\42"+
    "\7\32\3\42\1\43\23\32\1\44\1\42\2\32\1\45"+
    "\2\32\1\46\1\43\6\32\1\47\1\43\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\32\1\63\1\34\1\35"+
    "\1\36\1\37\1\71\1\76\1\42\7\32\3\42\1\43"+
    "\23\32\1\44\1\42\2\32\1\45\2\32\1\46\1\43"+
    "\6\32\1\47\1\43\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\6\77\1\100\67\77\76\101\1\102\1\70\1\34"+
    "\1\35\1\36\1\37\1\71\1\64\1\42\7\102\3\42"+
    "\1\43\23\102\1\44\1\42\2\102\1\45\2\102\1\46"+
    "\1\43\7\102\1\66\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\32\1\63\1\34\1\35\1\103\1\104\1\40"+
    "\1\41\1\42\7\32\3\42\1\43\23\32\1\44\1\42"+
    "\2\32\1\45\2\32\1\46\1\43\6\32\1\47\1\43"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\32\1\63"+
    "\1\34\1\35\1\36\1\37\1\40\1\105\1\42\7\32"+
    "\3\42\1\43\23\32\1\44\1\42\2\32\1\45\2\32"+
    "\1\46\1\43\6\32\1\47\1\43\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\32\1\63\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\7\32\3\42\1\43\23\32"+
    "\1\44\1\42\2\32\1\45\2\32\1\46\1\43\6\32"+
    "\1\47\1\43\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\106\1\107\6\106\1\42\7\106\3\42\25\106\1\42"+
    "\25\106\4\110\1\111\3\110\1\112\7\110\3\112\25\110"+
    "\1\112\25\110\1\113\5\114\1\40\2\114\7\113\4\114"+
    "\23\113\2\114\2\113\1\114\2\113\2\114\7\113\7\114"+
    "\1\32\1\115\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\7\32\3\42\1\43\23\32\1\44\1\42\2\32"+
    "\1\45\2\32\1\46\1\43\6\32\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\116\1\63\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\7\116\3\42"+
    "\1\43\23\116\1\44\1\42\2\116\1\45\2\116\1\46"+
    "\1\43\7\116\1\43\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\53\106\1\117\22\106\1\32\10\0\7\32\4\0"+
    "\23\32\2\0\2\32\1\0\2\32\2\0\7\32\7\0"+
    "\2\120\1\121\1\120\1\122\4\120\1\123\1\124\2\125"+
    "\1\126\1\127\1\125\1\0\1\120\2\0\1\130\6\125"+
    "\1\131\1\125\1\132\2\125\1\133\1\134\1\135\1\136"+
    "\1\137\2\125\2\120\2\125\1\120\2\125\2\120\6\125"+
    "\10\120\106\0\1\42\7\0\3\42\25\0\1\42\25\0"+
    "\20\140\2\0\25\140\1\141\1\142\25\140\6\0\1\143"+
    "\67\0\4\120\1\122\4\120\1\123\1\124\2\125\1\126"+
    "\1\127\1\125\1\0\1\120\2\0\1\130\2\125\1\144"+
    "\3\125\1\131\1\125\1\132\2\125\1\133\1\134\1\135"+
    "\1\136\1\137\2\125\2\120\2\125\1\120\2\125\2\120"+
    "\6\125\13\120\1\60\1\122\4\120\1\123\1\124\2\125"+
    "\1\126\1\127\1\125\1\0\1\120\2\0\1\130\6\125"+
    "\1\131\1\125\1\132\2\125\1\133\1\134\1\135\1\136"+
    "\1\137\2\125\2\120\2\125\1\120\2\125\2\120\6\125"+
    "\12\120\1\121\1\120\1\122\1\145\3\120\1\123\1\124"+
    "\2\125\1\126\1\127\1\125\1\0\1\120\2\0\1\130"+
    "\6\125\1\131\1\125\1\132\2\125\1\133\1\134\1\135"+
    "\1\136\1\137\2\125\2\120\2\125\1\120\2\125\2\120"+
    "\6\125\14\120\1\122\4\120\1\123\1\124\2\125\1\126"+
    "\1\127\1\125\1\0\1\120\2\0\1\130\6\125\1\131"+
    "\1\125\1\132\2\125\1\133\1\134\1\135\1\136\1\137"+
    "\2\125\2\120\2\125\1\120\2\125\2\120\6\125\14\120"+
    "\1\146\1\147\3\120\1\123\1\124\2\125\1\126\1\127"+
    "\1\125\1\0\1\120\2\0\1\130\6\125\1\131\1\125"+
    "\1\132\2\125\1\133\1\134\1\135\1\136\1\137\2\125"+
    "\2\120\2\125\1\120\2\125\2\120\6\125\10\120\1\102"+
    "\10\0\7\102\4\0\23\102\2\0\2\102\1\0\2\102"+
    "\2\0\7\102\20\0\1\150\1\151\73\0\1\112\7\0"+
    "\3\112\25\0\1\112\25\0\1\113\10\0\7\113\4\0"+
    "\23\113\2\0\2\113\1\0\2\113\2\0\7\113\7\0"+
    "\2\120\1\121\1\120\1\122\4\120\1\123\1\152\2\125"+
    "\1\126\1\127\1\125\1\0\1\120\2\0\1\130\6\125"+
    "\1\131\1\125\1\132\2\125\1\133\1\153\1\154\1\136"+
    "\1\137\1\125\1\155\2\120\2\125\1\120\2\125\2\120"+
    "\1\156\1\125\1\157\1\160\1\161\1\162\10\120\1\116"+
    "\10\0\7\116\4\0\23\116\2\0\2\116\1\0\2\116"+
    "\2\0\7\116\56\0\1\163\1\164\36\0\1\125\1\165"+
    "\5\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\4\125\1\166\2\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\167\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\3\125\1\170\3\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\3\125\1\171\3\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\1\125\1\172\5\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\173\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\1\125\1\174\5\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\175\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\7\125\1\176"+
    "\13\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\177\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\21\125\1\200"+
    "\1\125\2\0\2\125\1\0\1\125\1\201\2\0\6\125"+
    "\10\0\20\140\2\0\54\140\10\202\1\141\7\202\2\203"+
    "\1\141\25\202\1\141\3\202\1\204\21\202\20\140\2\0"+
    "\25\140\1\205\26\140\11\0\1\125\1\206\5\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\22\0"+
    "\1\207\100\0\1\210\71\0\4\125\1\211\2\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\212\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\7\125\1\213"+
    "\13\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\4\125\1\214\2\125\4\0\20\125\1\215\2\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\12\125\1\216\6\125\1\217\1\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\1\125\1\220"+
    "\21\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\7\125\4\0\5\125\1\221\15\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\12\125\1\222"+
    "\10\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\4\125\1\223\2\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\20\0\1\163\7\0\3\163\25\0"+
    "\1\163\3\0\1\224\70\0\1\225\37\0\2\125\1\226"+
    "\4\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\5\125\1\227\1\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\10\125\1\230\12\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\7\125\1\231\13\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\1\125\1\232\21\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\4\125\1\126\2\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\7\125\1\233\13\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\10\125\1\234\12\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\4\125\1\133"+
    "\2\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\12\125\1\235\10\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\4\125\1\236\16\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\6\125\1\237\14\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\3\125\1\240\17\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\10\0\20\202\2\0\54\202\10\0\1\203\7\0"+
    "\3\203\25\0\1\203\3\0\1\241\21\0\20\202\2\0"+
    "\10\202\1\242\43\202\20\140\2\0\5\140\1\243\21\140"+
    "\1\243\24\140\11\0\7\125\4\0\2\125\1\244\20\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\23\0\1\245"+
    "\100\0\1\246\70\0\5\125\1\247\1\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\4\125"+
    "\1\133\2\125\4\0\23\125\2\0\2\125\1\0\1\250"+
    "\1\125\2\0\6\125\21\0\7\125\4\0\12\125\1\251"+
    "\10\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\5\125\1\252\1\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\23\125\2\0"+
    "\2\125\1\0\1\125\1\253\2\0\6\125\21\0\7\125"+
    "\4\0\7\125\1\254\13\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\4\125\1\255\2\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\3\125"+
    "\1\256\3\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\12\125\1\257\10\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\3\125\1\260\17\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\42\0\1\261\72\0\1\262\21\0\1\262"+
    "\35\0\3\125\1\263\3\125\4\0\23\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\1\125\1\264\5\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\1\125\1\265\5\125\4\0\23\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\4\125\1\266\2\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\1\267\6\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\17\125\1\270"+
    "\3\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\7\125\4\0\11\125\1\271\11\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\20\125\1\272"+
    "\2\125\2\0\2\125\1\0\2\125\2\0\6\125\21\0"+
    "\1\125\1\273\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\3\125\1\274\3\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\6\125\42\0"+
    "\1\275\43\0\20\202\2\0\11\202\1\276\42\202\12\140"+
    "\1\277\5\140\2\0\24\140\1\277\27\140\11\0\7\125"+
    "\4\0\3\125\1\300\17\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\24\0\1\301\72\0\1\125\1\302\5\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\4\125\1\303\4\125\1\271\11\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\16\125\1\304\4\125\2\0\2\125\1\0\2\125"+
    "\2\0\1\305\1\125\1\306\1\307\1\310\1\125\21\0"+
    "\1\125\1\311\5\125\4\0\23\125\2\0\2\125\1\0"+
    "\2\125\2\0\2\125\1\312\3\125\21\0\7\125\4\0"+
    "\23\125\2\0\2\125\1\0\2\125\2\0\1\125\1\313"+
    "\4\125\21\0\7\125\4\0\4\125\1\314\16\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\20\125\1\315\2\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\23\125\2\0\2\125\1\0"+
    "\1\220\1\125\2\0\6\125\21\0\3\125\1\316\3\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\43\0\1\317\54\0\1\320\33\0\1\320\40\0\4\125"+
    "\1\321\2\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\4\125\1\322\2\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\4\125\1\323\16\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\1\125\1\324\5\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\1\325\20\0\7\125\4\0\12\125\1\326\10\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\3\125\1\327"+
    "\3\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\6\125\1\330\14\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\2\125\1\331\20\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\4\125\1\332\2\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\43\0\1\333\42\0"+
    "\20\202\2\0\33\202\1\334\20\202\20\140\2\0\4\140"+
    "\1\141\23\140\1\141\23\140\15\0\1\335\71\0\7\125"+
    "\4\0\6\125\1\336\14\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\1\125\1\337\5\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\7\125\1\340\13\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\12\125\1\341\6\125"+
    "\1\342\1\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\1\125\1\343\21\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\5\125"+
    "\1\344\15\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\12\125\1\345\10\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\1\125"+
    "\1\311\21\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\20\125\1\346\2\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\3\125"+
    "\1\347\17\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\1\125\1\220\5\125\4\0\23\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\20\125"+
    "\1\343\2\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\65\0\1\350\46\0\1\163\23\0\1\163\34\0\7\125"+
    "\4\0\11\125\1\351\11\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\3\125\1\352\17\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\2\125\1\353\20\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\4\125\1\354\16\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\5\125"+
    "\1\355\1\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\7\125\1\355\13\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\1\125"+
    "\1\356\5\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\20\125\1\357\2\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\65\0\1\360"+
    "\20\0\12\202\1\361\5\202\2\0\54\202\11\0\7\125"+
    "\4\0\3\125\1\220\17\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\5\125\1\362\1\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\12\125\1\363\10\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\7\125\1\343\13\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\4\125"+
    "\1\364\2\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\3\125\1\365\3\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\12\125\1\366\10\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\20\125\1\220\2\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\3\125"+
    "\1\367\3\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\22\0\1\370\74\0\3\125\1\371\3\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\20\125\1\372\2\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\3\125"+
    "\1\373\17\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\21\125\1\374\1\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\1\125\1\234\5\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\4\125\1\375\16\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\3\125\1\376\3\125"+
    "\4\0\23\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\22\0\1\377\63\0\20\202\2\0\11\202\1\u0100\42\202"+
    "\11\0\7\125\4\0\21\125\1\u0101\1\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\4\125"+
    "\1\u0102\16\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\4\125\1\u0103\16\125\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\21\0\7\125\4\0\20\125"+
    "\1\u0104\2\125\2\0\2\125\1\0\2\125\2\0\6\125"+
    "\21\0\7\125\4\0\23\125\2\0\2\125\1\0\1\343"+
    "\1\125\2\0\6\125\21\0\7\125\4\0\12\125\1\u0105"+
    "\10\125\2\0\2\125\1\0\2\125\2\0\6\125\43\0"+
    "\1\u0106\53\0\7\125\4\0\7\125\1\u0107\13\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\21\125\1\u0108\1\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\4\125\1\u0109\16\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\13\125\1\u010a\7\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\4\125\1\u010b\2\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\43\0\1\u010c\42\0"+
    "\10\202\1\u0100\7\202\2\u010c\1\u0100\25\202\1\u0100\5\202"+
    "\1\u010d\17\202\11\0\7\125\4\0\7\125\1\315\13\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\1\125"+
    "\1\u010e\5\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\3\125\1\u010f\17\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\1\125"+
    "\1\343\5\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\4\125\1\220\2\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\20\0\1\u0106"+
    "\7\0\3\u0106\25\0\1\u0106\5\0\1\u0110\30\0\7\125"+
    "\4\0\12\125\1\u0111\10\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\6\125\1\375\14\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\5\125\1\u0112\15\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\1\125\1\u0113\5\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\1\125"+
    "\1\375\5\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\20\0\1\u010c\7\0\3\u010c\25\0\1\u010c"+
    "\5\0\1\u0114\17\0\10\202\1\u010d\7\202\2\u0114\1\u010d"+
    "\13\202\1\u0115\11\202\1\u010d\25\202\11\0\5\125\1\u0116"+
    "\1\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\3\125\1\u0117\3\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\20\0\1\u0110\7\0"+
    "\3\u0110\13\0\1\u0118\11\0\1\u0110\36\0\4\125\1\u0119"+
    "\2\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\6\125\1\u011a\14\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\4\125\1\u011b"+
    "\2\125\4\0\23\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\20\0\1\u0114\7\0\3\u0114\13\0\1\u011c\11\0"+
    "\1\u0114\25\0\20\202\2\0\3\202\1\u011d\50\202\11\0"+
    "\7\125\4\0\21\125\1\u011e\1\125\2\0\2\125\1\0"+
    "\2\125\2\0\6\125\21\0\7\125\4\0\12\125\1\u011f"+
    "\10\125\2\0\2\125\1\0\2\125\2\0\6\125\25\0"+
    "\1\u0120\71\0\7\125\4\0\13\125\1\u0121\7\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\21\0\7\125\4\0"+
    "\7\125\1\u0122\13\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\7\125\4\0\3\125\1\u0123\17\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\35\0\1\u0124\50\0"+
    "\20\202\2\0\3\202\1\u0125\50\202\11\0\7\125\4\0"+
    "\7\125\1\u0104\13\125\2\0\2\125\1\0\2\125\2\0"+
    "\6\125\21\0\4\125\1\343\2\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\10\0\20\u0120\2\0"+
    "\54\u0120\11\0\1\125\1\u0126\5\125\4\0\23\125\2\0"+
    "\2\125\1\0\2\125\2\0\6\125\10\0\11\u0127\7\125"+
    "\4\0\23\125\2\u0127\2\125\1\u0127\2\125\2\u0127\6\125"+
    "\10\u0127\11\0\7\125\4\0\22\125\1\u0128\2\0\2\125"+
    "\1\0\2\125\2\0\6\125\35\0\1\u0125\50\0\20\u0125"+
    "\2\0\54\u0125\11\0\4\125\1\u0129\2\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\4\125"+
    "\1\u012a\2\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\3\125\1\u012b\17\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\11\125\1\u012c\11\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\3\125\1\u012d\3\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\7\125\1\u012e\13\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\12\125\1\u012f\10\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\4\125"+
    "\1\u0130\2\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\7\125\4\0\13\125\1\u0131\7\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\1\125"+
    "\1\u0132\5\125\4\0\23\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\21\0\4\125\1\u0133\2\125\4\0\23\125"+
    "\2\0\2\125\1\0\2\125\2\0\6\125\21\0\7\125"+
    "\4\0\3\125\1\u0134\17\125\2\0\2\125\1\0\2\125"+
    "\2\0\6\125\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15562];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\2\1\6\11\1\1\2\11\1\1\1\11\1\1"+
    "\1\11\2\1\4\11\1\1\1\11\3\1\4\11\1\1"+
    "\11\11\1\1\4\11\1\1\2\11\2\1\1\11\3\1"+
    "\3\11\20\1\1\11\1\1\3\11\2\0\11\1\2\0"+
    "\16\1\1\0\3\1\2\0\13\1\2\0\13\1\1\0"+
    "\3\1\1\0\1\11\12\1\2\0\12\1\1\0\3\1"+
    "\1\0\15\1\2\0\4\1\1\11\5\1\1\0\1\1"+
    "\1\11\12\1\1\0\7\1\1\0\7\1\1\0\6\1"+
    "\1\0\6\1\1\0\5\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\7\1\1\0\2\1"+
    "\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 69: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 70: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 71: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 72: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 73: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 74: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 75: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 76: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 78: break;
          case 11: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 79: break;
          case 12: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 80: break;
          case 13: 
            { return EQUALS;
            } 
            // fall through
          case 81: break;
          case 14: 
            { return STAR;
            } 
            // fall through
          case 82: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 83: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 84: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 85: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 86: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 87: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 88: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 89: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 90: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 91: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 92: break;
          case 25: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 93: break;
          case 26: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 94: break;
          case 27: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 95: break;
          case 28: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 96: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 97: break;
          case 30: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 98: break;
          case 31: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 99: break;
          case 32: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 100: break;
          case 33: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 101: break;
          case 34: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 102: break;
          case 35: 
            { yypopState();
        // toString to fix comparisons of charsequence subsequences with string
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            yypushState(VERBATIM_START);
        }
        else if (yytext().toString().equals("algorithmic")) {
            yypushState(PSEUDOCODE);
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 103: break;
          case 36: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 104: break;
          case 37: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 105: break;
          case 38: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 106: break;
          case 39: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 107: break;
          case 40: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 108: break;
          case 41: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 109: break;
          case 42: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 43: 
            { // Pop current state
        yypopState();
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 111: break;
          case 44: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 112: break;
          case 45: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 113: break;
          case 46: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 114: break;
          case 47: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 115: break;
          case 48: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 116: break;
          case 49: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 117: break;
          case 50: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 118: break;
          case 51: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 119: break;
          case 52: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 120: break;
          case 53: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 121: break;
          case 54: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 122: break;
          case 55: 
            { return END_TOKEN;
            } 
            // fall through
          case 123: break;
          case 56: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 124: break;
          case 57: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 125: break;
          case 58: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 126: break;
          case 59: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 127: break;
          case 60: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 128: break;
          case 61: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 129: break;
          case 62: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 130: break;
          case 63: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 131: break;
          case 64: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 132: break;
          case 65: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 133: break;
          case 66: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 134: break;
          case 67: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 135: break;
          case 68: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
