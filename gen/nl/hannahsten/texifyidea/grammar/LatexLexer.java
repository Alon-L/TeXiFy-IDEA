/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.ArrayDeque;
import java.util.Deque;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int INLINE_VERBATIM_START = 14;
  public static final int INLINE_VERBATIM_PIPE = 16;
  public static final int INLINE_VERBATIM_EXCL_MARK = 18;
  public static final int INLINE_VERBATIM_QUOTES = 20;
  public static final int INLINE_VERBATIM_EQUALS = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\11\0\1\3\1\2\2\13\1\1\22\0\1\3\1\44\1\45\1\0\1\47\1\34\1\36\1\0\1\7\1\10"+
    "\1\40\21\0\1\50\1\46\1\50\1\0\1\24\32\22\1\4\1\6\1\5\3\0\1\32\1\14\1\30\1"+
    "\21\1\15\1\25\1\16\1\31\1\17\2\22\1\41\1\22\1\20\3\22\1\33\1\42\1\27\1\22"+
    "\1\37\1\22\1\26\2\22\1\11\1\43\1\12\7\0\1\23\32\0\1\35\337\0\1\35\177\0\13"+
    "\35\35\0\2\23\5\0\1\35\57\0\1\35\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\5\1\12\1\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\5\1\21\3\5\1\22\1\23"+
    "\1\1\1\24\1\25\1\26\1\27\1\30\1\22\2\1"+
    "\1\0\1\31\1\2\1\32\1\33\7\31\2\12\1\31"+
    "\1\21\1\34\1\35\5\31\1\35\2\31\1\36\6\31"+
    "\1\37\1\31\1\40\1\41\1\31\1\37\10\31\1\37"+
    "\2\31\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0267\0\u0290\0\u0267\0\u0267\0\u0267\0\u0267\0\u02b9\0\u02e2"+
    "\0\u0267\0\u0267\0\u01ec\0\u0267\0\u0267\0\u0267\0\u0267\0\u030b"+
    "\0\u0267\0\u0334\0\u035d\0\u0386\0\u0267\0\u0267\0\u0267\0\u0267"+
    "\0\u0267\0\u0267\0\u0267\0\u02b9\0\u02b9\0\u03af\0\u03d8\0\u0401"+
    "\0\u02b9\0\u02b9\0\u02b9\0\u02b9\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0401\0\u0520\0\u0549\0\u0572\0\u02b9\0\u02b9"+
    "\0\u02b9\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0520\0\u0668"+
    "\0\u0691\0\u047c\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u047c\0\u047c\0\u0802\0\u02b9\0\u082b\0\u0854"+
    "\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u047c\0\u0973"+
    "\0\u099c\0\u02b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\16\7\15\1\27\10\15\1\30\1\31"+
    "\1\32\1\15\1\33\2\15\4\34\1\35\2\15\2\16"+
    "\1\17\1\36\1\37\1\40\1\23\1\24\1\25\1\26"+
    "\1\16\7\15\1\27\10\15\1\30\1\31\1\32\1\15"+
    "\1\33\2\15\4\34\1\41\2\15\2\16\1\17\1\36"+
    "\1\37\1\42\1\23\1\24\1\25\1\26\1\16\7\15"+
    "\1\27\10\15\1\30\1\31\1\32\1\15\1\33\2\15"+
    "\4\34\1\31\2\15\2\16\1\17\1\36\1\37\1\43"+
    "\1\23\1\24\1\25\1\26\1\16\7\15\1\27\10\15"+
    "\1\30\1\31\1\32\1\15\1\33\2\15\4\34\1\35"+
    "\2\15\2\16\1\17\1\20\1\21\1\44\1\23\1\24"+
    "\1\25\1\45\1\16\7\15\1\27\10\15\1\30\1\31"+
    "\1\32\1\15\1\33\2\15\4\34\1\46\2\15\2\16"+
    "\1\17\1\20\1\21\1\44\1\23\1\24\1\25\1\26"+
    "\1\16\7\15\1\27\10\15\1\30\1\31\1\32\1\15"+
    "\1\33\2\15\4\34\1\41\2\15\2\16\1\17\1\20"+
    "\1\21\1\44\1\23\1\24\1\25\1\45\1\16\7\15"+
    "\1\27\10\15\1\30\1\31\1\32\1\15\1\33\2\15"+
    "\4\34\1\47\2\15\2\16\1\17\1\20\1\21\1\44"+
    "\1\23\1\24\1\25\1\26\1\16\7\15\1\27\10\15"+
    "\1\30\1\31\1\32\1\15\1\33\2\15\1\50\1\51"+
    "\1\52\1\53\1\31\1\15\1\54\2\27\10\54\1\27"+
    "\7\54\1\27\17\54\1\55\6\54\2\27\10\54\1\27"+
    "\7\54\1\27\20\54\1\55\5\54\2\27\10\54\1\27"+
    "\7\54\1\27\21\54\1\55\4\54\2\27\10\54\1\27"+
    "\7\54\1\27\22\54\1\55\2\54\1\56\13\0\7\56"+
    "\1\0\10\56\3\0\4\56\5\0\1\57\1\0\3\16"+
    "\7\0\1\16\36\0\3\16\7\0\1\16\34\0\1\60"+
    "\50\0\1\60\2\61\1\62\1\61\1\63\2\61\1\64"+
    "\3\61\1\0\1\65\1\66\5\67\1\0\1\70\7\67"+
    "\3\61\1\71\1\61\1\72\1\67\5\61\1\73\51\0"+
    "\1\74\2\0\45\74\1\75\2\61\1\62\1\61\1\63"+
    "\6\61\1\0\1\65\1\66\5\67\1\0\1\70\2\67"+
    "\1\76\4\67\3\61\1\71\1\61\1\72\1\67\5\61"+
    "\1\73\2\61\1\62\1\61\1\63\3\61\1\77\2\61"+
    "\1\0\1\65\1\66\5\67\1\0\1\70\7\67\3\61"+
    "\1\71\1\61\1\72\1\67\5\61\1\73\2\61\1\62"+
    "\1\61\1\63\1\100\1\61\1\64\3\61\1\0\1\65"+
    "\1\66\5\67\1\0\1\70\7\67\3\61\1\71\1\61"+
    "\1\72\1\67\5\61\1\73\2\61\1\62\1\61\1\63"+
    "\6\61\1\0\1\65\1\66\5\67\1\0\1\70\7\67"+
    "\3\61\1\71\1\61\1\72\1\67\5\61\1\73\1\56"+
    "\13\0\7\56\1\0\10\56\3\0\4\56\5\0\2\56"+
    "\10\0\1\101\2\0\7\56\1\0\10\56\3\0\4\56"+
    "\5\0\1\56\11\0\1\101\53\0\1\67\1\102\5\67"+
    "\1\0\10\67\3\0\1\67\1\0\2\67\22\0\4\67"+
    "\1\103\2\67\1\0\10\67\3\0\1\67\1\0\2\67"+
    "\22\0\7\67\1\0\10\67\3\0\1\67\1\0\2\67"+
    "\22\0\3\67\1\104\3\67\1\0\10\67\3\0\1\67"+
    "\1\0\2\67\22\0\1\67\1\105\5\67\1\0\10\67"+
    "\3\0\1\67\1\0\2\67\22\0\7\67\1\0\10\67"+
    "\3\0\1\67\1\0\1\67\1\106\6\0\1\74\2\0"+
    "\47\74\2\0\6\74\1\107\37\74\14\0\1\67\1\110"+
    "\5\67\1\0\10\67\3\0\1\67\1\0\2\67\22\0"+
    "\2\67\1\111\4\67\1\0\10\67\3\0\1\67\1\0"+
    "\2\67\22\0\5\67\1\112\1\67\1\0\10\67\3\0"+
    "\1\67\1\0\2\67\22\0\7\67\1\0\1\67\1\113"+
    "\6\67\3\0\1\67\1\0\2\67\22\0\7\67\1\0"+
    "\7\67\1\114\3\0\1\67\1\0\2\67\22\0\7\67"+
    "\1\0\3\67\1\115\4\67\3\0\1\67\1\0\2\67"+
    "\22\0\7\67\1\0\2\67\1\116\5\67\3\0\1\67"+
    "\1\0\2\67\22\0\3\67\1\117\3\67\1\0\10\67"+
    "\3\0\1\67\1\0\2\67\22\0\4\67\1\120\2\67"+
    "\1\0\10\67\3\0\1\67\1\0\2\67\22\0\1\121"+
    "\6\67\1\0\10\67\3\0\1\67\1\0\2\67\22\0"+
    "\3\67\1\122\3\67\1\0\10\67\3\0\1\67\1\0"+
    "\2\67\22\0\7\67\1\0\3\67\1\123\4\67\3\0"+
    "\1\67\1\0\2\67\22\0\4\67\1\124\2\67\1\0"+
    "\10\67\3\0\1\67\1\0\2\67\22\0\1\67\1\125"+
    "\5\67\1\0\10\67\3\0\1\67\1\0\2\67\22\0"+
    "\7\67\1\0\10\67\3\0\1\67\1\126\2\67\22\0"+
    "\4\67\1\127\2\67\1\0\10\67\3\0\1\67\1\0"+
    "\2\67\22\0\7\67\1\0\2\67\1\130\5\67\3\0"+
    "\1\67\1\0\2\67\22\0\7\67\1\0\10\67\3\0"+
    "\1\67\1\0\1\131\1\67\22\0\7\67\1\0\3\67"+
    "\1\132\4\67\3\0\1\67\1\0\2\67\22\0\3\67"+
    "\1\133\3\67\1\0\10\67\3\0\1\67\1\0\2\67"+
    "\22\0\7\67\1\0\4\67\1\134\3\67\3\0\1\67"+
    "\1\0\2\67\22\0\4\67\1\135\2\67\1\0\10\67"+
    "\3\0\1\67\1\0\2\67\22\0\7\67\1\0\5\67"+
    "\1\136\2\67\3\0\1\67\1\0\2\67\22\0\1\67"+
    "\1\137\5\67\1\0\10\67\3\0\1\67\1\0\2\67"+
    "\22\0\7\67\1\0\6\67\1\140\1\67\3\0\1\67"+
    "\1\0\2\67\22\0\7\67\1\0\7\67\1\141\3\0"+
    "\1\67\1\0\2\67\6\0\1\142\2\0\10\142\1\0"+
    "\7\67\1\0\10\67\3\142\1\67\1\142\2\67\6\142";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2501];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\12\1\1\11\24\1\2\11\2\1\1\0\4\11"+
    "\12\1\3\11\24\1\1\11\13\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[98];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();

  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 36: break;
          case 3: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return AMPERSAND;
            } 
            // fall through
          case 45: break;
          case 12: 
            { return STAR;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return NORMAL_TEXT_CHAR;
            } 
            // fall through
          case 47: break;
          case 14: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return M_OPEN_BRACKET;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return M_CLOSE_BRACKET;
            } 
            // fall through
          case 50: break;
          case 17: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 51: break;
          case 18: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 52: break;
          case 19: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 53: break;
          case 20: 
            { yypopState(); yypushState(INLINE_VERBATIM_PIPE); return OPEN_BRACE;
            } 
            // fall through
          case 54: break;
          case 21: 
            { yypopState(); yypushState(INLINE_VERBATIM_EXCL_MARK); return OPEN_BRACE;
            } 
            // fall through
          case 55: break;
          case 22: 
            { yypopState(); yypushState(INLINE_VERBATIM_QUOTES); return OPEN_BRACE;
            } 
            // fall through
          case 56: break;
          case 23: 
            { yypopState(); yypushState(INLINE_VERBATIM_EQUALS); return OPEN_BRACE;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 59: break;
          case 26: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 60: break;
          case 27: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 61: break;
          case 28: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 62: break;
          case 29: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return END_TOKEN;
            } 
            // fall through
          case 64: break;
          case 31: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 65: break;
          case 32: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
