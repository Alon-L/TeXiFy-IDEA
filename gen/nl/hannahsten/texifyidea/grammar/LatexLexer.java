/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import java.util.ArrayDeque;
import java.util.Deque;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int INLINE_VERBATIM_START = 22;
  public static final int INLINE_VERBATIM = 24;
  public static final int POSSIBLE_VERBATIM_BEGIN = 26;
  public static final int VERBATIM_OPTIONAL_ARG = 28;
  public static final int VERBATIM_START = 30;
  public static final int VERBATIM_END = 32;
  public static final int VERBATIM = 34;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 36;
  public static final int POSSIBLE_VERBATIM_END = 38;
  public static final int OFF = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\20\2\22\1\21\22\0\1\10\1\35\1\45\1\0\1\65\1\34\1\67\1\0\1\2\1"+
    "\3\1\62\21\0\1\66\1\42\1\66\1\0\1\24\1\47\3\17\1\57\1\46\2\17\1\51\2\17\1"+
    "\54\3\17\1\56\1\17\1\53\1\17\1\36\1\60\1\17\1\52\1\37\2\17\1\4\1\1\1\5\3\0"+
    "\1\32\1\11\1\30\1\16\1\12\1\25\1\13\1\31\1\14\2\17\1\50\1\64\1\15\1\43\1\40"+
    "\1\17\1\33\1\41\1\27\1\55\1\61\1\63\1\26\2\17\1\6\1\45\1\7\7\0\1\23\32\0\1"+
    "\44\337\0\1\44\177\0\13\44\35\0\2\23\5\0\1\44\57\0\1\44\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\2"+
    "\1\16\1\2\1\17\3\2\1\20\1\21\1\1\1\22"+
    "\1\2\1\23\1\24\1\25\1\26\3\27\1\30\2\27"+
    "\1\31\1\32\1\33\1\34\1\35\2\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\36\1\44\1\45\1\46\21\44"+
    "\1\13\1\0\1\13\1\47\1\44\1\50\1\51\1\52"+
    "\4\0\10\44\1\53\10\44\1\0\2\13\1\44\4\0"+
    "\1\44\1\54\2\44\1\53\12\44\2\0\2\13\1\44"+
    "\1\0\1\55\2\0\16\44\1\56\2\44\1\57\2\0"+
    "\2\13\1\60\3\0\1\61\11\44\1\62\3\44\1\57"+
    "\2\0\1\13\1\63\1\0\11\44\1\0\1\13\1\0"+
    "\10\44\1\0\1\13\1\0\5\44\1\0\1\13\1\0"+
    "\2\44\1\57\2\44\1\0\1\13\1\0\4\44\1\0"+
    "\1\13\1\64\2\44\1\0\1\65\1\44\1\66\1\44"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0508\0\u0508\0\u0508\0\u0508\0\u0508\0\u0540\0\u0508\0\u0578"+
    "\0\u0508\0\u0498\0\u0508\0\u05b0\0\u0508\0\u05e8\0\u0508\0\u0620"+
    "\0\u0658\0\u0690\0\u0508\0\u0508\0\u0508\0\u0508\0\u06c8\0\u0508"+
    "\0\u0508\0\u0508\0\u0508\0\u0498\0\u0690\0\u0508\0\u0508\0\u0578"+
    "\0\u05b0\0\u0508\0\u0700\0\u0508\0\u0508\0\u0508\0\u0508\0\u0738"+
    "\0\u0508\0\u0508\0\u0770\0\u07a8\0\u0508\0\u07e0\0\u0508\0\u0508"+
    "\0\u0508\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0508\0\u0c78\0\u0508"+
    "\0\u0508\0\u0508\0\u0cb0\0\u0ce8\0\u07e0\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0888\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u0888\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u0508\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u0888\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u0888\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u0888\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u0888\0\u1ea0\0\u1ed8\0\u1f10\0\u0508"+
    "\0\u1f48\0\u1f80\0\u1fb8\0\u0508\0\u1ff0\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u0888\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u0508\0\u2b18\0\u0888";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\7\26\3\36\1\37\10\26\1\40\1\41\4\26"+
    "\1\41\1\26\1\37\1\41\14\26\1\42\2\26\1\43"+
    "\1\44\1\45\1\26\1\46\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\7\26\3\36\1\37\10\26\1\40"+
    "\1\41\4\26\1\41\1\26\1\37\1\41\14\26\1\42"+
    "\2\26\1\47\1\44\1\45\1\26\1\50\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\7\26\3\36\1\37"+
    "\10\26\1\40\1\41\4\26\1\41\1\26\1\37\1\41"+
    "\14\26\1\42\2\26\1\37\1\44\1\45\1\26\1\51"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\7\26"+
    "\3\36\1\37\10\26\1\40\1\41\4\26\1\41\1\26"+
    "\1\37\1\41\14\26\1\42\2\26\1\43\1\44\1\45"+
    "\1\26\1\52\1\30\1\31\1\32\1\33\1\34\1\53"+
    "\1\36\7\26\3\36\1\37\10\26\1\40\1\41\4\26"+
    "\1\41\1\26\1\37\1\41\14\26\1\42\2\26\1\54"+
    "\1\44\1\45\1\26\1\52\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\7\26\3\36\1\37\10\26\1\40"+
    "\1\41\4\26\1\41\1\26\1\37\1\41\14\26\1\42"+
    "\2\26\1\47\1\44\1\45\1\26\1\52\1\30\1\31"+
    "\1\32\1\33\1\34\1\53\1\36\7\26\3\36\1\37"+
    "\10\26\1\40\1\41\4\26\1\41\1\26\1\37\1\41"+
    "\14\26\1\42\2\26\1\55\1\44\1\45\1\26\1\52"+
    "\1\30\1\31\1\32\1\33\1\34\1\56\1\36\7\26"+
    "\3\36\1\37\10\26\1\40\1\41\4\26\1\41\1\26"+
    "\1\37\1\41\14\26\1\42\2\26\1\37\1\44\1\45"+
    "\1\26\1\57\1\30\1\31\1\32\1\33\1\60\1\61"+
    "\1\36\7\26\3\36\1\37\10\26\1\40\1\41\4\26"+
    "\1\41\1\26\1\37\1\41\14\26\1\42\2\26\1\55"+
    "\1\44\1\45\1\26\1\52\1\30\1\31\1\32\1\33"+
    "\1\62\1\35\1\36\7\26\3\36\1\37\10\26\1\40"+
    "\1\41\4\26\1\41\1\26\1\37\1\41\14\26\1\42"+
    "\2\26\1\37\1\44\1\45\1\26\1\57\1\30\1\31"+
    "\1\32\1\33\1\60\1\63\1\36\7\26\3\36\1\37"+
    "\10\26\1\40\1\41\4\26\1\41\1\26\1\37\1\41"+
    "\14\26\1\42\2\26\1\55\1\44\1\45\1\64\1\65"+
    "\4\66\1\67\1\66\1\36\7\64\3\36\1\66\10\64"+
    "\1\70\1\66\4\64\1\66\1\64\2\66\17\64\1\66"+
    "\1\71\1\66\70\72\1\73\1\52\1\30\1\31\1\32"+
    "\1\33\1\34\1\53\1\36\7\73\3\36\1\37\10\73"+
    "\1\40\1\41\4\73\1\41\1\73\1\37\1\41\17\73"+
    "\1\37\1\44\1\45\1\26\1\52\1\30\1\31\1\74"+
    "\1\75\1\34\1\35\1\36\7\26\3\36\1\37\10\26"+
    "\1\40\1\41\4\26\1\41\1\26\1\37\1\41\14\26"+
    "\1\42\2\26\1\37\1\44\1\45\1\26\1\52\1\30"+
    "\1\31\1\32\1\33\1\34\1\76\1\36\7\26\3\36"+
    "\1\37\10\26\1\40\1\41\4\26\1\41\1\26\1\37"+
    "\1\41\14\26\1\42\2\26\1\37\1\44\1\45\1\26"+
    "\1\52\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\7\26\3\36\1\37\10\26\1\40\1\41\4\26\1\41"+
    "\1\26\1\37\1\41\14\26\1\42\2\26\1\37\1\44"+
    "\1\45\1\77\1\100\6\77\1\36\7\77\3\36\45\77"+
    "\4\101\1\102\3\101\1\103\7\101\3\103\45\101\1\104"+
    "\5\105\1\34\2\105\7\104\4\105\10\104\2\105\4\104"+
    "\1\105\1\104\2\105\17\104\3\105\34\77\1\106\33\77"+
    "\1\26\10\0\7\26\4\0\10\26\2\0\4\26\1\0"+
    "\1\26\2\0\17\26\3\0\2\107\1\110\1\107\1\111"+
    "\4\107\1\112\1\113\2\114\1\115\2\114\1\0\1\107"+
    "\2\0\1\116\6\114\1\117\2\107\4\114\1\107\1\114"+
    "\2\107\1\120\1\114\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\107\2\114\3\107"+
    "\100\0\1\36\7\0\3\36\45\0\10\133\1\40\7\133"+
    "\2\134\1\40\12\133\1\135\32\133\6\0\1\136\61\0"+
    "\4\107\1\111\4\107\1\112\1\113\2\114\1\115\2\114"+
    "\1\0\1\107\2\0\1\116\2\114\1\137\3\114\1\117"+
    "\2\107\4\114\1\107\1\114\2\107\1\120\1\114\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\107\2\114\6\107\1\47\1\111\4\107\1\112"+
    "\1\113\2\114\1\115\2\114\1\0\1\107\2\0\1\116"+
    "\6\114\1\117\2\107\4\114\1\107\1\114\2\107\1\120"+
    "\1\114\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\107\2\114\5\107\1\110\1\107"+
    "\1\111\1\140\3\107\1\112\1\113\2\114\1\115\2\114"+
    "\1\0\1\107\2\0\1\116\6\114\1\117\2\107\4\114"+
    "\1\107\1\114\2\107\1\120\1\114\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\107"+
    "\2\114\7\107\1\111\4\107\1\112\1\113\2\114\1\115"+
    "\2\114\1\0\1\107\2\0\1\116\6\114\1\117\2\107"+
    "\4\114\1\107\1\114\2\107\1\120\1\114\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\107\2\114\7\107\1\141\1\142\3\107\1\112\1\113"+
    "\2\114\1\115\2\114\1\0\1\107\2\0\1\116\6\114"+
    "\1\117\2\107\4\114\1\107\1\114\2\107\1\120\1\114"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\107\2\114\3\107\1\73\10\0\7\73"+
    "\4\0\10\73\2\0\4\73\1\0\1\73\2\0\17\73"+
    "\14\0\1\143\1\144\65\0\1\103\7\0\3\103\45\0"+
    "\1\104\10\0\7\104\4\0\10\104\2\0\4\104\1\0"+
    "\1\104\2\0\17\104\13\0\1\145\7\0\3\145\12\0"+
    "\1\146\43\0\1\114\1\147\5\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\4\114\1\150\2\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\3\114\1\122\10\114\1\0\2\114\14\0"+
    "\7\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\1\114\1\151\5\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\3\114\1\152\3\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\1\114\1\153\5\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\154\2\0\7\114\1\155"+
    "\4\114\1\0\2\114\14\0\1\114\1\126\5\114\4\0"+
    "\10\114\2\0\3\114\1\156\1\0\1\114\2\0\3\114"+
    "\1\122\10\114\1\0\2\114\14\0\7\114\4\0\1\114"+
    "\1\157\6\114\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\7\114\4\0\5\114\1\160\2\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\1\114\1\161\5\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\7\114"+
    "\4\0\10\114\2\0\4\114\1\0\1\162\2\0\14\114"+
    "\1\0\2\114\14\0\7\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\3\114\1\122\10\114\1\0\2\114"+
    "\14\0\7\114\4\0\7\114\1\163\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\4\114\1\164"+
    "\2\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\2\114\1\165\11\114\1\0\2\114\14\0\4\114\1\166"+
    "\2\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\1\114\1\167\5\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\3\0\20\133\2\0\46\133\10\0\1\134\7\0"+
    "\3\134\12\0\1\170\32\0\10\133\1\135\7\133\2\170"+
    "\1\135\13\133\1\171\1\133\1\172\27\133\11\0\1\114"+
    "\1\173\5\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\15\0\1\174\72\0\1\175"+
    "\62\0\1\146\7\0\3\146\13\0\1\176\1\0\1\177"+
    "\40\0\2\114\1\200\4\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\5\114"+
    "\1\201\1\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\1\202"+
    "\1\114\14\0\7\114\4\0\1\114\1\203\6\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\4\114\1\115\2\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\7\114\1\204\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\4\114\1\205\2\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\7\114\4\0\3\114\1\206\4\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\3\114"+
    "\1\207\3\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\2\114\1\210\1\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\7\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\211\2\0\14\114\1\0\2\114\14\0\7\114"+
    "\4\0\10\114\2\0\4\114\1\0\1\212\2\0\14\114"+
    "\1\0\2\114\14\0\5\114\1\213\1\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\7\114\4\0\10\114\2\0\3\114\1\214\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\3\114\1\215\4\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\7\114\4\0\7\114\1\216"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\13\0\1\170\7\0\3\170\13\0\1\217\1\0\1\220"+
    "\27\0\12\133\1\221\5\133\2\0\66\133\2\0\10\133"+
    "\1\222\35\133\11\0\7\114\4\0\2\114\1\223\5\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\16\0\1\224\72\0\1\225\63\0\1\226\107\0\1\227"+
    "\46\0\3\114\1\230\3\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\1\114"+
    "\1\231\5\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\4\114\1\232\2\114"+
    "\4\0\10\114\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\7\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\1\114\1\233\12\114\1\0\2\114"+
    "\14\0\7\114\4\0\4\114\1\234\3\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\3\114"+
    "\1\235\3\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\2\114\1\236\11\114"+
    "\1\0\2\114\14\0\1\114\1\237\5\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\7\114\4\0\10\114\2\0\2\114\1\157\1\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\7\114"+
    "\4\0\4\114\1\240\3\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\1\241\2\114\1\242"+
    "\1\243\1\114\1\244\1\114\1\245\3\114\1\0\2\114"+
    "\14\0\1\114\1\246\5\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\3\114\1\247\10\114\1\0\2\114"+
    "\14\0\3\114\1\250\3\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\1\251"+
    "\6\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\15\0\1\252\107\0\1\253\35\0"+
    "\20\133\2\0\15\133\1\254\50\133\2\0\11\133\1\255"+
    "\34\133\11\0\7\114\4\0\3\114\1\256\4\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\17\0"+
    "\1\257\112\0\1\260\63\0\1\261\45\0\4\114\1\262"+
    "\2\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\4\114\1\263\2\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\1\114\1\264\5\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\2\114\1\265\11\114\1\0\2\114\14\0\7\114\4\0"+
    "\3\114\1\266\4\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\4\114\1\267\2\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\1\114\1\157\5\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\6\114\1\270\1\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\1\114\1\271"+
    "\5\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\7\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\272\2\0\7\114\1\273\4\114\1\0"+
    "\2\114\14\0\7\114\4\0\1\114\1\274\6\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\5\114\1\275\2\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\276\2\0\14\114\1\0"+
    "\2\114\14\0\7\114\4\0\7\114\1\277\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\7\114"+
    "\4\0\1\114\1\246\6\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\2\114\1\274\11\114"+
    "\1\0\2\114\14\0\7\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\300\2\114\42\0\1\301"+
    "\63\0\1\302\34\0\10\133\1\254\7\133\2\301\1\254"+
    "\15\133\1\172\47\133\2\0\17\133\1\303\26\133\15\0"+
    "\1\304\62\0\1\260\7\0\3\260\15\0\1\177\70\0"+
    "\1\305\37\0\7\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\13\114\1\306\1\0\2\114\14\0\7\114"+
    "\4\0\2\114\1\307\5\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\2\114\1\157\11\114"+
    "\1\0\2\114\14\0\3\114\1\310\3\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\7\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\2\114\1\311\11\114\1\0\2\114\14\0\7\114"+
    "\4\0\3\114\1\157\4\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\5\114\1\312\1\114"+
    "\4\0\10\114\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\7\114\4\0\7\114\1\274\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\4\114\1\313\2\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\3\114\1\314"+
    "\3\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\7\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\315\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\10\114\2\0\4\114\1\0\1\316\2\0"+
    "\14\114\1\0\2\114\13\0\1\301\7\0\3\301\15\0"+
    "\1\220\70\0\1\317\26\0\12\133\1\320\5\133\2\0"+
    "\46\133\12\0\1\321\66\0\3\114\1\322\3\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\7\114\4\0\3\114\1\323\4\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\10\114\2\0\4\114\1\0\1\324\2\0"+
    "\14\114\1\0\2\114\14\0\3\114\1\325\3\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\7\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\7\114\1\326\4\114\1\0\2\114\14\0"+
    "\7\114\4\0\4\114\1\327\3\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\2\114\1\330"+
    "\11\114\1\0\2\114\14\0\7\114\4\0\10\114\2\0"+
    "\2\114\1\274\1\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\7\114\4\0\4\114\1\331\3\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\15\0"+
    "\1\332\55\0\20\133\2\0\11\133\1\333\34\133\33\0"+
    "\1\334\45\0\7\114\4\0\7\114\1\335\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\7\114"+
    "\4\0\4\114\1\336\3\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\14\0\4\114\1\157\2\114"+
    "\4\0\10\114\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\4\114\1\337\2\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\7\114\4\0\7\114\1\236\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\3\114\1\340\4\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\14\0\1\114\1\274\5\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\2\114\14\0\1\114\1\341\5\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\36\0"+
    "\1\342\34\0\10\133\1\333\7\133\2\342\1\333\17\133"+
    "\1\343\25\133\10\0\1\334\7\0\3\334\17\0\1\344"+
    "\36\0\7\114\4\0\10\114\2\0\4\114\1\0\1\345"+
    "\2\0\14\114\1\0\2\114\14\0\7\114\4\0\5\114"+
    "\1\346\2\114\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\14\0\1\114\1\347\5\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\14\114\1\0\2\114"+
    "\14\0\3\114\1\350\3\114\4\0\10\114\2\0\4\114"+
    "\1\0\1\114\2\0\14\114\1\0\2\114\14\0\5\114"+
    "\1\351\1\114\4\0\10\114\2\0\4\114\1\0\1\114"+
    "\2\0\14\114\1\0\2\114\13\0\1\342\7\0\3\342"+
    "\17\0\1\352\25\0\10\133\1\343\7\133\2\352\1\343"+
    "\20\133\1\353\24\133\10\0\1\344\7\0\3\344\20\0"+
    "\1\354\35\0\4\114\1\355\2\114\4\0\10\114\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\7\114\4\0\6\114\1\356\1\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\357\2\0\14\114\1\0"+
    "\2\114\14\0\7\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\7\114\1\360\4\114\1\0\2\114\13\0"+
    "\1\352\7\0\3\352\20\0\1\361\24\0\20\133\2\0"+
    "\3\133\1\362\42\133\15\0\1\363\63\0\7\114\4\0"+
    "\10\114\2\0\4\114\1\0\1\114\2\0\14\114\1\0"+
    "\1\114\1\364\14\0\7\114\4\0\7\114\1\365\2\0"+
    "\4\114\1\0\1\114\2\0\14\114\1\0\2\114\14\0"+
    "\4\114\1\274\2\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\7\114\1\330\2\0\4\114\1\0\1\114\2\0\14\114"+
    "\1\0\2\114\30\0\1\366\42\0\20\133\2\0\3\133"+
    "\1\367\42\133\20\363\2\0\46\363\11\0\1\114\1\370"+
    "\5\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\3\0\11\371\7\114\4\0\10\114"+
    "\2\371\4\114\1\371\1\114\2\371\14\114\1\371\2\114"+
    "\3\371\25\0\1\367\42\0\20\367\2\0\46\367\11\0"+
    "\4\114\1\372\2\114\4\0\10\114\2\0\4\114\1\0"+
    "\1\114\2\0\14\114\1\0\2\114\14\0\7\114\4\0"+
    "\3\114\1\373\4\114\2\0\4\114\1\0\1\114\2\0"+
    "\14\114\1\0\2\114\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\4\11\1\1"+
    "\4\11\2\1\2\11\2\1\1\11\1\1\4\11\1\1"+
    "\2\11\2\1\1\11\1\1\3\11\22\1\1\0\1\1"+
    "\1\11\1\1\3\11\4\0\21\1\1\0\3\1\4\0"+
    "\17\1\2\0\3\1\1\0\1\11\2\0\22\1\2\0"+
    "\3\1\3\0\16\1\1\11\2\0\1\1\1\11\1\0"+
    "\11\1\1\0\1\1\1\0\10\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\4\1\1\0\4\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return NORMAL_TEXT_CHAR;
            } 
            // fall through
          case 57: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 61: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 65: break;
          case 11: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 66: break;
          case 12: 
            { return STAR;
            } 
            // fall through
          case 67: break;
          case 13: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 68: break;
          case 14: 
            { return AMPERSAND;
            } 
            // fall through
          case 69: break;
          case 15: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 70: break;
          case 16: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 71: break;
          case 17: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 72: break;
          case 18: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 73: break;
          case 19: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 74: break;
          case 20: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 75: break;
          case 21: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 76: break;
          case 22: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 77: break;
          case 23: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 78: break;
          case 24: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 79: break;
          case 25: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 80: break;
          case 26: 
            { yypopState();
        // toString to fix comparisons of charsequence subsequences with string
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            yypushState(VERBATIM_START);
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 81: break;
          case 27: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 82: break;
          case 28: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 83: break;
          case 29: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 84: break;
          case 30: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 85: break;
          case 31: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 86: break;
          case 32: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 87: break;
          case 33: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 34: 
            { // Pop current state
        yypopState();
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 89: break;
          case 35: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 91: break;
          case 37: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 92: break;
          case 38: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 93: break;
          case 39: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 94: break;
          case 40: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 97: break;
          case 43: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 98: break;
          case 44: 
            { return END_TOKEN;
            } 
            // fall through
          case 99: break;
          case 45: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 100: break;
          case 46: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 101: break;
          case 47: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 102: break;
          case 48: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 103: break;
          case 49: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 104: break;
          case 50: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 105: break;
          case 51: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 106: break;
          case 52: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 107: break;
          case 53: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 109: break;
          case 55: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
