/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import java.util.ArrayDeque;
import java.util.Deque;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int INLINE_VERBATIM_START = 22;
  public static final int INLINE_VERBATIM = 24;
  public static final int POSSIBLE_VERBATIM_BEGIN = 26;
  public static final int VERBATIM_OPTIONAL_ARG = 28;
  public static final int VERBATIM_START = 30;
  public static final int VERBATIM_END = 32;
  public static final int VERBATIM = 34;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 36;
  public static final int POSSIBLE_VERBATIM_END = 38;
  public static final int PSEUDOCODE = 40;
  public static final int POSSIBLE_PSEUDOCODE_END = 42;
  public static final int OFF = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\20\2\22\1\21\22\0\1\35\1\34\1\72\1\0\1\65\1\41\1\70\1\0\1\2\1"+
    "\3\1\62\1\0\1\71\15\0\1\17\1\0\1\66\1\44\1\67\1\0\1\24\1\50\3\17\1\37\1\47"+
    "\2\17\1\52\2\17\1\55\3\17\1\57\1\17\1\54\1\17\1\36\1\60\1\17\1\53\1\40\2\17"+
    "\1\4\1\1\1\5\1\0\1\17\1\0\1\32\1\11\1\30\1\16\1\12\1\25\1\13\1\31\1\14\2\17"+
    "\1\51\1\64\1\15\1\45\1\42\1\17\1\33\1\43\1\27\1\56\1\61\1\63\1\26\2\17\1\6"+
    "\1\73\1\7\7\0\1\23\32\0\1\46\337\0\1\46\177\0\13\46\35\0\2\23\5\0\1\46\57"+
    "\0\1\46\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\1\1\31\1\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\45\1\46\1\47\1\50\1\51\1\52\1\2"+
    "\1\53\1\45\1\54\1\55\1\56\11\54\1\14\1\57"+
    "\1\14\1\60\1\54\1\61\1\62\1\63\2\0\11\54"+
    "\2\0\11\54\1\57\1\0\1\57\1\14\1\54\2\0"+
    "\5\54\1\64\5\54\2\0\1\54\1\65\6\54\1\0"+
    "\1\57\1\14\1\54\1\0\1\66\1\67\2\54\1\64"+
    "\6\54\2\0\6\54\1\70\1\0\1\57\1\14\1\71"+
    "\1\0\5\54\1\72\7\54\2\0\1\73\5\54\1\70"+
    "\1\0\1\57\1\74\2\54\1\75\7\54\1\0\5\54"+
    "\1\0\1\57\6\54\1\0\4\54\1\70\1\0\1\57"+
    "\5\54\1\0\4\54\1\0\1\57\2\54\1\0\2\54"+
    "\1\0\1\57\2\54\1\0\2\54\1\0\1\57\2\54"+
    "\1\76\2\54\1\0\1\77\1\54\1\100\1\54\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u0618"+
    "\0\u05dc\0\u05dc\0\u0654\0\u05dc\0\u0564\0\u05dc\0\u0690\0\u0690"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u06cc\0\u05dc\0\u0708\0\u0744"+
    "\0\u0780\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u07bc\0\u05dc\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u07f8\0\u05dc\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u0834\0\u05dc\0\u05dc\0\u0870\0\u08ac\0\u05dc"+
    "\0\u08e8\0\u0924\0\u0960\0\u05dc\0\u05dc\0\u05dc\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u05dc\0\u0c6c\0\u05dc\0\u05dc\0\u05dc\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u0a14\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u0a14\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u05dc\0\u0a14"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u0a14\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u0a14\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u0a14\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u05dc\0\u22b0\0\u22ec\0\u05dc"+
    "\0\u2328\0\u2364\0\u0a14\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670"+
    "\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u0a14\0\u29b8\0\u29f4"+
    "\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u05dc\0\u3228\0\u0a14";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\7\30\3\40\1\41\10\30\1\42\1\40\3\30"+
    "\1\43\2\30\1\44\1\30\1\41\13\30\1\45\2\30"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\30"+
    "\1\55\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\7\30\3\40\1\41\10\30\1\42\1\40\3\30\1\43"+
    "\2\30\1\44\1\30\1\41\13\30\1\45\2\30\1\56"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\30\1\57"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\7\30"+
    "\3\40\1\41\10\30\1\42\1\40\3\30\1\43\2\30"+
    "\1\44\1\30\1\41\13\30\1\45\2\30\1\41\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\30\1\60\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\7\30\3\40"+
    "\1\41\10\30\1\42\1\40\3\30\1\43\2\30\1\44"+
    "\1\30\1\41\13\30\1\45\2\30\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\30\1\61\1\32\1\33"+
    "\1\34\1\35\1\36\1\62\1\40\7\30\3\40\1\41"+
    "\10\30\1\42\1\40\3\30\1\43\2\30\1\44\1\30"+
    "\1\41\13\30\1\45\2\30\1\63\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\30\1\61\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\7\30\3\40\1\41\10\30"+
    "\1\42\1\40\3\30\1\43\2\30\1\44\1\30\1\41"+
    "\13\30\1\45\2\30\1\56\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\30\1\61\1\32\1\33\1\34\1\35"+
    "\1\36\1\62\1\40\7\30\3\40\1\41\10\30\1\42"+
    "\1\40\3\30\1\43\2\30\1\44\1\30\1\41\13\30"+
    "\1\45\2\30\1\64\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\30\1\61\1\32\1\33\1\34\1\35\1\36"+
    "\1\65\1\40\7\30\3\40\1\41\10\30\1\42\1\40"+
    "\3\30\1\43\2\30\1\44\1\30\1\41\13\30\1\45"+
    "\2\30\1\41\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\30\1\66\1\32\1\33\1\34\1\35\1\67\1\70"+
    "\1\40\7\30\3\40\1\41\10\30\1\42\1\40\3\30"+
    "\1\43\2\30\1\44\1\30\1\41\13\30\1\45\2\30"+
    "\1\64\1\47\1\50\1\51\1\52\1\53\1\54\1\30"+
    "\1\61\1\32\1\33\1\34\1\35\1\71\1\37\1\40"+
    "\7\30\3\40\1\41\10\30\1\42\1\40\3\30\1\43"+
    "\2\30\1\44\1\30\1\41\13\30\1\45\2\30\1\41"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\30\1\66"+
    "\1\32\1\33\1\34\1\35\1\67\1\72\1\40\7\30"+
    "\3\40\1\41\10\30\1\42\1\40\3\30\1\43\2\30"+
    "\1\44\1\30\1\41\13\30\1\45\2\30\1\64\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\6\73\1\74\65\73"+
    "\74\75\1\76\1\61\1\32\1\33\1\34\1\35\1\36"+
    "\1\62\1\40\7\76\3\40\1\41\10\76\1\42\1\40"+
    "\3\76\1\43\2\76\1\44\1\76\1\41\16\76\1\41"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\30\1\61"+
    "\1\32\1\33\1\77\1\100\1\36\1\37\1\40\7\30"+
    "\3\40\1\41\10\30\1\42\1\40\3\30\1\43\2\30"+
    "\1\44\1\30\1\41\13\30\1\45\2\30\1\41\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\30\1\61\1\32"+
    "\1\33\1\34\1\35\1\36\1\101\1\40\7\30\3\40"+
    "\1\41\10\30\1\42\1\40\3\30\1\43\2\30\1\44"+
    "\1\30\1\41\13\30\1\45\2\30\1\41\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\30\1\61\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\7\30\3\40\1\41"+
    "\10\30\1\42\1\40\3\30\1\43\2\30\1\44\1\30"+
    "\1\41\13\30\1\45\2\30\1\41\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\102\1\103\6\102\1\40\7\102"+
    "\3\40\12\102\1\40\36\102\4\104\1\105\3\104\1\106"+
    "\7\104\3\106\12\104\1\106\36\104\1\107\5\110\1\36"+
    "\2\110\7\107\4\110\10\107\2\110\3\107\1\110\2\107"+
    "\1\110\1\107\1\110\16\107\7\110\1\30\1\111\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\7\30\3\40"+
    "\1\41\10\30\1\42\1\40\3\30\1\43\2\30\1\44"+
    "\1\30\1\41\13\30\1\45\2\30\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\112\1\61\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\7\112\3\40\1\41"+
    "\10\112\1\42\1\40\3\112\1\43\2\112\1\44\1\112"+
    "\1\41\16\112\1\41\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\41\102\1\113\32\102\1\30\10\0\7\30\4\0"+
    "\10\30\2\0\3\30\1\0\2\30\1\0\1\30\1\0"+
    "\16\30\7\0\2\114\1\115\1\114\1\116\4\114\1\117"+
    "\1\120\2\121\1\122\1\123\1\121\1\0\1\114\2\0"+
    "\1\124\6\121\1\125\2\114\3\121\1\114\2\121\1\114"+
    "\1\121\1\114\2\121\1\126\7\121\1\127\1\114\2\121"+
    "\7\114\104\0\1\40\7\0\3\40\12\0\1\40\36\0"+
    "\20\130\2\0\12\130\1\131\1\132\36\130\6\0\1\133"+
    "\65\0\4\114\1\116\4\114\1\117\1\120\2\121\1\122"+
    "\1\123\1\121\1\0\1\114\2\0\1\124\2\121\1\134"+
    "\3\121\1\125\2\114\3\121\1\114\2\121\1\114\1\121"+
    "\1\114\2\121\1\126\7\121\1\127\1\114\2\121\12\114"+
    "\1\56\1\116\4\114\1\117\1\120\2\121\1\122\1\123"+
    "\1\121\1\0\1\114\2\0\1\124\6\121\1\125\2\114"+
    "\3\121\1\114\2\121\1\114\1\121\1\114\2\121\1\126"+
    "\7\121\1\127\1\114\2\121\11\114\1\115\1\114\1\116"+
    "\1\135\3\114\1\117\1\120\2\121\1\122\1\123\1\121"+
    "\1\0\1\114\2\0\1\124\6\121\1\125\2\114\3\121"+
    "\1\114\2\121\1\114\1\121\1\114\2\121\1\126\7\121"+
    "\1\127\1\114\2\121\13\114\1\116\4\114\1\117\1\120"+
    "\2\121\1\122\1\123\1\121\1\0\1\114\2\0\1\124"+
    "\6\121\1\125\2\114\3\121\1\114\2\121\1\114\1\121"+
    "\1\114\2\121\1\126\7\121\1\127\1\114\2\121\13\114"+
    "\1\136\1\137\3\114\1\117\1\120\2\121\1\122\1\123"+
    "\1\121\1\0\1\114\2\0\1\124\6\121\1\125\2\114"+
    "\3\121\1\114\2\121\1\114\1\121\1\114\2\121\1\126"+
    "\7\121\1\127\1\114\2\121\7\114\1\76\10\0\7\76"+
    "\4\0\10\76\2\0\3\76\1\0\2\76\1\0\1\76"+
    "\1\0\16\76\20\0\1\140\1\141\71\0\1\106\7\0"+
    "\3\106\12\0\1\106\36\0\1\107\10\0\7\107\4\0"+
    "\10\107\2\0\3\107\1\0\2\107\1\0\1\107\1\0"+
    "\16\107\7\0\2\114\1\115\1\114\1\116\4\114\1\117"+
    "\1\142\2\121\1\122\1\123\1\121\1\0\1\114\2\0"+
    "\1\124\6\121\1\125\2\114\1\121\1\143\1\121\1\114"+
    "\2\121\1\114\1\121\1\114\1\144\1\121\1\126\1\145"+
    "\1\146\1\147\1\150\1\121\1\151\1\152\1\127\1\114"+
    "\2\121\7\114\1\112\10\0\7\112\4\0\10\112\2\0"+
    "\3\112\1\0\2\112\1\0\1\112\1\0\16\112\43\0"+
    "\1\153\1\154\47\0\1\121\1\155\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\4\121\1\156\2\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\1\121\1\157\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\3\121\1\160\3\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\3\121\1\161\3\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\1\121\1\162\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\10\121\2\0\3\121\1\0\1\121"+
    "\1\163\1\0\1\121\1\0\7\121\1\164\3\121\1\0"+
    "\2\121\20\0\1\121\1\165\5\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\7\0\20\130\2\0\52\130\10\166\1\131\7\166"+
    "\2\167\1\131\12\166\1\131\4\166\1\170\31\166\20\130"+
    "\2\0\12\130\1\171\37\130\11\0\1\121\1\172\5\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\21\0\1\173\76\0\1\174"+
    "\67\0\4\121\1\175\2\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\4\121\1\176\2\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\2\121\1\177\10\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\200\1\0\7\121\1\201\3\121"+
    "\1\0\2\121\20\0\7\121\4\0\1\121\1\202\6\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\5\121\1\203\2\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\1\121\1\204\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\205\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\7\121\1\206\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\4\121\1\207\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\17\0"+
    "\1\153\7\0\3\153\12\0\1\153\4\0\1\210\65\0"+
    "\1\211\50\0\2\121\1\212\4\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\5\121\1\213\1\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\7\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\1\214\1\121"+
    "\20\0\7\121\4\0\7\121\1\215\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\1\121\1\216\6\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\4\121\1\122\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\3\121\1\217\4\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\6\121\1\220\1\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\7\121\1\221\2\0\3\121\1\0\2\121"+
    "\1\0\1\121\1\0\13\121\1\0\2\121\7\0\20\166"+
    "\2\0\52\166\10\0\1\167\7\0\3\167\12\0\1\167"+
    "\4\0\1\222\31\0\20\166\2\0\10\166\1\223\41\166"+
    "\20\130\2\0\5\130\1\224\6\130\1\224\35\130\11\0"+
    "\7\121\4\0\2\121\1\225\5\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\22\0"+
    "\1\226\76\0\1\227\66\0\5\121\1\230\1\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\5\121\1\231\1\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\10\121\2\0"+
    "\3\121\1\0\1\121\1\232\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\7\121\1\233\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\4\121\1\234\2\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\3\121\1\235\3\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\7\121\4\0\10\121\2\0\3\121\1\0"+
    "\1\236\1\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\10\121\2\0\3\121\1\0\2\121"+
    "\1\0\1\237\1\0\13\121\1\0\2\121\20\0\7\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\240"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\3\121"+
    "\1\241\4\121\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\41\0\1\242\70\0\1\243"+
    "\6\0\1\243\46\0\3\121\1\244\3\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\1\121\1\245\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\1\121\1\246\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\4\121\1\247\2\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\3\121\1\250\3\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\1\121\1\251\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\1\252\6\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\41\0\1\253\41\0\20\166\2\0\11\166\1\254"+
    "\40\166\12\130\1\255\5\130\2\0\15\130\1\255\34\130"+
    "\11\0\7\121\4\0\3\121\1\256\4\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\23\0\1\257\70\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\1\260\2\121\1\261"+
    "\1\262\1\121\1\263\1\121\1\264\2\121\1\0\2\121"+
    "\20\0\1\121\1\265\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\3\121\1\266\7\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\1\121\1\267\11\121"+
    "\1\0\2\121\20\0\7\121\4\0\4\121\1\270\3\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\2\121\1\271\10\121"+
    "\1\0\2\121\20\0\1\121\1\272\5\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\1\202\1\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\7\121\4\0\4\121\1\273\3\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\20\0\3\121\1\274\3\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\13\121\1\0"+
    "\2\121\42\0\1\275\52\0\1\276\24\0\1\276\45\0"+
    "\4\121\1\277\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\4\121\1\300\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\4\121\1\301\3\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\1\121\1\302\5\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\4\121\1\303\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\2\121\1\304\5\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\305\2\121\42\0\1\306\40\0"+
    "\20\166\2\0\21\166\1\307\30\166\20\130\2\0\4\130"+
    "\1\131\11\130\1\131\33\130\15\0\1\310\67\0\7\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\311"+
    "\1\0\7\121\1\312\3\121\1\0\2\121\20\0\7\121"+
    "\4\0\1\121\1\313\6\121\2\0\3\121\1\0\2\121"+
    "\1\0\1\121\1\0\13\121\1\0\2\121\20\0\7\121"+
    "\4\0\5\121\1\314\2\121\2\0\3\121\1\0\2\121"+
    "\1\0\1\121\1\0\13\121\1\0\2\121\20\0\7\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\315"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\7\121"+
    "\1\316\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\1\121\1\265"+
    "\6\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\2\121\1\317"+
    "\10\121\1\0\2\121\20\0\7\121\4\0\3\121\1\320"+
    "\4\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\1\121\1\202\5\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\6\121\1\321"+
    "\1\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\1\121\1\322\5\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\2\121\1\313"+
    "\10\121\1\0\2\121\52\0\1\323\56\0\1\153\11\0"+
    "\1\153\44\0\7\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\12\121\1\324\1\0\2\121"+
    "\20\0\7\121\4\0\3\121\1\325\4\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\2\121\1\326\5\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\10\121\2\0\3\121\1\0\2\121"+
    "\1\0\1\121\1\0\2\121\1\327\10\121\1\0\2\121"+
    "\20\0\1\121\1\330\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\52\0\1\331\30\0\12\166\1\332\5\166\2\0\52\166"+
    "\11\0\7\121\4\0\7\121\1\313\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\4\121\1\333\2\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\3\121\1\334\3\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\20\0"+
    "\7\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\335\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\336\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\2\121\1\202"+
    "\10\121\1\0\2\121\20\0\3\121\1\337\3\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\3\121\1\202"+
    "\4\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\5\121\1\340\1\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\21\0\1\341\72\0\3\121\1\342"+
    "\3\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\2\121\1\343\10\121\1\0\2\121\20\0\7\121\4\0"+
    "\3\121\1\344\4\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\3\121\1\345"+
    "\3\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\4\121\1\346\3\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\21\0\1\347\61\0"+
    "\20\166\2\0\11\166\1\350\40\166\11\0\7\121\4\0"+
    "\4\121\1\351\3\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\2\121\1\352\10\121\1\0\2\121\20\0\7\121\4\0"+
    "\10\121\2\0\3\121\1\0\1\313\1\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\4\121"+
    "\1\353\3\121\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\354\1\0\13\121"+
    "\1\0\2\121\20\0\7\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\7\121\1\355\3\121"+
    "\1\0\2\121\42\0\1\356\51\0\7\121\4\0\7\121"+
    "\1\357\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\7\121\4\0\10\121\2\0"+
    "\3\121\1\0\2\121\1\0\1\121\1\0\7\121\1\360"+
    "\3\121\1\0\2\121\20\0\7\121\4\0\4\121\1\361"+
    "\3\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\20\0\4\121\1\362\2\121\4\0"+
    "\10\121\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\42\0\1\363\40\0\10\166\1\350"+
    "\7\166\2\363\1\350\12\166\1\350\6\166\1\364\27\166"+
    "\11\0\7\121\4\0\3\121\1\365\4\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\1\121\1\313\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\1\121\1\366\5\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\4\121\1\202\2\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\7\121\1\271\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\17\0"+
    "\1\356\7\0\3\356\12\0\1\356\6\0\1\367\40\0"+
    "\7\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\370\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\6\121\1\346\1\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\5\121\1\371\2\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\1\121\1\346"+
    "\5\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\17\0\1\363\7\0"+
    "\3\363\12\0\1\363\6\0\1\372\27\0\10\166\1\364"+
    "\7\166\2\372\1\364\12\166\1\364\7\166\1\373\26\166"+
    "\11\0\3\121\1\374\3\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\5\121\1\375\1\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\17\0\1\367\7\0\3\367\12\0\1\367\7\0\1\376"+
    "\37\0\4\121\1\377\2\121\4\0\10\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\20\0\7\121\4\0\6\121\1\u0100\1\121\2\0\3\121"+
    "\1\0\2\121\1\0\1\121\1\0\13\121\1\0\2\121"+
    "\17\0\1\372\7\0\3\372\12\0\1\372\7\0\1\u0101"+
    "\26\0\20\166\2\0\3\166\1\u0102\46\166\11\0\7\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\u0103"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\10\121"+
    "\2\0\3\121\1\0\2\121\1\0\1\121\1\0\7\121"+
    "\1\u0104\3\121\1\0\2\121\24\0\1\u0105\67\0\7\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\1\121\1\u0106\20\0\7\121\4\0"+
    "\7\121\1\u0107\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\34\0\1\u0108\46\0\20\166"+
    "\2\0\3\166\1\u0109\46\166\11\0\4\121\1\313\2\121"+
    "\4\0\10\121\2\0\3\121\1\0\2\121\1\0\1\121"+
    "\1\0\13\121\1\0\2\121\20\0\7\121\4\0\7\121"+
    "\1\352\2\0\3\121\1\0\2\121\1\0\1\121\1\0"+
    "\13\121\1\0\2\121\7\0\20\u0105\2\0\52\u0105\11\0"+
    "\1\121\1\u010a\5\121\4\0\10\121\2\0\3\121\1\0"+
    "\2\121\1\0\1\121\1\0\13\121\1\0\2\121\7\0"+
    "\11\u010b\7\121\4\0\10\121\2\u010b\3\121\1\u010b\2\121"+
    "\1\u010b\1\121\1\u010b\13\121\1\u010b\2\121\7\u010b\25\0"+
    "\1\u0109\46\0\20\u0109\2\0\52\u0109\11\0\4\121\1\u010c"+
    "\2\121\4\0\10\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\20\0\7\121\4\0"+
    "\3\121\1\u010d\4\121\2\0\3\121\1\0\2\121\1\0"+
    "\1\121\1\0\13\121\1\0\2\121\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\2\1\6\11\1\1\2\11\1\1\1\11\1\1"+
    "\1\11\2\1\4\11\1\1\1\11\3\1\4\11\1\1"+
    "\7\11\1\1\4\11\1\1\2\11\2\1\1\11\3\1"+
    "\3\11\14\1\1\11\1\1\3\11\2\0\11\1\2\0"+
    "\12\1\1\0\3\1\2\0\13\1\2\0\10\1\1\0"+
    "\3\1\1\0\1\11\12\1\2\0\7\1\1\0\3\1"+
    "\1\0\15\1\2\0\6\1\1\11\1\0\1\1\1\11"+
    "\12\1\1\0\5\1\1\0\7\1\1\0\5\1\1\0"+
    "\6\1\1\0\4\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\6\1\1\0\2\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return EQUALS;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return STAR;
            } 
            // fall through
          case 79: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 86: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 87: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 88: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 89: break;
          case 25: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 90: break;
          case 26: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 91: break;
          case 27: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 92: break;
          case 28: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 93: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 94: break;
          case 30: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 95: break;
          case 31: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 96: break;
          case 32: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 97: break;
          case 33: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 98: break;
          case 34: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 99: break;
          case 35: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 100: break;
          case 36: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 102: break;
          case 38: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 103: break;
          case 39: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 104: break;
          case 40: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 105: break;
          case 41: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 106: break;
          case 42: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 107: break;
          case 43: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 109: break;
          case 45: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 110: break;
          case 46: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 112: break;
          case 48: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 113: break;
          case 49: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return END_TOKEN;
            } 
            // fall through
          case 118: break;
          case 54: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 119: break;
          case 55: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 120: break;
          case 56: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 121: break;
          case 57: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 123: break;
          case 59: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 126: break;
          case 62: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 127: break;
          case 63: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 129: break;
          case 65: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
