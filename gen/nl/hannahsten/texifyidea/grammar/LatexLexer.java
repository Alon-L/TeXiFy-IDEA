/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import java.util.ArrayDeque;
import java.util.Deque;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int INLINE_VERBATIM_START = 22;
  public static final int INLINE_VERBATIM = 24;
  public static final int POSSIBLE_VERBATIM_BEGIN = 26;
  public static final int VERBATIM_OPTIONAL_ARG = 28;
  public static final int VERBATIM_START = 30;
  public static final int VERBATIM_END = 32;
  public static final int VERBATIM = 34;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 36;
  public static final int POSSIBLE_VERBATIM_END = 38;
  public static final int PSEUDOCODE = 40;
  public static final int POSSIBLE_PSEUDOCODE_END = 42;
  public static final int OFF = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\10\1\20\2\22\1\21\22\0\1\35\1\34\1\47\1\0\1\66\1\41\1\70\1\0\1\2\1" +
                  "\3\1\63\1\0\1\71\15\0\1\17\1\0\1\67\1\44\1\67\1\0\1\24\1\51\3\17\1\37\1\50" +
                  "\2\17\1\53\2\17\1\56\3\17\1\60\1\17\1\55\1\17\1\36\1\61\1\17\1\54\1\40\2\17" +
                  "\1\4\1\1\1\5\1\0\1\17\1\0\1\32\1\11\1\30\1\16\1\12\1\25\1\13\1\31\1\14\2\17" +
                  "\1\52\1\65\1\15\1\45\1\42\1\17\1\33\1\43\1\27\1\57\1\62\1\64\1\26\2\17\1\6" +
                  "\1\47\1\7\7\0\1\23\32\0\1\46\337\0\1\46\177\0\13\46\35\0\2\23\5\0\1\46\57" +
                  "\0\1\46\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\27\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" +
                  "\1\10\1\11\1\12\1\2\1\13\1\14\1\15\1\16" +
                  "\1\2\1\17\1\20\1\2\1\21\3\2\1\22\1\23" +
                  "\1\1\1\24\1\2\1\25\1\26\1\27\1\30\1\31" +
                  "\1\32\1\33\1\34\1\35\1\36\1\37\2\40\1\41" +
                  "\1\42\1\43\1\44\1\45\1\2\1\46\1\40\1\47" +
                  "\1\50\1\51\11\47\1\13\1\52\1\13\1\53\1\47" +
                  "\1\54\1\55\1\56\2\0\11\47\2\0\11\47\1\52" +
                  "\1\0\1\52\1\13\1\47\2\0\5\47\1\57\5\47" +
                  "\2\0\1\47\1\60\6\47\1\0\1\52\1\13\1\47" +
                  "\1\0\1\61\1\62\2\47\1\57\6\47\2\0\6\47" +
                  "\1\63\1\0\1\52\1\13\1\64\1\0\5\47\1\65" +
                  "\7\47\2\0\1\66\5\47\1\63\1\0\1\52\1\67" +
                  "\2\47\1\70\7\47\1\0\5\47\1\0\1\52\6\47" +
                  "\1\0\4\47\1\63\1\0\1\52\5\47\1\0\4\47" +
                  "\1\0\1\52\2\47\1\0\2\47\1\0\1\52\2\47" +
                  "\1\0\2\47\1\0\1\52\2\47\1\71\2\47\1\0" +
                  "\1\72\1\47\1\73\1\47\1\74";

  private static int [] zzUnpackAction() {
    int[] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196" +
                  "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366" +
                  "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536" +
                  "\0\u0570\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05e4" +
                  "\0\u05aa\0\u05aa\0\u061e\0\u05aa\0\u0536\0\u05aa\0\u0658\0\u05aa" +
                  "\0\u05aa\0\u0692\0\u05aa\0\u06cc\0\u0706\0\u0740\0\u05aa\0\u05aa" +
                  "\0\u05aa\0\u05aa\0\u077a\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa" +
                  "\0\u05aa\0\u05aa\0\u07b4\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u07ee" +
                  "\0\u05aa\0\u05aa\0\u0828\0\u0862\0\u05aa\0\u089c\0\u08d6\0\u0910" +
                  "\0\u05aa\0\u05aa\0\u05aa\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32" +
                  "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u05aa" +
                  "\0\u0c02\0\u05aa\0\u05aa\0\u05aa\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea" +
                  "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba" +
                  "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a" +
                  "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a" +
                  "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u09be\0\u13f0" +
                  "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u09be" +
                  "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756" +
                  "\0\u1790\0\u17ca\0\u1804\0\u05aa\0\u09be\0\u183e\0\u1878\0\u18b2" +
                  "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82" +
                  "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52" +
                  "\0\u1c8c\0\u1cc6\0\u09be\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8" +
                  "\0\u1e22\0\u09be\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e" +
                  "\0\u1fb8\0\u1ff2\0\u202c\0\u09be\0\u2066\0\u20a0\0\u20da\0\u2114" +
                  "\0\u214e\0\u05aa\0\u2188\0\u21c2\0\u05aa\0\u21fc\0\u2236\0\u09be" +
                  "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406" +
                  "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6" +
                  "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6" +
                  "\0\u27e0\0\u281a\0\u09be\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c" +
                  "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c" +
                  "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc" +
                  "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac" +
                  "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u05aa" +
                  "\0\u307c\0\u09be";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
                  "\1\40\7\30\3\40\1\41\10\30\1\42\1\40\3\30" +
                  "\1\43\2\30\1\44\1\30\1\41\1\42\13\30\1\45" +
                  "\2\30\1\46\1\47\1\50\1\51\1\30\1\52\1\32" +
                  "\1\33\1\34\1\35\1\36\1\37\1\40\7\30\3\40" +
                  "\1\41\10\30\1\42\1\40\3\30\1\43\2\30\1\44" +
                  "\1\30\1\41\1\42\13\30\1\45\2\30\1\53\1\47" +
                  "\1\50\1\51\1\30\1\54\1\32\1\33\1\34\1\35" +
                  "\1\36\1\37\1\40\7\30\3\40\1\41\10\30\1\42" +
                  "\1\40\3\30\1\43\2\30\1\44\1\30\1\41\1\42" +
                  "\13\30\1\45\2\30\1\41\1\47\1\50\1\51\1\30" +
                  "\1\55\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                  "\7\30\3\40\1\41\10\30\1\42\1\40\3\30\1\43" +
                  "\2\30\1\44\1\30\1\41\1\42\13\30\1\45\2\30" +
                  "\1\46\1\47\1\50\1\51\1\30\1\56\1\32\1\33" +
                  "\1\34\1\35\1\36\1\57\1\40\7\30\3\40\1\41" +
                  "\10\30\1\42\1\40\3\30\1\43\2\30\1\44\1\30" +
                  "\1\41\1\42\13\30\1\45\2\30\1\60\1\47\1\50" +
                  "\1\51\1\30\1\56\1\32\1\33\1\34\1\35\1\36" +
                  "\1\37\1\40\7\30\3\40\1\41\10\30\1\42\1\40" +
                  "\3\30\1\43\2\30\1\44\1\30\1\41\1\42\13\30" +
                  "\1\45\2\30\1\53\1\47\1\50\1\51\1\30\1\56" +
                  "\1\32\1\33\1\34\1\35\1\36\1\57\1\40\7\30" +
                  "\3\40\1\41\10\30\1\42\1\40\3\30\1\43\2\30" +
                  "\1\44\1\30\1\41\1\42\13\30\1\45\2\30\1\61" +
                  "\1\47\1\50\1\51\1\30\1\56\1\32\1\33\1\34" +
                  "\1\35\1\36\1\62\1\40\7\30\3\40\1\41\10\30" +
                  "\1\42\1\40\3\30\1\43\2\30\1\44\1\30\1\41" +
                  "\1\42\13\30\1\45\2\30\1\41\1\47\1\50\1\51" +
                  "\1\30\1\63\1\32\1\33\1\34\1\35\1\64\1\65" +
                  "\1\40\7\30\3\40\1\41\10\30\1\42\1\40\3\30" +
                  "\1\43\2\30\1\44\1\30\1\41\1\42\13\30\1\45" +
                  "\2\30\1\61\1\47\1\50\1\51\1\30\1\56\1\32" +
                  "\1\33\1\34\1\35\1\66\1\37\1\40\7\30\3\40" +
                  "\1\41\10\30\1\42\1\40\3\30\1\43\2\30\1\44" +
                  "\1\30\1\41\1\42\13\30\1\45\2\30\1\41\1\47" +
                  "\1\50\1\51\1\30\1\63\1\32\1\33\1\34\1\35" +
                  "\1\64\1\67\1\40\7\30\3\40\1\41\10\30\1\42" +
                  "\1\40\3\30\1\43\2\30\1\44\1\30\1\41\1\42" +
                  "\13\30\1\45\2\30\1\61\1\47\1\50\1\51\6\70" +
                  "\1\71\63\70\72\72\1\73\1\56\1\32\1\33\1\34" +
                  "\1\35\1\36\1\57\1\40\7\73\3\40\1\41\10\73" +
                  "\1\42\1\40\3\73\1\43\2\73\1\44\1\73\1\41" +
                  "\1\42\16\73\1\41\1\47\1\50\1\51\1\30\1\56" +
                  "\1\32\1\33\1\74\1\75\1\36\1\37\1\40\7\30" +
                  "\3\40\1\41\10\30\1\42\1\40\3\30\1\43\2\30" +
                  "\1\44\1\30\1\41\1\42\13\30\1\45\2\30\1\41" +
                  "\1\47\1\50\1\51\1\30\1\56\1\32\1\33\1\34" +
                  "\1\35\1\36\1\76\1\40\7\30\3\40\1\41\10\30" +
                  "\1\42\1\40\3\30\1\43\2\30\1\44\1\30\1\41" +
                  "\1\42\13\30\1\45\2\30\1\41\1\47\1\50\1\51" +
                  "\1\30\1\56\1\32\1\33\1\34\1\35\1\36\1\37" +
                  "\1\40\7\30\3\40\1\41\10\30\1\42\1\40\3\30" +
                  "\1\43\2\30\1\44\1\30\1\41\1\42\13\30\1\45" +
                  "\2\30\1\41\1\47\1\50\1\51\1\77\1\100\6\77" +
                  "\1\40\7\77\3\40\12\77\1\40\34\77\4\101\1\102" +
                  "\3\101\1\103\7\101\3\103\12\101\1\103\34\101\1\104" +
                  "\5\105\1\36\2\105\7\104\4\105\10\104\2\105\3\104" +
                  "\1\105\2\104\1\105\1\104\2\105\16\104\4\105\1\30" +
                  "\1\106\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
                  "\7\30\3\40\1\41\10\30\1\42\1\40\3\30\1\43" +
                  "\2\30\1\44\1\30\1\41\1\42\13\30\1\45\2\30" +
                  "\1\46\1\47\1\50\1\51\1\107\1\56\1\32\1\33" +
                  "\1\34\1\35\1\36\1\37\1\40\7\107\3\40\1\41" +
                  "\10\107\1\42\1\40\3\107\1\43\2\107\1\44\1\107" +
                  "\1\41\1\42\16\107\1\41\1\47\1\50\1\51\41\77" +
                  "\1\110\30\77\1\30\10\0\7\30\4\0\10\30\2\0" +
                  "\3\30\1\0\2\30\1\0\1\30\2\0\16\30\4\0" +
                  "\2\111\1\112\1\111\1\113\4\111\1\114\1\115\2\116" +
                  "\1\117\1\120\1\116\1\0\1\111\2\0\1\121\6\116" +
                  "\1\122\2\111\3\116\1\111\2\116\1\111\1\116\2\111" +
                  "\2\116\1\123\7\116\1\124\1\111\2\116\4\111\102\0" +
                  "\1\40\7\0\3\40\12\0\1\40\34\0\20\125\2\0" +
                  "\12\125\1\126\1\127\34\125\6\0\1\130\63\0\4\111" +
                  "\1\113\4\111\1\114\1\115\2\116\1\117\1\120\1\116" +
                  "\1\0\1\111\2\0\1\121\2\116\1\131\3\116\1\122" +
                  "\2\111\3\116\1\111\2\116\1\111\1\116\2\111\2\116" +
                  "\1\123\7\116\1\124\1\111\2\116\7\111\1\53\1\113" +
                  "\4\111\1\114\1\115\2\116\1\117\1\120\1\116\1\0" +
                  "\1\111\2\0\1\121\6\116\1\122\2\111\3\116\1\111" +
                  "\2\116\1\111\1\116\2\111\2\116\1\123\7\116\1\124" +
                  "\1\111\2\116\6\111\1\112\1\111\1\113\1\132\3\111" +
                  "\1\114\1\115\2\116\1\117\1\120\1\116\1\0\1\111" +
                  "\2\0\1\121\6\116\1\122\2\111\3\116\1\111\2\116" +
                  "\1\111\1\116\2\111\2\116\1\123\7\116\1\124\1\111" +
                  "\2\116\10\111\1\113\4\111\1\114\1\115\2\116\1\117" +
                  "\1\120\1\116\1\0\1\111\2\0\1\121\6\116\1\122" +
                  "\2\111\3\116\1\111\2\116\1\111\1\116\2\111\2\116" +
                  "\1\123\7\116\1\124\1\111\2\116\10\111\1\133\1\134" +
                  "\3\111\1\114\1\115\2\116\1\117\1\120\1\116\1\0" +
                  "\1\111\2\0\1\121\6\116\1\122\2\111\3\116\1\111" +
                  "\2\116\1\111\1\116\2\111\2\116\1\123\7\116\1\124" +
                  "\1\111\2\116\4\111\1\73\10\0\7\73\4\0\10\73" +
                  "\2\0\3\73\1\0\2\73\1\0\1\73\2\0\16\73" +
                  "\15\0\1\135\1\136\67\0\1\103\7\0\3\103\12\0" +
                  "\1\103\34\0\1\104\10\0\7\104\4\0\10\104\2\0" +
                  "\3\104\1\0\2\104\1\0\1\104\2\0\16\104\4\0" +
                  "\2\111\1\112\1\111\1\113\4\111\1\114\1\137\2\116" +
                  "\1\117\1\120\1\116\1\0\1\111\2\0\1\121\6\116" +
                  "\1\122\2\111\1\116\1\140\1\116\1\111\2\116\1\111" +
                  "\1\116\2\111\1\141\1\116\1\123\1\142\1\143\1\144" +
                  "\1\145\1\116\1\146\1\147\1\124\1\111\2\116\4\111" +
                  "\1\107\10\0\7\107\4\0\10\107\2\0\3\107\1\0" +
                  "\2\107\1\0\1\107\2\0\16\107\40\0\1\150\1\151" +
                  "\45\0\1\116\1\152\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\4\116\1\153\2\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\1\116" +
                  "\1\154\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\3\116" +
                  "\1\155\3\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\3\116" +
                  "\1\156\3\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\1\116" +
                  "\1\157\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\10\116\2\0\3\116\1\0\1\116\1\160\1\0" +
                  "\1\116\2\0\7\116\1\161\3\116\1\0\2\116\15\0" +
                  "\1\116\1\162\5\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\4\0" +
                  "\20\125\2\0\50\125\10\163\1\126\7\163\2\164\1\126" +
                  "\12\163\1\126\4\163\1\165\27\163\20\125\2\0\12\125" +
                  "\1\166\35\125\11\0\1\116\1\167\5\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\16\0\1\170\74\0\1\171\65\0\4\116" +
                  "\1\172\2\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\4\116" +
                  "\1\173\2\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\2\116\1\174\10\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\175\2\0\7\116\1\176\3\116\1\0\2\116" +
                  "\15\0\7\116\4\0\1\116\1\177\6\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\5\116\1\200\2\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\1\116\1\201\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\202\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\7\116\1\203\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\4\116\1\204" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\14\0\1\150\7\0" +
                  "\3\150\12\0\1\150\4\0\1\205\63\0\1\206\46\0" +
                  "\2\116\1\207\4\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\5\116\1\210\1\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\7\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\1\211\1\116\15\0\7\116" +
                  "\4\0\7\116\1\212\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\1\116\1\213\6\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\4\116\1\117" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\3\116\1\214\4\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\6\116\1\215\1\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\7\116\1\216\2\0\3\116\1\0\2\116\1\0\1\116" +
                  "\2\0\13\116\1\0\2\116\4\0\20\163\2\0\50\163" +
                  "\10\0\1\164\7\0\3\164\12\0\1\164\4\0\1\217" +
                  "\27\0\20\163\2\0\10\163\1\220\37\163\20\125\2\0" +
                  "\5\125\1\221\6\125\1\221\33\125\11\0\7\116\4\0" +
                  "\2\116\1\222\5\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\17\0\1\223\74\0" +
                  "\1\224\64\0\5\116\1\225\1\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\5\116\1\226\1\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\10\116\2\0\3\116\1\0" +
                  "\1\116\1\227\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\7\116\1\230\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\4\116\1\231\2\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\3\116\1\232\3\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\7\116\4\0\10\116\2\0\3\116\1\0\1\233\1\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\10\116\2\0\3\116\1\0\2\116\1\0\1\234" +
                  "\2\0\13\116\1\0\2\116\15\0\7\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\235\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\3\116\1\236\4\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\36\0\1\237\66\0\1\240\6\0\1\240" +
                  "\44\0\3\116\1\241\3\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\1\116\1\242\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\1\116\1\243\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\4\116\1\244\2\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\3\116\1\245\3\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\1\116\1\246\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\1\247\6\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\36\0" +
                  "\1\250\37\0\20\163\2\0\11\163\1\251\36\163\12\125" +
                  "\1\252\5\125\2\0\15\125\1\252\32\125\11\0\7\116" +
                  "\4\0\3\116\1\253\4\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\20\0\1\254" +
                  "\66\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\1\255\2\116\1\256\1\257\1\116" +
                  "\1\260\1\116\1\261\2\116\1\0\2\116\15\0\1\116" +
                  "\1\262\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\3\116\1\263\7\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\1\116\1\264\11\116\1\0\2\116" +
                  "\15\0\7\116\4\0\4\116\1\265\3\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\2\116\1\266\10\116\1\0\2\116" +
                  "\15\0\1\116\1\267\5\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\1\177" +
                  "\1\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\7\116\4\0\4\116\1\270\3\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\15\0" +
                  "\3\116\1\271\3\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\13\116\1\0\2\116\37\0" +
                  "\1\272\50\0\1\273\24\0\1\273\43\0\4\116\1\274" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\4\116\1\275" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\4\116\1\276\3\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\1\116\1\277" +
                  "\5\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\4\116\1\300" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\2\116\1\301\5\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\302\2\116\37\0\1\303\36\0\20\163\2\0" +
                  "\21\163\1\304\26\163\20\125\2\0\4\125\1\126\11\125" +
                  "\1\126\31\125\15\0\1\305\65\0\7\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\306\2\0\7\116" +
                  "\1\307\3\116\1\0\2\116\15\0\7\116\4\0\1\116" +
                  "\1\310\6\116\2\0\3\116\1\0\2\116\1\0\1\116" +
                  "\2\0\13\116\1\0\2\116\15\0\7\116\4\0\5\116" +
                  "\1\311\2\116\2\0\3\116\1\0\2\116\1\0\1\116" +
                  "\2\0\13\116\1\0\2\116\15\0\7\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\312\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\7\116\1\313\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\1\116\1\262\6\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\2\116\1\314\10\116\1\0" +
                  "\2\116\15\0\7\116\4\0\3\116\1\315\4\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\1\116\1\177\5\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\6\116\1\316\1\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\1\116\1\317\5\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\2\116\1\310\10\116\1\0" +
                  "\2\116\47\0\1\320\54\0\1\150\11\0\1\150\42\0" +
                  "\7\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\12\116\1\321\1\0\2\116\15\0\7\116" +
                  "\4\0\3\116\1\322\4\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\2\116\1\323\5\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\10\116\2\0\3\116\1\0\2\116\1\0\1\116" +
                  "\2\0\2\116\1\324\10\116\1\0\2\116\15\0\1\116" +
                  "\1\325\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\47\0\1\326" +
                  "\26\0\12\163\1\327\5\163\2\0\50\163\11\0\7\116" +
                  "\4\0\7\116\1\310\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\4\116\1\330" +
                  "\2\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\3\116\1\331" +
                  "\3\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\15\0\7\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\332\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\333\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\2\116\1\177\10\116\1\0" +
                  "\2\116\15\0\3\116\1\334\3\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\3\116\1\177\4\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\5\116\1\335\1\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\16\0\1\336\70\0\3\116\1\337\3\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\2\116\1\340" +
                  "\10\116\1\0\2\116\15\0\7\116\4\0\3\116\1\341" +
                  "\4\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\3\116\1\342\3\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\4\116\1\343" +
                  "\3\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\16\0\1\344\57\0\20\163\2\0" +
                  "\11\163\1\345\36\163\11\0\7\116\4\0\4\116\1\346" +
                  "\3\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\2\116\1\347" +
                  "\10\116\1\0\2\116\15\0\7\116\4\0\10\116\2\0" +
                  "\3\116\1\0\1\310\1\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\4\116\1\350\3\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\351\2\0\13\116\1\0\2\116" +
                  "\15\0\7\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\7\116\1\352\3\116\1\0\2\116" +
                  "\37\0\1\353\47\0\7\116\4\0\7\116\1\354\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\7\116\4\0\10\116\2\0\3\116\1\0" +
                  "\2\116\1\0\1\116\2\0\7\116\1\355\3\116\1\0" +
                  "\2\116\15\0\7\116\4\0\4\116\1\356\3\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\15\0\4\116\1\357\2\116\4\0\10\116\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\37\0\1\360\36\0\10\163\1\345\7\163\2\360" +
                  "\1\345\12\163\1\345\6\163\1\361\25\163\11\0\7\116" +
                  "\4\0\3\116\1\362\4\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\1\116" +
                  "\1\310\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\1\116" +
                  "\1\363\5\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\4\116" +
                  "\1\177\2\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\7\116\1\266\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\14\0\1\353\7\0" +
                  "\3\353\12\0\1\353\6\0\1\364\36\0\7\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\365\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\6\116\1\343" +
                  "\1\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\5\116\1\366" +
                  "\2\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\1\116\1\343\5\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\14\0\1\360\7\0\3\360\12\0" +
                  "\1\360\6\0\1\367\25\0\10\163\1\361\7\163\2\367" +
                  "\1\361\12\163\1\361\7\163\1\370\24\163\11\0\3\116" +
                  "\1\371\3\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\5\116" +
                  "\1\372\1\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\14\0\1\364" +
                  "\7\0\3\364\12\0\1\364\7\0\1\373\35\0\4\116" +
                  "\1\374\2\116\4\0\10\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\15\0\7\116" +
                  "\4\0\6\116\1\375\1\116\2\0\3\116\1\0\2\116" +
                  "\1\0\1\116\2\0\13\116\1\0\2\116\14\0\1\367" +
                  "\7\0\3\367\12\0\1\367\7\0\1\376\24\0\20\163" +
                  "\2\0\3\163\1\377\44\163\11\0\7\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\u0100\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\10\116\2\0\3\116" +
                  "\1\0\2\116\1\0\1\116\2\0\7\116\1\u0101\3\116" +
                  "\1\0\2\116\21\0\1\u0102\65\0\7\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\1\116\1\u0103\15\0\7\116\4\0\7\116\1\u0104" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\31\0\1\u0105\44\0\20\163\2\0\3\163" +
                  "\1\u0106\44\163\11\0\4\116\1\310\2\116\4\0\10\116" +
                  "\2\0\3\116\1\0\2\116\1\0\1\116\2\0\13\116" +
                  "\1\0\2\116\15\0\7\116\4\0\7\116\1\347\2\0" +
                  "\3\116\1\0\2\116\1\0\1\116\2\0\13\116\1\0" +
                  "\2\116\4\0\20\u0102\2\0\50\u0102\11\0\1\116\1\u0107" +
                  "\5\116\4\0\10\116\2\0\3\116\1\0\2\116\1\0" +
                  "\1\116\2\0\13\116\1\0\2\116\4\0\11\u0108\7\116" +
                  "\4\0\10\116\2\u0108\3\116\1\u0108\2\116\1\u0108\1\116" +
                  "\2\u0108\13\116\1\u0108\2\116\4\u0108\25\0\1\u0106\44\0" +
                  "\20\u0106\2\0\50\u0106\11\0\4\116\1\u0109\2\116\4\0" +
                  "\10\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\15\0\7\116\4\0\3\116\1\u010a" +
                  "\4\116\2\0\3\116\1\0\2\116\1\0\1\116\2\0" +
                  "\13\116\1\0\2\116\4\0";

  private static int [] zzUnpackTrans() {
    int[] result = new int[12470];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\27\0\2\1\6\11\1\1\2\11\1\1\1\11\1\1" +
                  "\1\11\1\1\2\11\1\1\1\11\3\1\4\11\1\1" +
                  "\7\11\1\1\4\11\1\1\2\11\2\1\1\11\3\1" +
                  "\3\11\14\1\1\11\1\1\3\11\2\0\11\1\2\0" +
                  "\12\1\1\0\3\1\2\0\13\1\2\0\10\1\1\0" +
                  "\3\1\1\0\1\11\12\1\2\0\7\1\1\0\3\1" +
                  "\1\0\15\1\2\0\6\1\1\11\1\0\1\1\1\11" +
                  "\12\1\1\0\5\1\1\0\7\1\1\0\5\1\1\0" +
                  "\6\1\1\0\4\1\1\0\3\1\1\0\2\1\1\0" +
                  "\3\1\1\0\2\1\1\0\6\1\1\0\2\1\1\11" +
                  "\2\1";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return NORMAL_TEXT_WORD;
          }
          // fall through
          case 61:
            break;
          case 2: {
            return NORMAL_TEXT_CHAR;
          }
          // fall through
          case 62:
            break;
          case 3: {
            return OPEN_PAREN;
          }
          // fall through
          case 63:
            break;
          case 4: {
            return CLOSE_PAREN;
          }
          // fall through
          case 64:
            break;
          case 5: {
            return OPEN_BRACKET;
          }
          // fall through
          case 65:
            break;
          case 6: {
            return CLOSE_BRACKET;
          }
          // fall through
          case 66:
            break;
          case 7: {
            return OPEN_BRACE;
          }
          // fall through
          case 67:
            break;
          case 8: {
            return CLOSE_BRACE;
          }
          // fall through
          case 68:
            break;
          case 9: {
            return com.intellij.psi.TokenType.WHITE_SPACE;
          }
          // fall through
          case 69:
            break;
          case 10: {
            return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
          // fall through
          case 70:
            break;
          case 11: {
            return COMMENT_TOKEN;
          }
          // fall through
          case 71:
            break;
          case 12: {
            return KEYVAL_ASSIGN;
          }
          // fall through
          case 72:
            break;
          case 13: {
            return STAR;
          }
          // fall through
          case 73:
            break;
          case 14: {
            yypushState(INLINE_MATH);
            return INLINE_MATH_START;
          }
          // fall through
          case 74:
            break;
          case 15: {
            return AMPERSAND;
          }
          // fall through
          case 75:
            break;
          case 16: {
            return PARAM_SEPARATOR;
          }
          // fall through
          case 76:
            break;
          case 17: {
            yypopState();
            return INLINE_MATH_END;
          }
          // fall through
          case 77:
            break;
          case 18: {
            yypopState();
            return CLOSE_BRACE;
          }
          // fall through
          case 78:
            break;
          case 19: {
            yypushState(NESTED_INLINE_MATH);
            return INLINE_MATH_START;
          }
          // fall through
          case 79:
            break;
          case 20: {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
            return CLOSE_BRACE;
          }
          // fall through
          case 80:
            break;
          case 21: {
            newEnvironmentBracesNesting++;
            return OPEN_BRACE;
          }
          // fall through
          case 81:
            break;
          case 22: {
            newEnvironmentBracesNesting--;
            if (newEnvironmentBracesNesting == 0) {
              yypopState();
              yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
              // We could have return normal text, but in this way the braces still match
              return OPEN_BRACE;
            } else {
              return CLOSE_BRACE;
            }
          }
          // fall through
          case 82:
            break;
          case 23: {
            yypopState();
            newEnvironmentBracesNesting = 1;
            yypushState(NEW_ENVIRONMENT_DEFINITION_END);
            return CLOSE_BRACE;
          }
          // fall through
          case 83:
            break;
          case 24: {
            newEnvironmentBracesNesting--;
            if (newEnvironmentBracesNesting == 0) {
              yypopState();
            }
            return CLOSE_BRACE;
          }
          // fall through
          case 84:
            break;
          case 25: {
            yypopState();
            verbatim_delimiter = yytext().toString();
            yypushState(INLINE_VERBATIM);
            return OPEN_BRACE;
          }
          // fall through
          case 85:
            break;
          case 26: {
            yypopState();
            verbatim_delimiter = "}";
            yypushState(INLINE_VERBATIM);
            return OPEN_BRACE;
          }
          // fall through
          case 86:
            break;
          case 27: {
            if (yytext().toString().equals(verbatim_delimiter)) {
              yypopState();
              return CLOSE_BRACE;
            } else {
              return RAW_TEXT_TOKEN;
            }
          }
          // fall through
          case 87:
            break;
          case 28: {
            yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (Magic.Environment.verbatim.contains(yytext().toString())) {
              yypushState(VERBATIM_START);
            } else if (yytext().toString().equals("algorithmic")) {
              yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
          }
          // fall through
          case 88:
            break;
          case 29: {
            verbatimOptionalArgumentBracketsCount++;
            return OPEN_BRACKET;
          }
          // fall through
          case 89:
            break;
          case 30: {
            verbatimOptionalArgumentBracketsCount--;
            if (verbatimOptionalArgumentBracketsCount == 0) {
              yypopState();
              yypushState(VERBATIM);
            }
            return CLOSE_BRACKET;
          }
          // fall through
          case 90:
            break;
          case 31: {
            yypopState();
            yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG);
            return CLOSE_BRACE;
          }
          // fall through
          case 91:
            break;
          case 32: {
            return RAW_TEXT_TOKEN;
          }
          // fall through
          case 92:
            break;
          case 33: {
            yypopState();
            yypushState(VERBATIM);
            return RAW_TEXT_TOKEN;
          }
          // fall through
          case 93:
            break;
          case 34: {
            verbatimOptionalArgumentBracketsCount++;
            yypopState();
            yypushState(VERBATIM_OPTIONAL_ARG);
            return OPEN_BRACKET;
          }
          // fall through
          case 94:
            break;
          case 35: {
            yypopState();
            yypushState(VERBATIM);
            return com.intellij.psi.TokenType.WHITE_SPACE;
          }
          // fall through
          case 95:
            break;
          case 36: { // Pop current state
            yypopState();
            if (Magic.Environment.verbatim.contains(yytext().toString())) {
              // Pop verbatim state
              yypopState();
              return NORMAL_TEXT_WORD;
            }
            return RAW_TEXT_TOKEN;
          }
          // fall through
          case 96:
            break;
          case 37: {
            yypopState();
            return RAW_TEXT_TOKEN;
          }
          // fall through
          case 97:
            break;
          case 38: {
            yypopState();
            if (yytext().toString().equals("algorithmic")) {
              // Pop pseudocode state
              yypopState();
            }
            return NORMAL_TEXT_WORD;
          }
          // fall through
          case 98:
            break;
          case 39: {
            return COMMAND_TOKEN;
          }
          // fall through
          case 99:
            break;
          case 40: {
            yypushState(INLINE_MATH_LATEX);
            return INLINE_MATH_START;
          }
          // fall through
          case 100:
            break;
          case 41: {
            yypushState(DISPLAY_MATH);
            return DISPLAY_MATH_START;
          }
          // fall through
          case 101:
            break;
          case 42: {
            return MAGIC_COMMENT_TOKEN;
          }
          // fall through
          case 102:
            break;
          case 43: {
            yypushState(PREAMBLE_OPTION);
            return OPEN_BRACE;
          }
          // fall through
          case 103:
            break;
          case 44: {
            yypopState();
            return DISPLAY_MATH_END;
          }
          // fall through
          case 104:
            break;
          case 45: {
            return DISPLAY_MATH_START;
          }
          // fall through
          case 105:
            break;
          case 46: {
            return DISPLAY_MATH_END;
          }
          // fall through
          case 106:
            break;
          case 47: {
            return BEGIN_PSEUDOCODE_BLOCK;
          }
          // fall through
          case 107:
            break;
          case 48: {
            return END_TOKEN;
          }
          // fall through
          case 108:
            break;
          case 49: {
            yypushState(POSSIBLE_VERBATIM_END);
            return END_TOKEN;
          }
          // fall through
          case 109:
            break;
          case 50: {
            yypushState(POSSIBLE_PSEUDOCODE_END);
            return END_TOKEN;
          }
          // fall through
          case 110:
            break;
          case 51: {
            yypushState(INLINE_VERBATIM_START);
            return COMMAND_TOKEN;
          }
          // fall through
          case 111:
            break;
          case 52: {
            yypushState(TEXT_INSIDE_INLINE_MATH);
            return COMMAND_TOKEN;
          }
          // fall through
          case 112:
            break;
          case 53: {
            return MIDDLE_PSEUDOCODE_BLOCK;
          }
          // fall through
          case 113:
            break;
          case 54: {
            yypushState(POSSIBLE_VERBATIM_BEGIN);
            return BEGIN_TOKEN;
          }
          // fall through
          case 114:
            break;
          case 55: {
            return BEGIN_TOKEN;
          }
          // fall through
          case 115:
            break;
          case 56: {
            return END_PSEUDOCODE_BLOCK;
          }
          // fall through
          case 116:
            break;
          case 57: {
            yypopState();
            return COMMENT_TOKEN;
          }
          // fall through
          case 117:
            break;
          case 58: {
            yypushState(OFF);
            return COMMENT_TOKEN;
          }
          // fall through
          case 118:
            break;
          case 59: {
            return COMMAND_IFNEXTCHAR;
          }
          // fall through
          case 119:
            break;
          case 60: {
            yypushState(NEW_ENVIRONMENT_DEFINITION_NAME);
            return COMMAND_TOKEN;
          }
          // fall through
          case 120:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
