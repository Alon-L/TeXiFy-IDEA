/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int INLINE_VERBATIM_START = 22;
  public static final int INLINE_VERBATIM_PIPE = 24;
  public static final int INLINE_VERBATIM_EXCL_MARK = 26;
  public static final int INLINE_VERBATIM_QUOTES = 28;
  public static final int INLINE_VERBATIM_EQUALS = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int VERBATIM = 40;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 42;
  public static final int POSSIBLE_VERBATIM_END = 44;
  public static final int OFF = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char[] ZZ_CMAP_Z = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char[] ZZ_CMAP_Y = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char[] ZZ_CMAP_A = zzUnpackCMap(
    "\11\0\1\10\1\20\2\22\1\21\22\0\1\10\1\35\1\64\1\0\1\67\1\34\1\45\1\0\1\2\1"+
    "\3\1\62\21\0\1\70\1\42\1\70\1\0\1\24\1\47\3\17\1\57\1\46\2\17\1\51\2\17\1"+
    "\54\3\17\1\56\1\17\1\53\1\17\1\36\1\60\1\17\1\52\1\37\2\17\1\4\1\1\1\5\3\0"+
    "\1\32\1\11\1\30\1\16\1\12\1\25\1\13\1\31\1\14\2\17\1\50\1\66\1\15\1\43\1\40"+
    "\1\17\1\33\1\41\1\27\1\55\1\61\1\65\1\26\2\17\1\6\1\63\1\7\7\0\1\23\32\0\1"+
    "\44\337\0\1\44\177\0\13\44\35\0\2\23\5\0\1\44\57\0\1\44\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\12\1\13\1\2\1\12\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\3\2\1\22\1\23"+
    "\1\1\1\24\1\2\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\22\1\36\1\37\1\40"+
    "\1\41\1\35\1\42\1\43\1\44\1\45\1\46\1\7"+
    "\1\35\2\1\1\47\1\50\1\51\21\47\1\0\2\13"+
    "\1\0\2\13\1\47\1\21\1\52\1\53\1\54\2\36"+
    "\4\0\1\55\10\47\1\56\10\47\1\0\2\13\1\55"+
    "\1\47\4\0\1\47\1\57\2\47\1\56\12\47\2\0"+
    "\2\13\1\47\1\0\1\60\2\0\16\47\1\61\2\47"+
    "\1\62\2\0\2\13\1\63\3\0\1\64\11\47\1\65"+
    "\3\47\1\62\2\0\1\13\1\66\1\0\11\47\1\0"+
    "\1\13\1\0\10\47\1\0\1\13\1\0\5\47\1\0"+
    "\1\13\1\0\2\47\1\62\2\47\1\0\1\13\1\0"+
    "\4\47\1\0\1\13\1\67\2\47\1\0\1\70\1\47"+
    "\1\71\1\47\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u05ca\0\u05ca\0\u05ca\0\u0558"+
    "\0\u05ca\0\u06e7\0\u05ca\0\u05ca\0\u05ca\0\u0720\0\u0759\0\u0792"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u07cb\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u0675\0\u0675\0\u0804"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u083d\0\u0675\0\u0675\0\u0876\0\u08af"+
    "\0\u0675\0\u0675\0\u08e8\0\u0921\0\u095a\0\u0675\0\u0675\0\u0675"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0675\0\u0675\0\u0675\0\u0675\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u08e8\0\u0f96\0\u0675\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u0a05\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u0d5c"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u0a05\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u0675\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u0a05\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u0a05\0\u1eba\0\u1ef3\0\u1f2c\0\u0a05"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u0a05\0\u2166\0\u219f\0\u21d8\0\u0675\0\u2211\0\u224a"+
    "\0\u2283\0\u0675\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u0a05\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u0675\0\u2e17"+
    "\0\u0a05";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\7\31\3\42\1\43\10\31\1\44\1\45\4\31"+
    "\1\45\1\31\1\46\1\47\14\31\1\50\2\45\2\31"+
    "\1\51\2\31\1\52\1\33\1\34\1\53\1\54\1\37"+
    "\1\40\1\41\7\31\3\42\1\43\10\31\1\44\1\45"+
    "\4\31\1\45\1\31\1\46\1\47\14\31\1\50\2\45"+
    "\2\31\1\55\2\31\1\56\1\33\1\34\1\53\1\54"+
    "\1\37\1\40\1\41\7\31\3\42\1\43\10\31\1\44"+
    "\1\45\4\31\1\45\1\31\1\46\1\47\14\31\1\50"+
    "\2\45\2\31\1\46\2\31\1\57\1\33\1\34\1\53"+
    "\1\54\1\37\1\40\1\41\7\31\3\42\1\43\10\31"+
    "\1\44\1\45\4\31\1\45\1\31\1\46\1\47\14\31"+
    "\1\50\2\45\2\31\1\51\2\31\1\60\1\33\1\34"+
    "\1\35\1\36\1\37\1\61\1\41\7\31\3\42\1\43"+
    "\10\31\1\44\1\45\4\31\1\45\1\31\1\46\1\47"+
    "\14\31\1\50\2\45\2\31\1\62\2\31\1\60\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\7\31\3\42"+
    "\1\43\10\31\1\44\1\45\4\31\1\45\1\31\1\46"+
    "\1\47\14\31\1\50\2\45\2\31\1\55\2\31\1\60"+
    "\1\33\1\34\1\35\1\36\1\37\1\61\1\41\7\31"+
    "\3\42\1\43\10\31\1\44\1\45\4\31\1\45\1\31"+
    "\1\46\1\47\14\31\1\50\2\45\2\31\1\63\2\31"+
    "\1\60\1\33\1\34\1\35\1\36\1\37\1\64\1\41"+
    "\7\31\3\42\1\43\10\31\1\44\1\45\4\31\1\45"+
    "\1\31\1\46\1\47\14\31\1\50\2\45\2\31\1\46"+
    "\2\31\1\65\1\33\1\34\1\35\1\36\1\66\1\67"+
    "\1\41\7\31\3\42\1\43\10\31\1\44\1\45\4\31"+
    "\1\45\1\31\1\46\1\47\14\31\1\50\2\45\2\31"+
    "\1\63\2\31\1\60\1\33\1\34\1\35\1\36\1\70"+
    "\1\40\1\41\7\31\3\42\1\43\10\31\1\44\1\45"+
    "\4\31\1\45\1\31\1\46\1\47\14\31\1\50\2\45"+
    "\2\31\1\46\2\31\1\65\1\33\1\34\1\35\1\36"+
    "\1\66\1\71\1\41\7\31\3\42\1\43\10\31\1\44"+
    "\1\45\4\31\1\45\1\31\1\46\1\47\14\31\1\50"+
    "\2\45\2\31\1\63\2\31\1\60\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\7\31\3\42\1\43\10\31"+
    "\1\44\1\72\4\31\1\73\1\31\1\46\1\47\14\31"+
    "\1\50\1\74\1\75\2\31\1\46\1\31\63\76\1\77"+
    "\42\76\1\77\117\76\1\77\46\76\1\77\26\76\1\100"+
    "\1\60\1\33\1\34\1\35\1\36\1\37\1\61\1\41"+
    "\7\100\3\42\1\43\10\100\1\44\1\45\4\100\1\45"+
    "\1\100\1\46\1\47\15\100\2\45\2\100\1\46\1\100"+
    "\1\31\1\60\1\33\1\34\1\101\1\102\1\37\1\40"+
    "\1\41\7\31\3\42\1\43\10\31\1\44\1\45\4\31"+
    "\1\45\1\31\1\46\1\47\14\31\1\50\2\45\2\31"+
    "\1\46\2\31\1\60\1\33\1\34\1\35\1\36\1\37"+
    "\1\103\1\41\7\31\3\42\1\43\10\31\1\44\1\45"+
    "\4\31\1\45\1\31\1\46\1\47\14\31\1\50\2\45"+
    "\2\31\1\46\2\31\1\60\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\7\31\3\42\1\43\10\31\1\44"+
    "\1\45\4\31\1\45\1\31\1\46\1\47\14\31\1\50"+
    "\2\45\2\31\1\46\1\31\1\76\1\104\6\76\1\42"+
    "\7\76\3\42\46\76\4\105\1\106\3\105\1\107\7\105"+
    "\3\107\46\105\1\110\5\111\1\112\2\111\7\110\4\111"+
    "\10\110\2\111\4\110\1\111\1\110\2\111\15\110\2\111"+
    "\2\110\1\111\1\110\34\76\1\113\34\76\1\114\10\0"+
    "\7\114\4\0\10\114\2\0\4\114\1\0\1\114\2\0"+
    "\15\114\2\0\2\114\1\0\1\115\2\116\1\117\1\116"+
    "\1\120\4\116\1\121\1\122\2\123\1\124\2\123\1\0"+
    "\1\116\2\0\1\125\6\123\1\126\2\116\4\123\1\116"+
    "\1\123\2\116\1\127\1\123\1\130\1\131\1\132\1\133"+
    "\1\134\1\123\1\135\1\136\1\137\1\140\3\116\2\123"+
    "\1\116\1\141\70\0\1\142\10\0\1\42\7\0\3\42"+
    "\45\0\1\142\10\0\1\42\7\0\3\42\137\0\10\143"+
    "\1\144\7\143\2\145\1\144\12\143\1\146\32\143\1\147"+
    "\4\116\1\120\4\116\1\121\1\122\2\123\1\124\2\123"+
    "\1\0\1\116\2\0\1\125\2\123\1\150\3\123\1\126"+
    "\2\116\4\123\1\116\1\123\2\116\1\127\1\123\1\130"+
    "\1\131\1\132\1\133\1\134\1\123\1\135\1\136\1\137"+
    "\1\140\3\116\2\123\1\116\1\141\3\116\1\151\1\120"+
    "\4\116\1\121\1\122\2\123\1\124\2\123\1\0\1\116"+
    "\2\0\1\125\6\123\1\126\2\116\4\123\1\116\1\123"+
    "\2\116\1\127\1\123\1\130\1\131\1\132\1\133\1\134"+
    "\1\123\1\135\1\136\1\137\1\140\3\116\2\123\1\116"+
    "\1\141\2\116\1\117\1\116\1\120\1\152\3\116\1\121"+
    "\1\122\2\123\1\124\2\123\1\0\1\116\2\0\1\125"+
    "\6\123\1\126\2\116\4\123\1\116\1\123\2\116\1\127"+
    "\1\123\1\130\1\131\1\132\1\133\1\134\1\123\1\135"+
    "\1\136\1\137\1\140\3\116\2\123\1\116\1\141\4\116"+
    "\1\120\4\116\1\121\1\122\2\123\1\124\2\123\1\0"+
    "\1\116\2\0\1\125\6\123\1\126\2\116\4\123\1\116"+
    "\1\123\2\116\1\127\1\123\1\130\1\131\1\132\1\133"+
    "\1\134\1\123\1\135\1\136\1\137\1\140\3\116\2\123"+
    "\1\116\1\141\4\116\1\153\1\154\3\116\1\121\1\122"+
    "\2\123\1\124\2\123\1\0\1\116\2\0\1\125\6\123"+
    "\1\126\2\116\4\123\1\116\1\123\2\116\1\127\1\123"+
    "\1\130\1\131\1\132\1\133\1\134\1\123\1\135\1\136"+
    "\1\137\1\140\3\116\2\123\1\116\1\141\1\155\10\0"+
    "\7\155\4\0\10\155\2\0\4\155\1\0\1\155\2\0"+
    "\15\155\2\0\2\155\1\0\1\156\11\0\1\157\1\160"+
    "\66\0\1\107\7\0\3\107\46\0\1\110\10\0\7\110"+
    "\4\0\10\110\2\0\4\110\1\0\1\110\2\0\15\110"+
    "\2\0\2\110\1\0\1\110\10\0\1\161\7\0\3\161"+
    "\12\0\1\162\33\0\1\114\10\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\15\114\2\0\2\114"+
    "\1\0\2\114\5\0\1\163\2\0\7\114\4\0\10\114"+
    "\2\0\4\114\1\0\1\114\2\0\15\114\2\0\2\114"+
    "\1\0\1\114\11\0\1\123\1\164\5\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\4\123\1\165\2\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\1\123\1\166\5\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\3\123\1\167\3\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\1\123"+
    "\1\170\5\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\171\2\0\7\123\1\172\4\123"+
    "\3\0\2\123\13\0\7\123\4\0\10\123\2\0\3\123"+
    "\1\173\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\1\123\1\174\6\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\7\123\4\0"+
    "\5\123\1\175\2\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\1\123\1\176\5\123\4\0"+
    "\10\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\7\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\177\2\0\14\123\3\0\2\123\13\0\7\123\4\0"+
    "\7\123\1\200\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\4\123\1\201\2\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\2\123\1\202\11\123"+
    "\3\0\2\123\13\0\4\123\1\203\2\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\1\123\1\204\5\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\10\0\1\163"+
    "\62\0\20\143\2\0\57\143\1\144\7\143\2\145\1\144"+
    "\12\143\1\146\33\143\10\0\1\145\7\0\3\145\12\0"+
    "\1\205\33\0\10\143\1\146\7\143\2\205\1\146\13\143"+
    "\1\206\1\143\1\207\36\143\1\210\11\143\2\0\47\143"+
    "\11\0\1\123\1\211\5\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\2\0\1\155"+
    "\10\0\7\155\4\0\10\155\2\0\4\155\1\0\1\155"+
    "\2\0\15\155\2\0\2\155\1\0\2\155\5\0\1\163"+
    "\2\0\7\155\4\0\10\155\2\0\4\155\1\0\1\155"+
    "\2\0\15\155\2\0\2\155\1\0\1\155\12\0\1\212"+
    "\73\0\1\213\63\0\1\162\7\0\3\162\13\0\1\214"+
    "\1\0\1\215\41\0\2\123\1\216\4\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\5\123\1\217\1\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\1\220\1\123\13\0\7\123\4\0\1\123\1\221"+
    "\6\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\4\123\1\124\2\123\4\0\10\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\7\123\1\222\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\4\123\1\223\2\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\3\123\1\224\4\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\3\123\1\225\3\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\2\123\1\226\1\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\227\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\10\123\2\0\4\123\1\0\1\230"+
    "\2\0\14\123\3\0\2\123\13\0\5\123\1\231\1\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\10\123\2\0\3\123"+
    "\1\232\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\3\123\1\233\4\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\7\123\4\0"+
    "\7\123\1\234\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\12\0\1\205\7\0\3\205\13\0\1\235"+
    "\1\0\1\236\30\0\12\143\1\237\5\143\2\0\67\143"+
    "\2\0\10\143\1\240\36\143\11\0\7\123\4\0\2\123"+
    "\1\241\5\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\15\0\1\242\73\0\1\243\64\0\1\244"+
    "\110\0\1\245\47\0\3\123\1\246\3\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\1\123\1\247\5\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\4\123"+
    "\1\250\2\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\1\123\1\251\12\123"+
    "\3\0\2\123\13\0\7\123\4\0\4\123\1\252\3\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\3\123\1\253\3\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\2\123"+
    "\1\254\11\123\3\0\2\123\13\0\1\123\1\255\5\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\10\123\2\0\2\123"+
    "\1\174\1\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\4\123\1\256\3\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\1\257"+
    "\2\123\1\260\1\261\1\123\1\262\1\123\1\263\3\123"+
    "\3\0\2\123\13\0\1\123\1\264\5\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\3\123\1\265\10\123"+
    "\3\0\2\123\13\0\3\123\1\266\3\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\1\267\6\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\14\0\1\270\110\0"+
    "\1\271\36\0\20\143\2\0\15\143\1\272\51\143\2\0"+
    "\11\143\1\273\35\143\11\0\7\123\4\0\3\123\1\274"+
    "\4\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\16\0\1\275\113\0\1\276\64\0\1\277\46\0"+
    "\4\123\1\300\2\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\4\123\1\301"+
    "\2\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\1\123\1\302\5\123\4\0"+
    "\10\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\7\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\2\123\1\303\11\123\3\0\2\123\13\0"+
    "\7\123\4\0\3\123\1\304\4\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\4\123\1\305"+
    "\2\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\1\123\1\174\5\123\4\0"+
    "\10\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\7\123\4\0\6\123\1\306\1\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\1\123\1\307\5\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\7\123\4\0"+
    "\10\123\2\0\4\123\1\0\1\310\2\0\7\123\1\311"+
    "\4\123\3\0\2\123\13\0\7\123\4\0\1\123\1\312"+
    "\6\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\7\123\4\0\5\123\1\313\2\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\10\123\2\0\4\123\1\0\1\314\2\0"+
    "\14\123\3\0\2\123\13\0\7\123\4\0\7\123\1\315"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\1\123\1\264\6\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\2\123"+
    "\1\312\11\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\1\316\2\0"+
    "\2\123\41\0\1\317\64\0\1\320\35\0\10\143\1\272"+
    "\7\143\2\317\1\272\15\143\1\207\50\143\2\0\17\143"+
    "\1\321\27\143\15\0\1\322\63\0\1\276\7\0\3\276"+
    "\15\0\1\215\71\0\1\323\40\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\13\123\1\324\3\0"+
    "\2\123\13\0\7\123\4\0\2\123\1\325\5\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\2\123\1\174\11\123\3\0\2\123\13\0\3\123\1\326"+
    "\3\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\7\123\4\0\10\123\2\0"+
    "\4\123\1\0\1\123\2\0\2\123\1\327\11\123\3\0"+
    "\2\123\13\0\7\123\4\0\3\123\1\174\4\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\5\123\1\330\1\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\7\123\4\0"+
    "\7\123\1\312\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\4\123\1\331\2\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\3\123\1\332\3\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\333\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\334\2\0\14\123\3\0\2\123\12\0\1\317"+
    "\7\0\3\317\15\0\1\236\71\0\1\335\27\0\12\143"+
    "\1\336\5\143\2\0\47\143\12\0\1\337\67\0\3\123"+
    "\1\340\3\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\3\123"+
    "\1\341\4\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\342\2\0\14\123\3\0\2\123\13\0\3\123"+
    "\1\343\3\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\7\123\1\344\4\123"+
    "\3\0\2\123\13\0\7\123\4\0\4\123\1\345\3\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\2\123\1\346\11\123\3\0\2\123\13\0\7\123"+
    "\4\0\10\123\2\0\2\123\1\312\1\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\4\123"+
    "\1\347\3\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\14\0\1\350\56\0\20\143\2\0\11\143"+
    "\1\351\35\143\33\0\1\352\46\0\7\123\4\0\7\123"+
    "\1\353\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\7\123\4\0\4\123\1\354\3\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\13\0"+
    "\4\123\1\174\2\123\4\0\10\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\4\123\1\355"+
    "\2\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\7\123\4\0\7\123\1\254"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\3\123\1\356\4\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\13\0\1\123"+
    "\1\312\5\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\2\123\13\0\1\123\1\357\5\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\35\0\1\360\35\0\10\143\1\351\7\143"+
    "\2\360\1\351\17\143\1\361\26\143\10\0\1\352\7\0"+
    "\3\352\17\0\1\362\37\0\7\123\4\0\10\123\2\0"+
    "\4\123\1\0\1\363\2\0\14\123\3\0\2\123\13\0"+
    "\7\123\4\0\5\123\1\364\2\123\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\13\0\1\123\1\365"+
    "\5\123\4\0\10\123\2\0\4\123\1\0\1\123\2\0"+
    "\14\123\3\0\2\123\13\0\3\123\1\366\3\123\4\0"+
    "\10\123\2\0\4\123\1\0\1\123\2\0\14\123\3\0"+
    "\2\123\13\0\5\123\1\367\1\123\4\0\10\123\2\0"+
    "\4\123\1\0\1\123\2\0\14\123\3\0\2\123\12\0"+
    "\1\360\7\0\3\360\17\0\1\370\26\0\10\143\1\361"+
    "\7\143\2\370\1\361\20\143\1\371\25\143\10\0\1\362"+
    "\7\0\3\362\20\0\1\372\36\0\4\123\1\373\2\123"+
    "\4\0\10\123\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\7\123\4\0\6\123\1\374\1\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\10\123\2\0\4\123\1\0\1\375"+
    "\2\0\14\123\3\0\2\123\13\0\7\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\7\123\1\376\4\123"+
    "\3\0\2\123\12\0\1\370\7\0\3\370\20\0\1\377"+
    "\25\0\20\143\2\0\3\143\1\u0100\43\143\15\0\1\u0101"+
    "\64\0\7\123\4\0\10\123\2\0\4\123\1\0\1\123"+
    "\2\0\14\123\3\0\1\123\1\u0102\13\0\7\123\4\0"+
    "\7\123\1\u0103\2\0\4\123\1\0\1\123\2\0\14\123"+
    "\3\0\2\123\13\0\4\123\1\312\2\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\7\123\1\346\2\0\4\123\1\0"+
    "\1\123\2\0\14\123\3\0\2\123\27\0\1\u0104\43\0"+
    "\20\143\2\0\3\143\1\u0105\43\143\20\u0101\2\0\47\u0101"+
    "\11\0\1\123\1\u0106\5\123\4\0\10\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\2\0\11\u0107"+
    "\7\123\4\0\10\123\2\u0107\4\123\1\u0107\1\123\2\u0107"+
    "\14\123\3\u0107\2\123\2\u0107\25\0\1\u0105\43\0\20\u0105"+
    "\2\0\47\u0105\11\0\4\123\1\u0108\2\123\4\0\10\123"+
    "\2\0\4\123\1\0\1\123\2\0\14\123\3\0\2\123"+
    "\13\0\7\123\4\0\3\123\1\u0109\4\123\2\0\4\123"+
    "\1\0\1\123\2\0\14\123\3\0\2\123\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\30\0\12\1\1\11\32\1\2\11\5\1\2\11\2\1"+
    "\2\11\3\1\3\11\21\1\1\0\2\1\1\0\3\1"+
    "\4\11\2\1\4\0\1\11\21\1\1\0\4\1\4\0"+
    "\17\1\2\0\3\1\1\0\1\11\2\0\22\1\2\0"+
    "\3\1\3\0\16\1\1\11\2\0\1\1\1\11\1\0"+
    "\11\1\1\0\1\1\1\0\10\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\4\1\1\0\4\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private final java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this(null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 59: break;
          case 2: 
            { return NORMAL_TEXT_CHAR;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 61: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 62: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 63: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 64: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 65: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 66: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 68: break;
          case 11: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 69: break;
          case 12: 
            { return AMPERSAND;
            } 
            // fall through
          case 70: break;
          case 13: 
            { return STAR;
            } 
            // fall through
          case 71: break;
          case 14: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 72: break;
          case 15: 
            { return M_OPEN_BRACKET;
            } 
            // fall through
          case 73: break;
          case 16: 
            { return M_CLOSE_BRACKET;
            } 
            // fall through
          case 74: break;
          case 17: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 75: break;
          case 18: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 76: break;
          case 19: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 77: break;
          case 20: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 78: break;
          case 21: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 79: break;
          case 22: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 80: break;
          case 23: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 81: break;
          case 24: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 82: break;
          case 25: 
            { yypopState(); yypushState(INLINE_VERBATIM_EXCL_MARK); return OPEN_BRACE;
            } 
            // fall through
          case 83: break;
          case 26: 
            { yypopState(); yypushState(INLINE_VERBATIM_EQUALS); return OPEN_BRACE;
            } 
            // fall through
          case 84: break;
          case 27: 
            { yypopState(); yypushState(INLINE_VERBATIM_PIPE); return OPEN_BRACE;
            } 
            // fall through
          case 85: break;
          case 28: 
            { yypopState(); yypushState(INLINE_VERBATIM_QUOTES); return OPEN_BRACE;
            } 
            // fall through
          case 86: break;
          case 29: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 87: break;
          case 30: 
            { yypopState();
        // toString to fix comparisons of charsequence subsequences with string
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            yypushState(VERBATIM_START);
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 88: break;
          case 31: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 89: break;
          case 32: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) yypopState(); yypushState(VERBATIM);
        return CLOSE_BRACKET;
            } 
            // fall through
          case 90: break;
          case 33: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 91: break;
          case 34: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 92: break;
          case 35: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 93: break;
          case 36: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 94: break;
          case 37: 
            { // Pop current state
        yypopState();
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 95: break;
          case 38: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 96: break;
          case 39: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 97: break;
          case 40: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 98: break;
          case 41: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 99: break;
          case 42: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 100: break;
          case 43: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 101: break;
          case 44: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 102: break;
          case 45: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 103: break;
          case 46: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 104: break;
          case 47: 
            { return END_TOKEN;
            } 
            // fall through
          case 105: break;
          case 48: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 106: break;
          case 49: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 107: break;
          case 50: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 108: break;
          case 51: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 109: break;
          case 52: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 110: break;
          case 53: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 111: break;
          case 54: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 112: break;
          case 55: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 113: break;
          case 56: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 114: break;
          case 57: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 115: break;
          case 58: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
