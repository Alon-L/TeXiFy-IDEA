/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.magic.EnvironmentMagic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_NAME = 22;
  public static final int NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC = 24;
  public static final int LATEX3 = 26;
  public static final int INLINE_VERBATIM_START = 28;
  public static final int INLINE_VERBATIM = 30;
  public static final int POSSIBLE_VERBATIM_BEGIN = 32;
  public static final int VERBATIM_OPTIONAL_ARG = 34;
  public static final int VERBATIM_START = 36;
  public static final int VERBATIM_END = 38;
  public static final int VERBATIM = 40;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 42;
  public static final int POSSIBLE_VERBATIM_END = 44;
  public static final int PSEUDOCODE = 46;
  public static final int POSSIBLE_PSEUDOCODE_END = 48;
  public static final int OFF = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\57\1\56\1\100\1\0\1\73\1\62\1\76\1\0\1\2"+
    "\1\3\1\54\1\0\1\77\15\0\1\34\1\0\1\74\1\63\1\75\1\0\1\17\1\66\2\33\1\52\1"+
    "\35\1\65\2\33\1\67\2\33\1\71\1\33\1\47\1\42\1\51\1\33\1\50\1\40\1\60\1\72"+
    "\1\33\1\70\1\61\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16\1\12\1\20"+
    "\1\13\1\24\1\14\2\33\1\37\1\46\1\15\1\45\1\36\1\33\1\26\1\55\1\22\1\53\1\44"+
    "\1\43\1\21\1\41\1\33\1\6\1\101\1\7\7\0\1\32\32\0\1\64\337\0\1\64\177\0\13"+
    "\64\35\0\2\32\5\0\1\64\57\0\1\64\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\31\1\32\1\1\1\33\1\2"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\2\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\2\1\57\1\51\1\60"+
    "\1\61\1\62\21\60\1\15\1\63\1\15\1\64\1\60"+
    "\1\65\1\66\1\67\17\60\2\0\11\60\2\0\21\60"+
    "\1\63\1\0\1\63\1\15\20\60\2\0\7\60\1\70"+
    "\3\60\2\0\1\60\1\71\14\60\1\72\1\0\1\63"+
    "\1\15\15\60\1\72\1\0\1\73\1\74\4\60\1\70"+
    "\4\60\2\0\7\60\1\72\3\60\1\0\1\63\1\15"+
    "\1\75\6\60\1\72\3\60\1\0\5\60\1\76\7\60"+
    "\2\0\1\77\6\60\1\72\3\60\1\0\1\63\11\60"+
    "\1\100\3\60\1\101\6\60\1\0\10\60\1\0\1\63"+
    "\16\60\1\0\6\60\1\0\1\63\13\60\1\0\6\60"+
    "\1\0\1\63\10\60\1\0\4\60\1\0\1\63\6\60"+
    "\1\0\4\60\1\0\1\63\6\60\1\102\4\60\1\0"+
    "\1\103\5\60\1\104\1\105\2\60\1\105\5\60\1\106"+
    "\1\60\1\107\1\60\1\107\17\60\2\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u0738\0\u0738\0\u0738"+
    "\0\u0738\0\u0738\0\u077a\0\u0738\0\u06b4\0\u0738\0\u07bc\0\u0738"+
    "\0\u0738\0\u07fe\0\u07fe\0\u0738\0\u0738\0\u0738\0\u0738\0\u0840"+
    "\0\u0738\0\u0882\0\u08c4\0\u0906\0\u0738\0\u0738\0\u0738\0\u0738"+
    "\0\u0738\0\u0738\0\u0948\0\u0738\0\u0738\0\u0738\0\u0738\0\u0738"+
    "\0\u0738\0\u098a\0\u0738\0\u0738\0\u0738\0\u09cc\0\u0738\0\u0738"+
    "\0\u0738\0\u0738\0\u0a0e\0\u0738\0\u0738\0\u0a50\0\u0a92\0\u0738"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0738\0\u0738\0\u0738\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u0738\0\u10c2\0\u0738\0\u0738\0\u0738\0\u1104"+
    "\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u0c1e\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562"+
    "\0\u0c1e\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u0c1e\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u1104\0\u2cdc"+
    "\0\u0738\0\u0c1e\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68"+
    "\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078"+
    "\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288"+
    "\0\u32ca\0\u330c\0\u334e\0\u0c1e\0\u3390\0\u33d2\0\u3414\0\u3456"+
    "\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666"+
    "\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u0c1e\0\u37b0\0\u37f2\0\u3834"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u0c1e\0\u3a02"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u0738\0\u3b8e\0\u3bd0"+
    "\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0"+
    "\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u0738\0\u3f2a\0\u3f6c\0\u3fae"+
    "\0\u0c1e\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c"+
    "\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c"+
    "\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac"+
    "\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc"+
    "\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc"+
    "\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec"+
    "\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba\0\u51fc"+
    "\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c"+
    "\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c"+
    "\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea\0\u582c"+
    "\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa\0\u5a3c"+
    "\0\u5a7e\0\u5ac0\0\u5b02\0\u0738\0\u0c1e\0\u5b44\0\u5b86\0\u1104"+
    "\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u1104\0\u5d12\0\u0c1e"+
    "\0\u5d54\0\u1104\0\u5d96\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0"+
    "\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0"+
    "\0\u6132\0\u0c1e\0\u1104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\16\33\3\43\1\44\21\33\1\45\1\33\1\46"+
    "\1\43\2\33\1\47\1\50\1\44\6\33\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\33\1\60\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\16\33\3\43"+
    "\1\44\21\33\1\45\1\33\1\46\1\43\2\33\1\47"+
    "\1\50\1\44\6\33\1\61\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\33\1\62\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\16\33\3\43\1\44\21\33\1\45"+
    "\1\33\1\46\1\43\2\33\1\47\1\50\1\44\6\33"+
    "\1\44\1\52\1\53\1\54\1\55\1\56\1\57\1\33"+
    "\1\63\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\16\33\3\43\1\44\21\33\1\45\1\33\1\46\1\43"+
    "\2\33\1\47\1\50\1\44\6\33\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\33\1\64\1\35\1\36"+
    "\1\37\1\40\1\41\1\65\1\43\16\33\3\43\1\44"+
    "\21\33\1\45\1\33\1\46\1\43\2\33\1\47\1\50"+
    "\1\44\6\33\1\66\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\33\1\64\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\16\33\3\43\1\44\21\33\1\45\1\33"+
    "\1\46\1\43\2\33\1\47\1\50\1\44\6\33\1\61"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\33\1\64"+
    "\1\35\1\36\1\37\1\40\1\67\1\70\1\43\16\33"+
    "\3\43\1\44\21\33\1\45\1\33\1\46\1\43\2\33"+
    "\1\47\1\50\1\44\6\33\1\71\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\33\1\64\1\35\1\36\1\37"+
    "\1\40\1\41\1\72\1\43\16\33\3\43\1\44\21\33"+
    "\1\45\1\33\1\46\1\43\2\33\1\47\1\50\1\44"+
    "\6\33\1\44\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\33\1\73\1\35\1\36\1\37\1\40\1\74\1\75"+
    "\1\43\16\33\3\43\1\44\21\33\1\45\1\33\1\46"+
    "\1\43\2\33\1\47\1\50\1\44\6\33\1\71\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\33\1\64\1\35"+
    "\1\36\1\37\1\40\1\76\1\42\1\43\16\33\3\43"+
    "\1\44\21\33\1\45\1\33\1\46\1\43\2\33\1\47"+
    "\1\50\1\44\6\33\1\44\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\33\1\73\1\35\1\36\1\37\1\40"+
    "\1\74\1\77\1\43\16\33\3\43\1\44\21\33\1\45"+
    "\1\33\1\46\1\43\2\33\1\47\1\50\1\44\6\33"+
    "\1\71\1\52\1\53\1\54\1\55\1\56\1\57\1\33"+
    "\1\64\1\35\1\36\1\37\1\40\1\41\1\100\1\43"+
    "\16\33\3\43\1\44\21\33\1\45\1\33\1\46\1\43"+
    "\2\33\1\47\1\50\1\44\6\33\1\44\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\33\1\64\1\35\1\36"+
    "\1\37\1\40\1\74\1\101\1\43\16\33\3\43\1\44"+
    "\21\33\1\45\1\33\1\46\1\43\2\33\1\47\1\50"+
    "\1\44\6\33\1\44\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\33\1\102\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\16\33\3\43\1\44\21\33\1\45\1\33"+
    "\1\46\1\43\2\33\1\47\1\50\1\44\6\33\1\44"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\6\103\1\104"+
    "\73\103\102\105\1\106\1\73\1\35\1\36\1\37\1\40"+
    "\1\74\1\65\1\43\16\106\3\43\1\44\23\106\1\46"+
    "\1\43\2\106\1\47\1\50\1\44\6\106\1\71\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\33\1\64\1\35"+
    "\1\36\1\107\1\110\1\41\1\42\1\43\16\33\3\43"+
    "\1\44\21\33\1\45\1\33\1\46\1\43\2\33\1\47"+
    "\1\50\1\44\6\33\1\44\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\33\1\64\1\35\1\36\1\37\1\40"+
    "\1\41\1\111\1\43\16\33\3\43\1\44\21\33\1\45"+
    "\1\33\1\46\1\43\2\33\1\47\1\50\1\44\6\33"+
    "\1\44\1\52\1\53\1\54\1\55\1\56\1\57\1\33"+
    "\1\64\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\16\33\3\43\1\44\21\33\1\45\1\33\1\46\1\43"+
    "\2\33\1\47\1\50\1\44\6\33\1\44\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\112\1\113\6\112\1\43"+
    "\16\112\3\43\25\112\1\43\22\112\4\114\1\115\3\114"+
    "\1\116\16\114\3\116\25\114\1\116\22\114\1\117\5\120"+
    "\1\41\2\120\16\117\4\120\23\117\2\120\2\117\3\120"+
    "\6\117\7\120\1\33\1\121\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\16\33\3\43\1\44\21\33\1\45"+
    "\1\33\1\46\1\43\2\33\1\47\1\50\1\44\6\33"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\122"+
    "\1\64\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\16\122\3\43\1\44\23\122\1\46\1\43\2\122\1\47"+
    "\1\50\1\44\6\122\1\44\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\62\112\1\123\17\112\1\33\10\0\16\33"+
    "\4\0\23\33\2\0\2\33\3\0\6\33\7\0\2\124"+
    "\1\125\1\124\1\126\4\124\1\127\1\130\2\131\1\132"+
    "\1\133\1\134\4\131\1\135\1\131\1\136\1\0\1\124"+
    "\2\0\1\131\1\124\1\137\1\140\1\141\4\131\1\142"+
    "\2\131\1\143\1\144\1\145\1\146\1\147\1\124\1\131"+
    "\2\124\2\131\3\124\6\131\7\124\112\0\1\43\16\0"+
    "\3\43\25\0\1\43\22\0\27\150\2\0\25\150\1\151"+
    "\1\152\22\150\6\0\1\153\73\0\4\124\1\126\4\124"+
    "\1\127\1\130\2\131\1\132\1\133\1\134\2\131\1\154"+
    "\1\131\1\135\1\131\1\136\1\0\1\124\2\0\1\131"+
    "\1\124\1\137\1\140\1\141\4\131\1\142\2\131\1\143"+
    "\1\144\1\145\1\146\1\147\1\124\1\131\2\124\2\131"+
    "\3\124\6\131\12\124\1\61\1\126\4\124\1\127\1\130"+
    "\2\131\1\132\1\133\1\134\4\131\1\135\1\131\1\136"+
    "\1\0\1\124\2\0\1\131\1\124\1\137\1\140\1\141"+
    "\4\131\1\142\2\131\1\143\1\144\1\145\1\146\1\147"+
    "\1\124\1\131\2\124\2\131\3\124\6\131\11\124\1\125"+
    "\1\124\1\126\1\155\3\124\1\127\1\130\2\131\1\132"+
    "\1\133\1\134\4\131\1\135\1\131\1\136\1\0\1\124"+
    "\2\0\1\131\1\124\1\137\1\140\1\141\4\131\1\142"+
    "\2\131\1\143\1\144\1\145\1\146\1\147\1\124\1\131"+
    "\2\124\2\131\3\124\6\131\13\124\1\126\4\124\1\127"+
    "\1\130\2\131\1\132\1\133\1\134\4\131\1\135\1\131"+
    "\1\136\1\0\1\124\2\0\1\131\1\124\1\137\1\140"+
    "\1\141\4\131\1\142\2\131\1\143\1\144\1\145\1\146"+
    "\1\147\1\124\1\131\2\124\2\131\3\124\6\131\13\124"+
    "\1\156\1\157\3\124\1\127\1\130\2\131\1\132\1\133"+
    "\1\134\4\131\1\135\1\131\1\136\1\0\1\124\2\0"+
    "\1\131\1\124\1\137\1\140\1\141\4\131\1\142\2\131"+
    "\1\143\1\144\1\145\1\146\1\147\1\124\1\131\2\124"+
    "\2\131\3\124\6\131\13\124\1\126\4\124\4\160\1\161"+
    "\1\162\1\163\4\160\1\164\1\160\1\165\1\0\1\124"+
    "\2\0\2\160\1\166\1\167\1\170\4\160\1\171\2\160"+
    "\1\172\1\173\1\174\1\175\1\176\1\124\1\160\2\124"+
    "\2\160\3\124\6\160\7\124\1\106\10\0\16\106\4\0"+
    "\23\106\2\0\2\106\3\0\6\106\20\0\1\177\1\200"+
    "\77\0\1\116\16\0\3\116\25\0\1\116\22\0\1\117"+
    "\10\0\16\117\4\0\23\117\2\0\2\117\3\0\6\117"+
    "\7\0\2\124\1\125\1\124\1\126\4\124\1\127\1\201"+
    "\2\131\1\132\1\133\1\134\4\131\1\135\1\131\1\136"+
    "\1\0\1\124\2\0\1\131\1\124\1\202\1\140\1\141"+
    "\4\131\1\142\2\131\1\143\1\203\1\204\1\146\1\147"+
    "\1\124\1\131\2\124\2\131\3\124\1\205\1\131\1\206"+
    "\1\207\1\210\1\211\7\124\1\122\10\0\16\122\4\0"+
    "\23\122\2\0\2\122\3\0\6\122\65\0\1\212\1\213"+
    "\33\0\1\131\1\214\14\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\4\131"+
    "\1\215\11\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\1\131\1\216\14\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\3\131"+
    "\1\217\12\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\3\131\1\220\12\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\15\131\1\221\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\1\131\1\222\14\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\10\131\1\223"+
    "\5\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\14\131\1\224\1\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\16\131\1\225"+
    "\1\0\1\226\2\0\2\131\3\0\6\131\20\0\1\131"+
    "\1\227\14\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\1\131\1\230\14\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\1\131\1\231\14\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\15\131\1\232\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\1\131\1\233"+
    "\14\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\15\131\1\234\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\7\0\27\150\2\0\51\150\10\235\1\151\16\235\2\236"+
    "\1\151\4\235\1\237\20\235\1\151\22\235\27\150\2\0"+
    "\25\150\1\240\23\150\11\0\1\131\1\241\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\1\160\1\242\14\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\3\160\1\243\12\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\3\160\1\244\12\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\15\160\1\245\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\1\160\1\246\14\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\10\160"+
    "\1\247\5\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\14\160\1\250\1\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\16\160"+
    "\4\0\20\160\1\251\1\0\1\252\2\0\2\160\3\0"+
    "\6\160\20\0\1\160\1\253\14\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\1\160\1\254"+
    "\14\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\1\160\1\255\14\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\15\160\1\256"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\1\160\1\257\14\160\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\15\160\1\260\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\21\0"+
    "\1\261\104\0\1\262\75\0\4\131\1\263\11\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\4\131\1\264\3\131\1\223\5\131\4\0"+
    "\1\131\1\0\2\131\1\265\14\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\1\131\1\266\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\15\131\1\267\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\10\131\1\270\5\131\1\271\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\7\131\1\272"+
    "\6\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\13\131\1\273\2\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\10\131\1\274"+
    "\6\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\4\131\1\275\11\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\17\0\1\212\16\0"+
    "\3\212\4\0\1\276\20\0\1\212\100\0\1\277\34\0"+
    "\2\131\1\300\13\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\5\131\1\301"+
    "\10\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\16\131\4\0\1\131\1\0"+
    "\6\131\1\302\10\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\15\131\1\303\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\7\131"+
    "\1\304\6\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\1\131\1\305\14\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\4\131\1\132\11\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\1\131\1\306\15\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\11\131"+
    "\1\307\4\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\14\131\1\310\1\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\11\131\1\311\4\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\15\131\1\312\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\16\131\4\0"+
    "\1\131\1\0\6\131\1\313\10\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\4\131\1\143\11\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\10\131\1\314"+
    "\6\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\12\131\1\315\3\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\16\131\4\0"+
    "\1\131\1\0\2\131\1\316\14\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\7\0\27\235\2\0\51\235\10\0"+
    "\1\236\16\0\3\236\4\0\1\317\20\0\1\236\22\0"+
    "\25\235\1\320\1\235\2\0\51\235\22\150\1\321\4\150"+
    "\2\0\27\150\1\321\21\150\11\0\10\131\1\322\5\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\160\4\0\10\160\1\323\10\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\15\160"+
    "\1\324\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\7\160\1\325\6\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\1\160\1\326"+
    "\14\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\4\160\1\161\11\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\16\160\4\0"+
    "\3\160\1\327\15\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\11\160\1\330\4\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\14\160\1\331"+
    "\1\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\11\160\1\332\4\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\15\160\1\333"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\16\160\4\0\10\160\1\334\10\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\4\160\1\172\11\160"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\16\160\4\0\12\160\1\335\6\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\12\160\1\336\3\160"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\16\160\4\0\4\160\1\337\14\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\22\0\1\340\104\0\1\341"+
    "\74\0\5\131\1\342\10\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\5\131"+
    "\1\343\10\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\344\2\0\2\131\3\0\6\131"+
    "\20\0\4\131\1\143\11\131\4\0\1\131\1\0\1\131"+
    "\1\345\15\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\10\131\1\346\6\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\15\131"+
    "\1\347\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\4\131\1\350\11\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\3\131\1\351\12\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\16\131\4\0\1\131\1\0\10\131\1\352\6\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\11\131\1\353"+
    "\4\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\34\0\1\354\76\0\1\355\35\0"+
    "\1\355\32\0\3\131\1\356\12\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\1\131\1\357\14\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\1\131\1\360"+
    "\14\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\4\131\1\361\11\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\7\131\1\316\6\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\16\131\4\0\1\131\1\0\2\131\1\362\14\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\13\131\1\316"+
    "\2\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\1\131\1\363\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\3\131\1\364\12\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\1\365\15\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\15\131\1\366\1\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\131\4\0\1\131\1\0\7\131"+
    "\1\367\7\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\2\131\1\370\14\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\34\0\1\371"+
    "\54\0\26\235\1\372\2\0\51\235\12\150\1\373\14\150"+
    "\2\0\4\150\1\373\44\150\11\0\11\131\1\374\4\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\1\160\1\375\14\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\1\160"+
    "\1\376\14\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\4\160\1\377\11\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\7\160"+
    "\1\337\6\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\16\160\4\0\4\160\1\u0100\14\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\13\160"+
    "\1\337\2\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\1\160\1\u0101\14\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\3\160"+
    "\1\u0102\12\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\1\u0103\15\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\16\160\4\0"+
    "\17\160\1\u0104\1\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\16\160\4\0\11\160\1\u0105\7\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\16\160\4\0"+
    "\4\160\1\u0106\14\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\23\0\1\u0107\76\0\16\131\4\0\1\131\1\0"+
    "\14\131\1\u0108\2\131\1\0\1\131\2\0\2\131\3\0"+
    "\1\u0109\1\131\1\u010a\1\u010b\1\u010c\1\131\20\0\1\131"+
    "\1\u010d\14\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\2\131\1\u010e\3\131\20\0\1\131"+
    "\1\u010f\14\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\12\131\1\u0110\3\131"+
    "\4\0\1\131\1\0\7\131\1\367\7\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\1\131"+
    "\1\u0111\4\131\20\0\12\131\1\u0112\3\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\2\131\1\u0113\14\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\1\131\1\272\15\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\3\131\1\u0114\12\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\35\0\1\u0115\65\0\1\u0116\22\0\1\u0116"+
    "\55\0\4\131\1\u0117\11\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\4\131"+
    "\1\u0118\11\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\12\131\1\u0119\3\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\1\131\1\u011a\14\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\3\131\1\u011b\13\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\10\131"+
    "\1\u011c\5\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\4\131\1\u011d\11\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\131\4\0\1\131\1\0\17\131"+
    "\1\u011e\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\10\131\1\u011f\6\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\3\131\1\u0120\12\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\14\131\1\u0121\1\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\35\0\1\u0122\53\0\27\235\2\0\24\235\1\u0123\24\235"+
    "\21\150\1\151\5\150\2\0\30\150\1\151\20\150\11\0"+
    "\4\160\1\u0124\11\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\12\160\1\u0125\3\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\1\160\1\u0126\14\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\16\160\4\0\5\160\1\u0127"+
    "\13\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\10\160\1\u0128\5\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\4\160\1\u0129\11\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\16\160\4\0\21\160\1\u011e\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\16\160\4\0\12\160\1\u012a\6\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\3\160\1\u012b"+
    "\12\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\14\160\1\u012c\1\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\24\0\1\u012d\75\0"+
    "\15\131\1\u012e\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\10\131\1\u012f\5\131\1\u0130\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\7\131\1\u0131\6\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\13\131\1\u0132\2\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\16\131\4\0\1\131\1\0\10\131\1\u0133\6\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\7\131\1\u010d"+
    "\6\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\14\131\1\u0134\1\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\1\131\1\u0135\14\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\16\131\4\0\1\131\1\0\2\131\1\u0136\14\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\11\131\1\u0137"+
    "\4\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\1\131\1\272\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\2\131\1\u0131"+
    "\14\131\1\0\1\131\2\0\2\131\3\0\6\131\64\0"+
    "\1\u0138\45\0\1\212\37\0\1\212\31\0\16\131\4\0"+
    "\1\131\1\0\7\131\1\u0139\7\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\11\131\1\u013a\4\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\10\131\1\u013b\5\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\16\131\4\0\1\131\1\0\4\131\1\u013c\12\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\1\131\1\u013d"+
    "\14\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\16\131\4\0\1\131\1\0"+
    "\2\131\1\u013e\14\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\12\131\1\u013f\3\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\5\131\1\u0140\10\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\15\131\1\u0140"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\64\0\1\u0141\24\0\12\235\1\u0142\14\235"+
    "\2\0\51\235\11\0\16\160\4\0\11\160\1\u0143\7\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\11\160"+
    "\1\u0144\4\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\10\160\1\u0145\5\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\16\160"+
    "\4\0\6\160\1\u0146\12\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\1\160\1\u0147\14\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\16\160"+
    "\4\0\4\160\1\u0148\14\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\12\160\1\u0149\3\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\5\160"+
    "\1\u014a\10\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\15\160\1\u014a\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\16\131\4\0"+
    "\1\131\1\0\10\131\1\u014b\6\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\15\131\1\u0131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\4\131\1\u014c\11\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\3\131"+
    "\1\u014d\12\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\16\131\4\0\1\131"+
    "\1\0\10\131\1\u014e\6\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\11\131\1\272\4\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\5\131\1\u014f\10\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\2\131\1\272\14\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\3\131\1\u0150\12\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\21\0\1\u0151\100\0\3\131\1\u0152\12\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\131\4\0\1\131\1\0\2\131"+
    "\1\u0153\14\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\11\131\1\u0154\4\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\4\131"+
    "\1\u0155\11\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\12\131\1\316\3\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\3\131\1\u0156\12\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\16\131\1\u0157\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\1\131\1\313"+
    "\14\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\21\0\1\u0158\67\0\26\235\1\u0159"+
    "\2\0\51\235\11\0\3\160\1\u015a\12\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\16\160"+
    "\4\0\4\160\1\u015b\14\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\11\160\1\u015c\4\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\4\160"+
    "\1\u015d\11\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\12\160\1\337\3\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\3\160"+
    "\1\u015e\12\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\16\160\4\0\20\160\1\u015f\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\1\160\1\334"+
    "\14\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\12\131\1\u0160\3\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\12\131\1\u0161\3\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\16\131\4\0"+
    "\1\131\1\0\2\131\1\u0162\14\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\16\131\4\0\1\131\1\0"+
    "\1\131\1\u0131\15\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\16\131\1\u0163"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\10\131\1\u0164\6\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\35\0\1\u0165\64\0\15\131"+
    "\1\u0166\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\20\0\16\131\4\0\1\131\1\0"+
    "\16\131\1\u0167\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\12\131\1\u0168\3\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\11\131"+
    "\1\u0169\4\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\4\131\1\u016a\11\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\131\4\0\1\131\1\0\11\131"+
    "\1\u016b\5\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\35\0\1\u016c\53\0\10\235\1\u0159\16\235\2\u016c\1\u0159"+
    "\25\235\1\u0159\3\235\1\u016d\16\235\11\0\15\160\1\u016e"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\16\160\4\0\20\160\1\u016f\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\12\160\1\u0170\3\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\11\160\1\u0171\4\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\4\160\1\u0172\11\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\16\160\4\0\13\160\1\u0173\5\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\1\131\1\u0174\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\11\131\1\u0175\4\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\1\131\1\u0131\14\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\15\131\1\u0113"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\4\131\1\272\11\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\17\0\1\u0165\16\0\3\u0165\25\0\1\u0165\3\0\1\u0176"+
    "\27\0\16\131\4\0\1\131\1\0\10\131\1\u0177\6\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\14\131"+
    "\1\316\1\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\13\131\1\u0178\2\131"+
    "\4\0\1\131\1\0\17\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\14\131\1\u0179\1\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\1\131\1\316\14\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\1\131"+
    "\1\u017a\14\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\17\0\1\u016c\16\0\3\u016c"+
    "\25\0\1\u016c\3\0\1\u017b\16\0\10\235\1\u016d\16\235"+
    "\2\u017b\1\u016d\13\235\1\u017c\11\235\1\u016d\22\235\11\0"+
    "\16\160\4\0\12\160\1\u017d\6\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\14\160\1\337\1\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\13\160\1\u017e\2\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\14\160\1\u017f\1\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\1\160\1\337\14\160\4\0\21\160\1\0\1\160\2\0"+
    "\2\160\3\0\6\160\20\0\1\160\1\u0180\14\160\4\0"+
    "\21\160\1\0\1\160\2\0\2\160\3\0\6\160\20\0"+
    "\5\131\1\u0181\10\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\3\131\1\u0182"+
    "\12\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\17\0\1\u0176\16\0\3\u0176\13\0"+
    "\1\u0183\11\0\1\u0176\33\0\4\131\1\u0184\11\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\14\131\1\u0185\1\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\10\131\1\u0186\5\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\4\131\1\u0187"+
    "\11\131\4\0\1\131\1\0\17\131\1\0\1\131\2\0"+
    "\2\131\3\0\6\131\17\0\1\u017b\16\0\3\u017b\13\0"+
    "\1\u0188\11\0\1\u017b\22\0\20\235\1\u0189\6\235\2\0"+
    "\51\235\11\0\4\160\1\u018a\11\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\14\160\1\u018b"+
    "\1\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\10\160\1\u018c\5\160\4\0\21\160\1\0"+
    "\1\160\2\0\2\160\3\0\6\160\20\0\4\160\1\u018d"+
    "\11\160\4\0\21\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\16\131\4\0\1\131\1\0\16\131\1\u018e"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\131"+
    "\4\0\1\131\1\0\10\131\1\u018f\6\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\24\0\1\u0190\75\0\16\131"+
    "\4\0\1\131\1\0\11\131\1\u0191\5\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\15\131\1\u0192\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\16\131\4\0\1\131\1\0\5\131\1\u0193"+
    "\11\131\1\0\1\131\2\0\2\131\3\0\6\131\20\0"+
    "\11\131\1\u0194\4\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\27\0\1\u0195\61\0"+
    "\20\235\1\u0196\6\235\2\0\51\235\11\0\16\160\4\0"+
    "\13\160\1\u0197\5\160\1\0\1\160\2\0\2\160\3\0"+
    "\6\160\20\0\15\160\1\u0198\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\16\160\4\0\7\160"+
    "\1\u0199\11\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\11\160\1\u019a\4\160\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\15\131\1\u0162\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\20\0\4\131\1\u0131\11\131\4\0\1\131\1\0"+
    "\17\131\1\0\1\131\2\0\2\131\3\0\6\131\7\0"+
    "\27\u0190\2\0\51\u0190\11\0\1\131\1\u019b\14\131\4\0"+
    "\1\131\1\0\17\131\1\0\1\131\2\0\2\131\3\0"+
    "\6\131\7\0\11\u019c\16\131\4\0\1\131\1\u019c\17\131"+
    "\1\u019c\1\131\2\u019c\2\131\3\u019c\6\131\7\u019c\11\0"+
    "\4\131\1\u019d\11\131\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\16\131\4\0"+
    "\1\131\1\0\1\u019e\16\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\27\0\1\u0196\61\0\27\u0196\2\0\51\u0196"+
    "\11\0\1\160\1\u019f\14\160\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\7\0\11\u019c\16\160\4\0"+
    "\21\160\1\u019c\1\160\2\u019c\2\160\3\u019c\6\160\7\u019c"+
    "\11\0\4\160\1\u01a0\2\160\1\u01a1\6\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\16\160"+
    "\4\0\2\160\1\u01a2\16\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\4\131\1\u01a3\11\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\4\131\1\u01a4\11\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\4\160"+
    "\1\u01a5\11\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\7\160\1\u01a6\6\160\4\0\21\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\4\160"+
    "\1\u01a7\11\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\11\131\1\u01a8\4\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\16\131\4\0\1\131\1\0\7\131\1\u01a9\7\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\11\160"+
    "\1\u01aa\4\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\16\160\4\0\11\160\1\u01ab\7\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\3\131"+
    "\1\u01ac\12\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\3\160\1\u01ad\12\160"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\15\131\1\u01ae\4\0\1\131\1\0\17\131\1\0"+
    "\1\131\2\0\2\131\3\0\6\131\20\0\15\160\1\u01af"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\16\131\4\0\1\131\1\0\10\131\1\u01b0\6\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\16\160"+
    "\4\0\12\160\1\u01b1\6\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\4\131\1\u01b2\11\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\4\160\1\u01b3\11\160\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\20\0\16\131\4\0\1\131"+
    "\1\0\11\131\1\u01b4\5\131\1\0\1\131\2\0\2\131"+
    "\3\0\6\131\20\0\16\160\4\0\13\160\1\u01b5\5\160"+
    "\1\0\1\160\2\0\2\160\3\0\6\160\20\0\1\131"+
    "\1\u01b6\14\131\4\0\1\131\1\0\17\131\1\0\1\131"+
    "\2\0\2\131\3\0\6\131\20\0\1\160\1\u01b7\14\160"+
    "\4\0\21\160\1\0\1\160\2\0\2\160\3\0\6\160"+
    "\20\0\4\131\1\u01b8\11\131\4\0\1\131\1\0\17\131"+
    "\1\0\1\131\2\0\2\131\3\0\6\131\20\0\4\160"+
    "\1\u01b9\11\160\4\0\21\160\1\0\1\160\2\0\2\160"+
    "\3\0\6\160\20\0\11\131\1\u01ba\4\131\4\0\1\131"+
    "\1\0\17\131\1\0\1\131\2\0\2\131\3\0\6\131"+
    "\20\0\11\160\1\u01bb\4\160\4\0\21\160\1\0\1\160"+
    "\2\0\2\160\3\0\6\160\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24948];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\2\1\6\11\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\2\1\4\11\1\1\1\11\3\1\6\11\1\1"+
    "\6\11\1\1\3\11\1\1\4\11\1\1\2\11\2\1"+
    "\1\11\3\1\3\11\24\1\1\11\1\1\3\11\17\1"+
    "\2\0\11\1\2\0\22\1\1\0\22\1\2\0\13\1"+
    "\2\0\17\1\1\0\20\1\1\0\1\11\12\1\2\0"+
    "\13\1\1\0\15\1\1\0\15\1\2\0\7\1\1\11"+
    "\3\1\1\0\12\1\1\11\12\1\1\0\10\1\1\0"+
    "\17\1\1\0\6\1\1\0\14\1\1\0\6\1\1\0"+
    "\11\1\1\0\4\1\1\0\7\1\1\0\4\1\1\0"+
    "\14\1\1\0\6\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[443];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Keep track of braces in the PREAMBLE_OPTION state
   */
  private int preambleOptionBracesCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 79: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return STAR;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return EQUALS;
            } 
            // fall through
          case 86: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 93: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 94: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 95: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 96: break;
          case 25: 
            { preambleOptionBracesCount++; return OPEN_BRACE;
            } 
            // fall through
          case 97: break;
          case 26: 
            { if (preambleOptionBracesCount == 0) {
          yypopState();
        }
        else {
            preambleOptionBracesCount--;
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 98: break;
          case 27: 
            { yypopState();
          newEnvironmentBracesNesting = 0;
          yypushState(NEW_ENVIRONMENT_DEFINITION);
          return CLOSE_BRACE;
            } 
            // fall through
          case 99: break;
          case 28: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 100: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have returned normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 101: break;
          case 30: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 102: break;
          case 31: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 103: break;
          case 32: 
            { yypopState(); yypushState(NEW_DOCUMENT_ENV_DEFINITION_ARGS_SPEC); newEnvironmentBracesNesting = 0; return CLOSE_BRACE;
            } 
            // fall through
          case 104: break;
          case 33: 
            { newEnvironmentBracesNesting--;
        if (newEnvironmentBracesNesting <= 0) {
            yypopState();
            yypushState(NEW_ENVIRONMENT_DEFINITION);
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 105: break;
          case 34: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 106: break;
          case 35: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 107: break;
          case 36: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 108: break;
          case 37: 
            { yypopState();
            // toString to fix comparisons of charsequence subsequences with string
            if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
                yypushState(VERBATIM_START);
            }
            else if (yytext().toString().equals("algorithmic")) {
                yypushState(PSEUDOCODE);
            }
            return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 109: break;
          case 38: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 110: break;
          case 39: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 111: break;
          case 40: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 113: break;
          case 42: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 114: break;
          case 43: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 115: break;
          case 44: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 116: break;
          case 45: 
            { // Pop current state
        yypopState();
        if (EnvironmentMagic.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 117: break;
          case 46: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 118: break;
          case 47: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 120: break;
          case 49: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 121: break;
          case 50: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 122: break;
          case 51: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 123: break;
          case 52: 
            { yypushState(PREAMBLE_OPTION); preambleOptionBracesCount = 0; return OPEN_BRACE;
            } 
            // fall through
          case 124: break;
          case 53: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 125: break;
          case 54: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return END_TOKEN;
            } 
            // fall through
          case 129: break;
          case 58: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 130: break;
          case 59: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 131: break;
          case 60: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 132: break;
          case 61: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 134: break;
          case 63: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 137: break;
          case 66: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 138: break;
          case 67: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 140: break;
          case 69: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 141: break;
          case 70: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 142: break;
          case 71: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 143: break;
          case 72: 
            { yypushState(NEW_DOCUMENT_ENV_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
