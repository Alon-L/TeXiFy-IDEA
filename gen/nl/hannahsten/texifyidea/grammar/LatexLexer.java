/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.hannahsten.texifyidea.grammar;

import java.util.*;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import nl.hannahsten.texifyidea.util.Magic;

import static nl.hannahsten.texifyidea.psi.LatexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LatexLexer.flex</tt>
 */
public class LatexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_MATH = 2;
  public static final int INLINE_MATH_LATEX = 4;
  public static final int DISPLAY_MATH = 6;
  public static final int TEXT_INSIDE_INLINE_MATH = 8;
  public static final int NESTED_INLINE_MATH = 10;
  public static final int PREAMBLE_OPTION = 12;
  public static final int NEW_ENVIRONMENT_DEFINITION_NAME = 14;
  public static final int NEW_ENVIRONMENT_DEFINITION = 16;
  public static final int NEW_ENVIRONMENT_SKIP_BRACE = 18;
  public static final int NEW_ENVIRONMENT_DEFINITION_END = 20;
  public static final int LATEX3 = 22;
  public static final int INLINE_VERBATIM_START = 24;
  public static final int INLINE_VERBATIM = 26;
  public static final int POSSIBLE_VERBATIM_BEGIN = 28;
  public static final int VERBATIM_OPTIONAL_ARG = 30;
  public static final int VERBATIM_START = 32;
  public static final int VERBATIM_END = 34;
  public static final int VERBATIM = 36;
  public static final int POSSIBLE_VERBATIM_OPTIONAL_ARG = 38;
  public static final int POSSIBLE_VERBATIM_END = 40;
  public static final int PSEUDOCODE = 42;
  public static final int POSSIBLE_PSEUDOCODE_END = 44;
  public static final int OFF = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\27\2\31\1\30\22\0\1\44\1\43\1\76\1\0\1\71\1\47\1\74\1\0\1\2\1"+
    "\3\1\66\1\0\1\75\15\0\1\34\1\0\1\72\1\51\1\73\1\0\1\17\1\55\3\33\1\35\1\54"+
    "\2\33\1\56\2\33\1\61\2\33\1\42\1\63\1\33\1\60\1\40\1\45\1\64\1\33\1\57\1\46"+
    "\2\33\1\4\1\1\1\5\1\0\1\34\1\0\1\25\1\11\1\23\1\16\1\12\1\20\1\13\1\24\1\14"+
    "\2\33\1\37\1\70\1\15\1\52\1\36\1\33\1\26\1\50\1\22\1\62\1\65\1\67\1\21\1\41"+
    "\1\33\1\6\1\77\1\7\7\0\1\32\32\0\1\53\337\0\1\53\177\0\13\53\35\0\2\32\5\0"+
    "\1\53\57\0\1\53\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\3\2\1\27\1\30\1\1\1\31\1\2\1\32\1\33"+
    "\1\34\1\35\1\2\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\2\1\53\1\45\1\54\1\55\1\56\12\54\1\14"+
    "\1\57\1\14\1\60\1\54\1\61\1\62\1\63\10\54"+
    "\2\0\11\54\2\0\12\54\1\57\1\0\1\57\1\14"+
    "\11\54\2\0\5\54\1\64\5\54\2\0\1\54\1\65"+
    "\7\54\1\0\1\57\1\14\10\54\1\0\1\66\1\67"+
    "\2\54\1\64\6\54\2\0\7\54\1\70\1\0\1\57"+
    "\1\14\1\71\6\54\1\70\1\0\5\54\1\72\7\54"+
    "\2\0\1\73\6\54\1\70\1\0\1\57\6\54\1\74"+
    "\2\54\1\75\7\54\1\0\6\54\1\0\1\57\14\54"+
    "\1\0\5\54\1\70\1\0\1\57\5\54\1\70\5\54"+
    "\1\0\5\54\1\0\1\57\7\54\1\0\3\54\1\0"+
    "\1\57\5\54\1\0\3\54\1\0\1\57\5\54\1\76"+
    "\3\54\1\0\1\77\4\54\1\100\1\101\1\54\1\101"+
    "\3\54\1\102\2\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u0680\0\u0680\0\u0680\0\u0680\0\u0680"+
    "\0\u06c0\0\u0680\0\u0680\0\u0700\0\u0680\0\u0600\0\u0680\0\u0740"+
    "\0\u0740\0\u0680\0\u0680\0\u0680\0\u0680\0\u0780\0\u0680\0\u07c0"+
    "\0\u0800\0\u0840\0\u0680\0\u0680\0\u0680\0\u0680\0\u0880\0\u0680"+
    "\0\u0680\0\u0680\0\u0680\0\u08c0\0\u0680\0\u0680\0\u0680\0\u0900"+
    "\0\u0680\0\u0680\0\u0680\0\u0680\0\u0940\0\u0680\0\u0680\0\u0980"+
    "\0\u09c0\0\u0680\0\u0a00\0\u0a40\0\u0a80\0\u0680\0\u0680\0\u0680"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0680\0\u0e00\0\u0680"+
    "\0\u0680\0\u0680\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u0b40\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u0b40\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u0680\0\u0b40\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u0b40\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u0b40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00"+
    "\0\u2c40\0\u2c80\0\u0b40\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0"+
    "\0\u2e00\0\u0680\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u0680\0\u3040\0\u3080\0\u0b40\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900"+
    "\0\u0b40\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u0e40\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480"+
    "\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680"+
    "\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u0680\0\u0b40\0\u4800"+
    "\0\u0e40\0\u4840\0\u4880\0\u48c0\0\u0e40\0\u0b40\0\u0e40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\16\31\3\41\1\42\10\31\1\43\1\41\2\31"+
    "\1\44\1\31\1\45\1\31\1\42\12\31\1\46\2\31"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\31"+
    "\1\56\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\16\31\3\41\1\42\10\31\1\43\1\41\2\31\1\44"+
    "\1\31\1\45\1\31\1\42\12\31\1\46\2\31\1\57"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\31\1\60"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\16\31"+
    "\3\41\1\42\10\31\1\43\1\41\2\31\1\44\1\31"+
    "\1\45\1\31\1\42\12\31\1\46\2\31\1\42\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\61\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\16\31\3\41"+
    "\1\42\10\31\1\43\1\41\2\31\1\44\1\31\1\45"+
    "\1\31\1\42\12\31\1\46\2\31\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\31\1\62\1\33\1\34"+
    "\1\35\1\36\1\37\1\63\1\41\16\31\3\41\1\42"+
    "\10\31\1\43\1\41\2\31\1\44\1\31\1\45\1\31"+
    "\1\42\12\31\1\46\2\31\1\64\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\31\1\62\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\16\31\3\41\1\42\10\31"+
    "\1\43\1\41\2\31\1\44\1\31\1\45\1\31\1\42"+
    "\12\31\1\46\2\31\1\57\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\31\1\62\1\33\1\34\1\35\1\36"+
    "\1\37\1\63\1\41\16\31\3\41\1\42\10\31\1\43"+
    "\1\41\2\31\1\44\1\31\1\45\1\31\1\42\12\31"+
    "\1\46\2\31\1\65\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\31\1\62\1\33\1\34\1\35\1\36\1\37"+
    "\1\66\1\41\16\31\3\41\1\42\10\31\1\43\1\41"+
    "\2\31\1\44\1\31\1\45\1\31\1\42\12\31\1\46"+
    "\2\31\1\42\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\31\1\67\1\33\1\34\1\35\1\36\1\70\1\71"+
    "\1\41\16\31\3\41\1\42\10\31\1\43\1\41\2\31"+
    "\1\44\1\31\1\45\1\31\1\42\12\31\1\46\2\31"+
    "\1\65\1\50\1\51\1\52\1\53\1\54\1\55\1\31"+
    "\1\62\1\33\1\34\1\35\1\36\1\72\1\40\1\41"+
    "\16\31\3\41\1\42\10\31\1\43\1\41\2\31\1\44"+
    "\1\31\1\45\1\31\1\42\12\31\1\46\2\31\1\42"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\31\1\67"+
    "\1\33\1\34\1\35\1\36\1\70\1\73\1\41\16\31"+
    "\3\41\1\42\10\31\1\43\1\41\2\31\1\44\1\31"+
    "\1\45\1\31\1\42\12\31\1\46\2\31\1\65\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\74\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\16\31\3\41"+
    "\1\42\10\31\1\43\1\41\2\31\1\44\1\31\1\45"+
    "\1\31\1\42\12\31\1\46\2\31\1\42\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\6\75\1\76\71\75\100\77"+
    "\1\100\1\62\1\33\1\34\1\35\1\36\1\37\1\63"+
    "\1\41\16\100\3\41\1\42\10\100\1\43\1\41\2\100"+
    "\1\44\1\100\1\45\1\100\1\42\15\100\1\42\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\62\1\33"+
    "\1\34\1\101\1\102\1\37\1\40\1\41\16\31\3\41"+
    "\1\42\10\31\1\43\1\41\2\31\1\44\1\31\1\45"+
    "\1\31\1\42\12\31\1\46\2\31\1\42\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\31\1\62\1\33\1\34"+
    "\1\35\1\36\1\37\1\103\1\41\16\31\3\41\1\42"+
    "\10\31\1\43\1\41\2\31\1\44\1\31\1\45\1\31"+
    "\1\42\12\31\1\46\2\31\1\42\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\31\1\62\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\16\31\3\41\1\42\10\31"+
    "\1\43\1\41\2\31\1\44\1\31\1\45\1\31\1\42"+
    "\12\31\1\46\2\31\1\42\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\104\1\105\6\104\1\41\16\104\3\41"+
    "\12\104\1\41\33\104\4\106\1\107\3\106\1\110\16\106"+
    "\3\110\12\106\1\110\33\106\1\111\5\112\1\37\2\112"+
    "\16\111\4\112\10\111\2\112\2\111\1\112\1\111\1\112"+
    "\1\111\1\112\15\111\7\112\1\31\1\113\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\16\31\3\41\1\42"+
    "\10\31\1\43\1\41\2\31\1\44\1\31\1\45\1\31"+
    "\1\42\12\31\1\46\2\31\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\114\1\62\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\16\114\3\41\1\42\10\114"+
    "\1\43\1\41\2\114\1\44\1\114\1\45\1\114\1\42"+
    "\15\114\1\42\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\47\104\1\115\30\104\1\31\10\0\16\31\4\0\10\31"+
    "\2\0\2\31\1\0\1\31\1\0\1\31\1\0\15\31"+
    "\7\0\2\116\1\117\1\116\1\120\4\116\1\121\1\122"+
    "\2\123\1\124\1\125\1\126\6\123\1\127\1\0\1\116"+
    "\2\0\1\123\1\116\1\130\1\123\1\131\3\123\2\116"+
    "\2\123\1\116\1\123\1\116\1\123\1\116\11\123\1\132"+
    "\1\116\2\123\7\116\110\0\1\41\16\0\3\41\12\0"+
    "\1\41\33\0\27\133\2\0\12\133\1\134\1\135\33\133"+
    "\6\0\1\136\71\0\4\116\1\120\4\116\1\121\1\122"+
    "\2\123\1\124\1\125\1\126\2\123\1\137\3\123\1\127"+
    "\1\0\1\116\2\0\1\123\1\116\1\130\1\123\1\131"+
    "\3\123\2\116\2\123\1\116\1\123\1\116\1\123\1\116"+
    "\11\123\1\132\1\116\2\123\12\116\1\57\1\120\4\116"+
    "\1\121\1\122\2\123\1\124\1\125\1\126\6\123\1\127"+
    "\1\0\1\116\2\0\1\123\1\116\1\130\1\123\1\131"+
    "\3\123\2\116\2\123\1\116\1\123\1\116\1\123\1\116"+
    "\11\123\1\132\1\116\2\123\11\116\1\117\1\116\1\120"+
    "\1\140\3\116\1\121\1\122\2\123\1\124\1\125\1\126"+
    "\6\123\1\127\1\0\1\116\2\0\1\123\1\116\1\130"+
    "\1\123\1\131\3\123\2\116\2\123\1\116\1\123\1\116"+
    "\1\123\1\116\11\123\1\132\1\116\2\123\13\116\1\120"+
    "\4\116\1\121\1\122\2\123\1\124\1\125\1\126\6\123"+
    "\1\127\1\0\1\116\2\0\1\123\1\116\1\130\1\123"+
    "\1\131\3\123\2\116\2\123\1\116\1\123\1\116\1\123"+
    "\1\116\11\123\1\132\1\116\2\123\13\116\1\141\1\142"+
    "\3\116\1\121\1\122\2\123\1\124\1\125\1\126\6\123"+
    "\1\127\1\0\1\116\2\0\1\123\1\116\1\130\1\123"+
    "\1\131\3\123\2\116\2\123\1\116\1\123\1\116\1\123"+
    "\1\116\11\123\1\132\1\116\2\123\13\116\1\120\4\116"+
    "\4\143\1\144\1\145\1\146\6\143\1\147\1\0\1\116"+
    "\2\0\2\143\1\150\1\143\1\151\3\143\2\116\2\143"+
    "\1\116\1\143\1\116\1\143\1\116\11\143\1\152\1\116"+
    "\2\143\7\116\1\100\10\0\16\100\4\0\10\100\2\0"+
    "\2\100\1\0\1\100\1\0\1\100\1\0\15\100\20\0"+
    "\1\153\1\154\75\0\1\110\16\0\3\110\12\0\1\110"+
    "\33\0\1\111\10\0\16\111\4\0\10\111\2\0\2\111"+
    "\1\0\1\111\1\0\1\111\1\0\15\111\7\0\2\116"+
    "\1\117\1\116\1\120\4\116\1\121\1\155\2\123\1\124"+
    "\1\125\1\126\6\123\1\127\1\0\1\116\2\0\1\123"+
    "\1\116\1\156\1\123\1\131\3\123\2\116\2\123\1\116"+
    "\1\123\1\116\1\123\1\116\1\157\1\123\1\160\1\161"+
    "\1\162\1\163\1\123\1\164\1\165\1\132\1\116\2\123"+
    "\7\116\1\114\10\0\16\114\4\0\10\114\2\0\2\114"+
    "\1\0\1\114\1\0\1\114\1\0\15\114\52\0\1\166"+
    "\1\167\44\0\1\123\1\170\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\4\123\1\171\11\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\16\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\1\123\1\172"+
    "\14\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\3\123\1\173\12\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\3\123\1\174\12\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\1\123\1\175\14\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\10\123\1\176"+
    "\5\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\177\1\0\1\123\1\0\6\123\1\200\3\123\1\0"+
    "\2\123\20\0\1\123\1\201\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\7\0\27\133\2\0\47\133\10\202"+
    "\1\134\16\202\2\203\1\134\4\202\1\204\5\202\1\134"+
    "\33\202\27\133\2\0\12\133\1\205\34\133\11\0\1\123"+
    "\1\206\14\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\16\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\143"+
    "\1\207\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\3\143"+
    "\1\210\12\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\3\143"+
    "\1\211\12\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\143"+
    "\1\212\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\10\143"+
    "\1\213\5\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\16\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\214\1\0\1\143"+
    "\1\0\6\143\1\215\3\143\1\0\2\143\20\0\1\143"+
    "\1\216\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\21\0\1\217"+
    "\102\0\1\220\73\0\4\123\1\221\11\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\4\123\1\222\3\123"+
    "\1\176\5\123\4\0\1\123\1\0\2\123\1\223\3\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\16\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\224\1\0\6\123"+
    "\1\225\3\123\1\0\2\123\20\0\7\123\1\226\6\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\13\123"+
    "\1\227\2\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\1\123\1\230\14\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\16\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\231\1\0\12\123"+
    "\1\0\2\123\20\0\15\123\1\232\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\4\123\1\233\11\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\17\0\1\166\16\0"+
    "\3\166\4\0\1\234\5\0\1\166\76\0\1\235\45\0"+
    "\2\123\1\236\13\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\5\123\1\237\10\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\16\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\1\240\1\123\20\0\15\123\1\241\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\7\123\1\242"+
    "\6\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\4\123\1\124\11\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\16\123\4\0\1\123\1\0\1\123\1\243"+
    "\4\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\11\123\1\244\4\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\14\123\1\245"+
    "\1\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\15\123\1\246\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\7\0\27\202\2\0\47\202\10\0\1\203\16\0\3\203"+
    "\4\0\1\247\5\0\1\203\33\0\25\202\1\250\1\202"+
    "\2\0\47\202\22\133\1\251\4\133\2\0\14\133\1\251"+
    "\32\133\11\0\10\123\1\252\5\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\16\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\1\253\1\143\20\0\15\143\1\254\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\7\143\1\255\6\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\4\143\1\144\11\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\16\143\4\0\3\143\1\256\4\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\11\143\1\257\4\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\14\143\1\260\1\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\15\143\1\261\4\0\10\143\2\0\2\143"+
    "\1\0\1\143\1\0\1\143\1\0\12\143\1\0\2\143"+
    "\22\0\1\262\102\0\1\263\72\0\5\123\1\264\10\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\5\123"+
    "\1\265\10\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\16\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\266\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\15\123\1\267\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\4\123\1\270\11\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\3\123\1\271\12\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\16\123\4\0"+
    "\1\123\1\0\1\123\1\272\4\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\273\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\274\1\0\12\123\1\0\2\123\20\0"+
    "\11\123\1\275\4\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\34\0\1\276\74\0\1\277\22\0\1\277\43\0"+
    "\3\123\1\300\12\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\1\123\1\301\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\1\123\1\302\14\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\4\123\1\303"+
    "\11\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\2\123\1\304\3\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\3\123\1\305\12\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\1\123\1\306\14\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\1\307\15\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\34\0\1\310"+
    "\52\0\26\202\1\311\2\0\47\202\12\133\1\312\14\133"+
    "\2\0\4\133\1\312\42\133\11\0\11\123\1\313\4\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\1\143"+
    "\1\314\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\143"+
    "\1\315\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\4\143"+
    "\1\316\11\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\16\143"+
    "\4\0\4\143\1\317\3\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\3\143"+
    "\1\320\12\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\143"+
    "\1\321\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\322"+
    "\15\143\4\0\10\143\2\0\2\143\1\0\1\143\1\0"+
    "\1\143\1\0\12\143\1\0\2\143\23\0\1\323\74\0"+
    "\16\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\1\324\1\123\1\325\1\326"+
    "\1\123\1\327\1\123\1\330\2\123\1\0\2\123\20\0"+
    "\1\123\1\331\14\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\2\123\1\332"+
    "\7\123\1\0\2\123\20\0\16\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\1\123\1\333\10\123\1\0\2\123\20\0\12\123\1\334"+
    "\3\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\2\123\1\335\3\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\1\123\1\336\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\16\123\4\0\1\123\1\0"+
    "\1\123\1\226\4\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\12\123\1\337"+
    "\3\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\3\123\1\340\12\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\35\0\1\341\63\0\1\342\22\0\1\342\53\0"+
    "\4\123\1\343\11\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\4\123\1\344\11\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\12\123\1\345\3\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\1\123\1\346"+
    "\14\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\3\123\1\347\2\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\4\123\1\350\11\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\10\123\1\351\5\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\16\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\352\2\123\35\0\1\353\51\0"+
    "\27\202\2\0\17\202\1\354\27\202\21\133\1\134\5\133"+
    "\2\0\15\133\1\134\31\133\11\0\4\143\1\355\11\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\12\143\1\356\3\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\1\143\1\357\14\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\16\143\4\0\5\143"+
    "\1\360\2\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\4\143\1\361\11\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\10\143\1\362\5\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\16\143\4\0\10\143"+
    "\2\0\2\143\1\0\1\143\1\0\1\143\1\0\12\143"+
    "\1\352\2\143\24\0\1\363\73\0\16\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\364"+
    "\1\0\6\123\1\365\3\123\1\0\2\123\20\0\7\123"+
    "\1\366\6\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\13\123\1\367\2\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\16\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\370\1\0\12\123"+
    "\1\0\2\123\20\0\15\123\1\371\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\7\123\1\331\6\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\16\123\4\0"+
    "\1\123\1\0\2\123\1\372\3\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\11\123\1\373\4\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\1\123\1\226\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\14\123\1\374\1\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\1\123\1\375"+
    "\14\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\2\123\1\366\3\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\57\0\1\376\50\0\1\166\24\0\1\166\42\0"+
    "\16\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\11\123\1\377\1\0\2\123"+
    "\20\0\11\123\1\u0100\4\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\10\123\1\u0101\5\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\16\123\4\0\1\123"+
    "\1\0\4\123\1\u0102\1\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\16\123"+
    "\4\0\1\123\1\0\2\123\1\u0103\3\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\1\123\1\u0104\14\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\57\0\1\u0105\27\0\12\202\1\u0106\14\202"+
    "\2\0\47\202\11\0\16\143\4\0\10\143\2\0\2\143"+
    "\1\0\1\143\1\0\1\143\1\0\11\143\1\u0107\1\0"+
    "\2\143\20\0\11\143\1\u0108\4\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\10\143\1\u0109\5\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\16\143\4\0\6\143\1\u010a\1\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\16\143\4\0\4\143\1\u010b\3\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\1\143\1\u010c\14\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\15\123\1\366\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\4\123\1\u010d\11\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\3\123\1\u010e\12\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\16\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\u010f\1\0\12\123\1\0\2\123\20\0\16\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\u0110\1\0\12\123\1\0\2\123\20\0\16\123"+
    "\4\0\1\123\1\0\2\123\1\226\3\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\3\123\1\u0111\12\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\11\123\1\226\4\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\5\123\1\u0112\10\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\21\0\1\u0113"+
    "\76\0\3\123\1\u0114\12\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\16\123\4\0\1\123\1\0\2\123"+
    "\1\u0115\3\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\11\123\1\u0116\4\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\4\123"+
    "\1\u0117\11\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\3\123\1\u0118\12\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\12\123\1\u0119\3\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\21\0\1\u011a\65\0\26\202"+
    "\1\u011b\2\0\47\202\11\0\3\143\1\u011c\12\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\16\143\4\0\4\143\1\u011d"+
    "\3\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\11\143\1\u011e\4\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\4\143\1\u011f\11\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\3\143\1\u0120\12\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\12\143\1\u0121\3\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\12\123\1\u0122\3\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\20\0\16\123\4\0"+
    "\1\123\1\0\2\123\1\u0123\3\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\16\123\4\0\1\123\1\0\1\123\1\366\4\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\12\123\1\u0124\3\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\16\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\u0125\1\0"+
    "\12\123\1\0\2\123\20\0\16\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\6\123\1\u0126\3\123\1\0\2\123\35\0\1\u0127\62\0"+
    "\15\123\1\u0128\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\16\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\6\123\1\u0129\3\123"+
    "\1\0\2\123\20\0\12\123\1\u012a\3\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\11\123\1\u012b\4\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\4\123"+
    "\1\u012c\11\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\35\0\1\u012d\51\0\10\202\1\u011b\16\202\2\u012d\1\u011b"+
    "\12\202\1\u011b\4\202\1\u012e\26\202\11\0\15\143\1\u012f"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\16\143\4\0\10\143"+
    "\2\0\2\143\1\0\1\143\1\0\1\143\1\0\6\143"+
    "\1\u0130\3\143\1\0\2\143\20\0\12\143\1\u0131\3\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\11\143\1\u0132\4\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\4\143\1\u0133\11\143"+
    "\4\0\10\143\2\0\2\143\1\0\1\143\1\0\1\143"+
    "\1\0\12\143\1\0\2\143\20\0\11\123\1\u0134\4\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\1\123"+
    "\1\366\14\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\1\123\1\u0135\14\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\20\0\4\123\1\226\11\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\15\123\1\335\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\17\0\1\u0127\16\0"+
    "\3\u0127\12\0\1\u0127\4\0\1\u0136\37\0\16\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\u0137\1\0\12\123\1\0\2\123\20\0\14\123\1\u0119"+
    "\1\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\20\0"+
    "\13\123\1\u0138\2\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\14\123\1\u0139\1\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\1\123\1\u0119\14\123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\17\0\1\u012d\16\0"+
    "\3\u012d\12\0\1\u012d\4\0\1\u013a\26\0\10\202\1\u012e"+
    "\16\202\2\u013a\1\u012e\12\202\1\u012e\5\202\1\u013b\25\202"+
    "\11\0\16\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\u013c\1\0\12\143\1\0\2\143\20\0\14\143"+
    "\1\u0121\1\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\13\143"+
    "\1\u013d\2\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\14\143"+
    "\1\u013e\1\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\1\143"+
    "\1\u0121\14\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\3\123"+
    "\1\u013f\12\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\20\0\5\123\1\u0140\10\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\2\123\17\0\1\u0136\16\0\3\u0136\12\0\1\u0136"+
    "\5\0\1\u0141\36\0\4\123\1\u0142\11\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\14\123\1\u0143\1\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\12\123\1\0\2\123\20\0\10\123"+
    "\1\u0144\5\123\4\0\1\123\1\0\6\123\2\0\2\123"+
    "\1\0\1\123\1\0\1\123\1\0\12\123\1\0\2\123"+
    "\17\0\1\u013a\16\0\3\u013a\12\0\1\u013a\5\0\1\u0145"+
    "\25\0\20\202\1\u0146\6\202\2\0\47\202\11\0\4\143"+
    "\1\u0147\11\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\14\143"+
    "\1\u0148\1\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\10\143"+
    "\1\u0149\5\143\4\0\10\143\2\0\2\143\1\0\1\143"+
    "\1\0\1\143\1\0\12\143\1\0\2\143\20\0\16\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\u014a\1\0\12\123\1\0\2\123\20\0\16\123"+
    "\4\0\1\123\1\0\6\123\2\0\2\123\1\0\1\123"+
    "\1\0\1\123\1\0\6\123\1\u014b\3\123\1\0\2\123"+
    "\24\0\1\u014c\73\0\16\123\4\0\1\123\1\0\6\123"+
    "\2\0\2\123\1\0\1\123\1\0\1\123\1\0\12\123"+
    "\1\0\1\123\1\u014d\20\0\15\123\1\u014e\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\16\123\4\0\1\123"+
    "\1\0\5\123\1\u014f\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\27\0\1\u0150\57\0"+
    "\20\202\1\u0151\6\202\2\0\47\202\11\0\16\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\1\143\1\u0152\20\0\15\143\1\u0153\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\20\0\16\143\4\0\7\143\1\u0154"+
    "\2\0\2\143\1\0\1\143\1\0\1\143\1\0\12\143"+
    "\1\0\2\143\20\0\4\123\1\366\11\123\4\0\1\123"+
    "\1\0\6\123\2\0\2\123\1\0\1\123\1\0\1\123"+
    "\1\0\12\123\1\0\2\123\20\0\15\123\1\u0123\4\0"+
    "\1\123\1\0\6\123\2\0\2\123\1\0\1\123\1\0"+
    "\1\123\1\0\12\123\1\0\2\123\7\0\27\u014c\2\0"+
    "\47\u014c\11\0\1\123\1\u0155\14\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\7\0\11\u0156\16\123\4\0\1\123"+
    "\1\u0156\6\123\2\u0156\2\123\1\u0156\1\123\1\u0156\1\123"+
    "\1\u0156\12\123\1\u0156\2\123\7\u0156\11\0\4\123\1\u0157"+
    "\11\123\4\0\1\123\1\0\6\123\2\0\2\123\1\0"+
    "\1\123\1\0\1\123\1\0\12\123\1\0\2\123\27\0"+
    "\1\u0151\57\0\27\u0151\2\0\47\u0151\11\0\1\143\1\u0158"+
    "\14\143\4\0\10\143\2\0\2\143\1\0\1\143\1\0"+
    "\1\143\1\0\12\143\1\0\2\143\7\0\11\u0156\16\143"+
    "\4\0\10\143\2\u0156\2\143\1\u0156\1\143\1\u0156\1\143"+
    "\1\u0156\12\143\1\u0156\2\143\7\u0156\11\0\4\143\1\u0159"+
    "\2\143\1\u015a\6\143\4\0\10\143\2\0\2\143\1\0"+
    "\1\143\1\0\1\143\1\0\12\143\1\0\2\143\20\0"+
    "\4\123\1\u015b\11\123\4\0\1\123\1\0\6\123\2\0"+
    "\2\123\1\0\1\123\1\0\1\123\1\0\12\123\1\0"+
    "\2\123\20\0\4\143\1\u015c\11\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\7\143\1\u015d\6\143\4\0\10\143\2\0"+
    "\2\143\1\0\1\143\1\0\1\143\1\0\12\143\1\0"+
    "\2\143\20\0\11\123\1\u015e\4\123\4\0\1\123\1\0"+
    "\6\123\2\0\2\123\1\0\1\123\1\0\1\123\1\0"+
    "\12\123\1\0\2\123\20\0\11\143\1\u015f\4\143\4\0"+
    "\10\143\2\0\2\143\1\0\1\143\1\0\1\143\1\0"+
    "\12\143\1\0\2\143\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\30\0\2\1\6\11\1\1\2\11\1\1\1\11\1\1"+
    "\1\11\2\1\4\11\1\1\1\11\3\1\4\11\1\1"+
    "\4\11\1\1\3\11\1\1\4\11\1\1\2\11\2\1"+
    "\1\11\3\1\3\11\15\1\1\11\1\1\3\11\10\1"+
    "\2\0\11\1\2\0\13\1\1\0\13\1\2\0\13\1"+
    "\2\0\11\1\1\0\12\1\1\0\1\11\12\1\2\0"+
    "\10\1\1\0\12\1\1\0\15\1\2\0\7\1\1\11"+
    "\1\0\7\1\1\11\12\1\1\0\6\1\1\0\15\1"+
    "\1\0\6\1\1\0\14\1\1\0\5\1\1\0\10\1"+
    "\1\0\3\1\1\0\6\1\1\0\3\1\1\0\12\1"+
    "\1\0\5\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Deque<Integer> stack = new ArrayDeque<>();


  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }


  public LatexLexer() {
    this((java.io.Reader)null);
  }

  /**
   * In order to avoid a parsing error for new environment definitions, this keeps track of the number of braces in the \newenvironment
   * parameters, so as to know when the parameters are exited.
   */
  private int newEnvironmentBracesNesting = 0;

  /**
   * Also keep track of brackets of verbatim environment optional arguments.
   */
  private int verbatimOptionalArgumentBracketsCount = 0;

  /**
   * Remember the delimiter that inline verbatim started with, to check when to end it.
   */
  private String verbatim_delimiter = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LatexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 68: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 69: break;
          case 3: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 70: break;
          case 4: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 71: break;
          case 5: 
            { return OPEN_BRACKET;
            } 
            // fall through
          case 72: break;
          case 6: 
            { return CLOSE_BRACKET;
            } 
            // fall through
          case 73: break;
          case 7: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 74: break;
          case 8: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 75: break;
          case 9: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 76: break;
          case 10: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 11: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 78: break;
          case 12: 
            { return COMMENT_TOKEN;
            } 
            // fall through
          case 79: break;
          case 13: 
            { return EQUALS;
            } 
            // fall through
          case 80: break;
          case 14: 
            { return STAR;
            } 
            // fall through
          case 81: break;
          case 15: 
            { yypushState(INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 82: break;
          case 16: 
            { return OPEN_ANGLE_BRACKET;
            } 
            // fall through
          case 83: break;
          case 17: 
            { return CLOSE_ANGLE_BRACKET;
            } 
            // fall through
          case 84: break;
          case 18: 
            { return AMPERSAND;
            } 
            // fall through
          case 85: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 86: break;
          case 20: 
            { return QUOTATION_MARK;
            } 
            // fall through
          case 87: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 88: break;
          case 22: 
            { yypopState(); return INLINE_MATH_END;
            } 
            // fall through
          case 89: break;
          case 23: 
            { yypopState(); return CLOSE_BRACE;
            } 
            // fall through
          case 90: break;
          case 24: 
            { yypushState(NESTED_INLINE_MATH); return INLINE_MATH_START;
            } 
            // fall through
          case 91: break;
          case 25: 
            { yypopState(); yypushState(NEW_ENVIRONMENT_DEFINITION); return CLOSE_BRACE;
            } 
            // fall through
          case 92: break;
          case 26: 
            { newEnvironmentBracesNesting++; return OPEN_BRACE;
            } 
            // fall through
          case 93: break;
          case 27: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState(); yypushState(NEW_ENVIRONMENT_SKIP_BRACE);
            // We could have return normal text, but in this way the braces still match
            return OPEN_BRACE;
        } else {
            return CLOSE_BRACE;
        }
            } 
            // fall through
          case 94: break;
          case 28: 
            { yypopState(); newEnvironmentBracesNesting = 1; yypushState(NEW_ENVIRONMENT_DEFINITION_END); return CLOSE_BRACE;
            } 
            // fall through
          case 95: break;
          case 29: 
            { newEnvironmentBracesNesting--;
        if(newEnvironmentBracesNesting == 0) {
            yypopState();
        }
        return CLOSE_BRACE;
            } 
            // fall through
          case 96: break;
          case 30: 
            { yypopState(); verbatim_delimiter = yytext().toString(); yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 97: break;
          case 31: 
            { yypopState(); verbatim_delimiter = "}"; yypushState(INLINE_VERBATIM); return OPEN_BRACE;
            } 
            // fall through
          case 98: break;
          case 32: 
            { if(yytext().toString().equals(verbatim_delimiter)) { yypopState(); return CLOSE_BRACE; } else { return RAW_TEXT_TOKEN; }
            } 
            // fall through
          case 99: break;
          case 33: 
            { yypopState();
        // toString to fix comparisons of charsequence subsequences with string
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            yypushState(VERBATIM_START);
        }
        else if (yytext().toString().equals("algorithmic")) {
            yypushState(PSEUDOCODE);
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 100: break;
          case 34: 
            { verbatimOptionalArgumentBracketsCount++; return OPEN_BRACKET;
            } 
            // fall through
          case 101: break;
          case 35: 
            { verbatimOptionalArgumentBracketsCount--;
        if (verbatimOptionalArgumentBracketsCount == 0) { yypopState(); yypushState(VERBATIM); }
        return CLOSE_BRACKET;
            } 
            // fall through
          case 102: break;
          case 36: 
            { yypopState(); yypushState(POSSIBLE_VERBATIM_OPTIONAL_ARG); return CLOSE_BRACE;
            } 
            // fall through
          case 103: break;
          case 37: 
            { return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 104: break;
          case 38: 
            { yypopState(); yypushState(VERBATIM); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 105: break;
          case 39: 
            { verbatimOptionalArgumentBracketsCount++; yypopState(); yypushState(VERBATIM_OPTIONAL_ARG); return OPEN_BRACKET;
            } 
            // fall through
          case 106: break;
          case 40: 
            { yypopState(); yypushState(VERBATIM); return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 107: break;
          case 41: 
            { // Pop current state
        yypopState();
        if (Magic.Environment.verbatim.contains(yytext().toString())) {
            // Pop verbatim state
            yypopState();
            return NORMAL_TEXT_WORD;
        }
        return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 108: break;
          case 42: 
            { yypopState(); return RAW_TEXT_TOKEN;
            } 
            // fall through
          case 109: break;
          case 43: 
            { yypopState();
        if (yytext().toString().equals("algorithmic")) {
            // Pop pseudocode state
            yypopState();
        }
        return NORMAL_TEXT_WORD;
            } 
            // fall through
          case 110: break;
          case 44: 
            { return COMMAND_TOKEN;
            } 
            // fall through
          case 111: break;
          case 45: 
            { yypushState(INLINE_MATH_LATEX); return INLINE_MATH_START;
            } 
            // fall through
          case 112: break;
          case 46: 
            { yypushState(DISPLAY_MATH); return DISPLAY_MATH_START;
            } 
            // fall through
          case 113: break;
          case 47: 
            { return MAGIC_COMMENT_TOKEN;
            } 
            // fall through
          case 114: break;
          case 48: 
            { yypushState(PREAMBLE_OPTION); return OPEN_BRACE;
            } 
            // fall through
          case 115: break;
          case 49: 
            { yypopState(); return DISPLAY_MATH_END;
            } 
            // fall through
          case 116: break;
          case 50: 
            { return DISPLAY_MATH_START;
            } 
            // fall through
          case 117: break;
          case 51: 
            { return DISPLAY_MATH_END;
            } 
            // fall through
          case 118: break;
          case 52: 
            { return BEGIN_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 119: break;
          case 53: 
            { return END_TOKEN;
            } 
            // fall through
          case 120: break;
          case 54: 
            { yypushState(POSSIBLE_VERBATIM_END); return END_TOKEN;
            } 
            // fall through
          case 121: break;
          case 55: 
            { yypushState(POSSIBLE_PSEUDOCODE_END); return END_TOKEN;
            } 
            // fall through
          case 122: break;
          case 56: 
            { yypushState(INLINE_VERBATIM_START); return COMMAND_TOKEN;
            } 
            // fall through
          case 123: break;
          case 57: 
            { yypushState(TEXT_INSIDE_INLINE_MATH); return COMMAND_TOKEN;
            } 
            // fall through
          case 124: break;
          case 58: 
            { return MIDDLE_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 125: break;
          case 59: 
            { yypushState(POSSIBLE_VERBATIM_BEGIN); return BEGIN_TOKEN;
            } 
            // fall through
          case 126: break;
          case 60: 
            { return BEGIN_TOKEN;
            } 
            // fall through
          case 127: break;
          case 61: 
            { return END_PSEUDOCODE_BLOCK;
            } 
            // fall through
          case 128: break;
          case 62: 
            { yypopState(); return COMMENT_TOKEN;
            } 
            // fall through
          case 129: break;
          case 63: 
            { yypushState(OFF); return COMMENT_TOKEN;
            } 
            // fall through
          case 130: break;
          case 64: 
            { return COMMAND_IFNEXTCHAR;
            } 
            // fall through
          case 131: break;
          case 65: 
            { yypushState(LATEX3); return COMMAND_TOKEN;
            } 
            // fall through
          case 132: break;
          case 66: 
            { yypopState(); return COMMAND_TOKEN;
            } 
            // fall through
          case 133: break;
          case 67: 
            { yypushState(NEW_ENVIRONMENT_DEFINITION_NAME); return COMMAND_TOKEN;
            } 
            // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
